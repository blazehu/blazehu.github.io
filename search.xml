<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>c++学习之--冒泡排序</title>
    <url>/2013/11/20/c++/c++%E5%AD%A6%E4%B9%A0%E4%B9%8B--%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序  </span></span><br><span class="line"><span class="comment">//时间复杂度是 O(pow(n,2))</span></span><br><span class="line"><span class="comment">//maopao.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MpSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)   </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])	</span><br><span class="line">			&#123;</span><br><span class="line">				a[j]=a[j]+a[j+<span class="number">1</span>];</span><br><span class="line">				a[j+<span class="number">1</span>]=a[j]-a[j+<span class="number">1</span>];</span><br><span class="line">				a[j]=a[j]-a[j+<span class="number">1</span>];			</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	MpSort(a,N);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o maopao maopao.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./maopao</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之--堆排序</title>
    <url>/2013/11/20/c++/c++%E5%AD%A6%E4%B9%A0%E4%B9%8B--%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序 (大顶堆)</span></span><br><span class="line"><span class="comment">//不稳定，建堆需要时间较长 时间复杂度为 O(n*log2(n))</span></span><br><span class="line"><span class="comment">//head.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	t=*x;</span><br><span class="line">	*x=*y;</span><br><span class="line">	*y=t;	</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lchild=<span class="number">2</span>*i;</span><br><span class="line">	<span class="keyword">int</span> rchild=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">max</span>=i;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;=<span class="built_in">size</span>/<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(lchild&lt;=<span class="built_in">size</span> &amp;&amp; a[lchild]&gt;a[<span class="built_in">max</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">max</span>=lchild;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">if</span>(rchild&lt;=<span class="built_in">size</span> &amp;&amp; a[rchild]&gt;a[<span class="built_in">max</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">max</span>=rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">max</span>!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			Swap(&amp;a[i],&amp;a[<span class="built_in">max</span>]);	</span><br><span class="line">			HeapAdjust(a,<span class="built_in">max</span>,<span class="built_in">size</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildHeap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="built_in">size</span>/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		HeapAdjust(a,i,<span class="built_in">size</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BuildHeap(a,<span class="built_in">size</span>);   </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">size</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		Swap(&amp;a[<span class="number">1</span>],&amp;a[i]);</span><br><span class="line">		HeapAdjust(a,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	HeapSort(a,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o head head.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./head</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">2</span><br><span class="line">2 3 6 7 8</span><br><span class="line">[blazehu@MacBook ~]$</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之--快速排序</title>
    <url>/2013/11/20/c++/c++%E5%AD%A6%E4%B9%A0%E4%B9%8B--%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//最好的情况是 O(n*log2(n)) </span></span><br><span class="line"><span class="comment">//最坏的情况将退化为冒泡排序为 O(pow(2,n))</span></span><br><span class="line"><span class="comment">//kuaipai.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	temp=a[low];</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high &amp;&amp; temp&lt;a[high])</span><br><span class="line">		&#123;</span><br><span class="line">			high--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">		&#123;</span><br><span class="line">			a[low]=a[high];</span><br><span class="line">			low++; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;temp)</span><br><span class="line">		&#123;</span><br><span class="line">			low++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">		&#123;</span><br><span class="line">			a[high]=a[low];</span><br><span class="line">			high--;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	a[low]=temp;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		i=Partition(a,low,high);</span><br><span class="line">		QuickSort(a,low,i<span class="number">-1</span>);</span><br><span class="line">		QuickSort(a,i+<span class="number">1</span>,high);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low,high,temp;</span><br><span class="line">	<span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	QuickSort(a,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o quicksort kuaipai.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./quicksort</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">[blazehu@MacBook ~]$</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之--直接插入排序</title>
    <url>/2013/11/20/c++/c++%E5%AD%A6%E4%B9%A0%E4%B9%8B--%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接插入排序 </span></span><br><span class="line"><span class="comment">//最好的情况是 O(n) 只需要扫一遍。</span></span><br><span class="line"><span class="comment">//最坏的情况是 O(pow(n,2))</span></span><br><span class="line"><span class="comment">//charu.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		t=a[i];</span><br><span class="line">		<span class="keyword">while</span>(t&lt;a[i<span class="number">-1</span>] &amp;&amp; i)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=a[i<span class="number">-1</span>];</span><br><span class="line">			i--;	</span><br><span class="line">		&#125;</span><br><span class="line">		a[i]=t;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	CrSort(a,N);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o demo charu.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./demo</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之--直接选择排序</title>
    <url>/2013/11/20/c++/c++%E5%AD%A6%E4%B9%A0%E4%B9%8B--%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接选择排序 </span></span><br><span class="line"><span class="comment">//时间复杂度为 O(pow(n,2))</span></span><br><span class="line"><span class="comment">//xuanze.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XzSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j,min_i,t;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    min_i=i;</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[min_i]&gt;a[j])</span><br><span class="line">      &#123;</span><br><span class="line">        min_i=j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(min_i!=i)</span><br><span class="line">    &#123;</span><br><span class="line">      t=a[i];</span><br><span class="line">      a[i]=a[min_i];</span><br><span class="line">      a[min_i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *a;</span><br><span class="line">  a=<span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  XzSort(a,N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o test xuanze.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./test</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>API 网关 - Kong 简介</title>
    <url>/2018/06/12/common/Kong%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Kong 是由 Mashape 公司开源的，基于 Nginx 的 API Gateway （ Nginx 中运行的 Lua 应用程序 ）。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>功能：授权、日志、IP 限制、限流、API 统计分析、请求转化、跨域（CORS）等等。<br>可扩展： 支持分布式</p><a id="more"></a><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>Upstream</td><td>负载均衡策略</td></tr><tr><td>Target</td><td>处理请求的 Backend 服务</td></tr><tr><td>Service</td><td>多个 Upstream 的集合</td></tr><tr><td>Route</td><td>转发规则，将请求转发给 Service</td></tr><tr><td>Consumer</td><td>用户，里面记录用户的一些信息</td></tr><tr><td>Certificate</td><td>Https 证书</td></tr><tr><td>Sni</td><td>域名与 Certificate 的绑定</td></tr><tr><td>Plugin</td><td>插件</td></tr></tbody></table><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>测试服务器： 192.168.0.1</p><h5 id="Create-a-Docker-network"><a href="#Create-a-Docker-network" class="headerlink" title="Create a Docker network"></a>Create a Docker network</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create kong-net</span><br></pre></td></tr></table></figure><h5 id="Start-Database"><a href="#Start-Database" class="headerlink" title="Start Database"></a>Start Database</h5><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p <span class="number">5432</span>:<span class="number">5432</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_USER=kong"</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_DB=kong"</span> \</span><br><span class="line">               postgres:<span class="number">9</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="Prepare-Database"><a href="#Prepare-Database" class="headerlink" title="Prepare Database"></a>Prepare Database</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run --rm <span class="string">\</span></span><br><span class="line">     --network=kong-net <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> <span class="string">\</span></span><br><span class="line">     kong:latest kong migrations up</span><br></pre></td></tr></table></figure><h5 id="Start-Kong"><a href="#Start-Kong" class="headerlink" title="Start Kong"></a>Start Kong</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong <span class="string">\</span></span><br><span class="line">     --network=kong-net <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8000</span>:<span class="number">8000</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8443</span>:<span class="number">8443</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8001</span>:<span class="number">8001</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8444</span>:<span class="number">8444</span> <span class="string">\</span></span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure><h5 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">curl -i <span class="string">http:</span><span class="comment">//192.168.0.1:8001/</span></span><br></pre></td></tr></table></figure><h4 id="API-调用"><a href="#API-调用" class="headerlink" title="API 调用"></a>API 调用</h4><h5 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a>官网文档</h5><p><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/</a></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Kong 部署在 <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> 机器上</span><br><span class="line">另有<span class="number">2</span>台机器部署了 web 服务： </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">web 服务地址测试接口： </span><br><span class="line">http:<span class="comment">//192.168.0.2:9100/api/v1/test/</span></span><br><span class="line">http:<span class="comment">//192.168.0.3:9100/api/v1/test/</span></span><br></pre></td></tr></table></figure><h5 id="创建-Upstream"><a href="#创建-Upstream" class="headerlink" title="创建 Upstream"></a>创建 Upstream</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line"><span class="params">--url</span> http:<span class="string">//192.168.0.1</span><span class="function">:8001</span>/upstreams/ \</span><br><span class="line"><span class="params">--data</span> <span class="string">"name=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="给-Upstream-添加-Targets"><a href="#给-Upstream-添加-Targets" class="headerlink" title="给 Upstream 添加 Targets"></a>给 Upstream 添加 Targets</h5><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/upstreams</span><span class="regexp">/backend1/targets</span> \</span></span><br><span class="line"><span class="ruby">--data <span class="string">"target=192.168.0.2:9100"</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">curl -i -X POST \</span></span><br><span class="line"><span class="ruby">--url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/upstreams</span><span class="regexp">/backend1/targets</span> \</span></span><br><span class="line"><span class="ruby">--data <span class="string">"target=192.168.0.3:9100"</span></span></span><br></pre></td></tr></table></figure><h5 id="查看-Upstream-的-Targets-是否添加成功"><a href="#查看-Upstream-的-Targets-是否添加成功" class="headerlink" title="查看 Upstream 的 Targets 是否添加成功"></a>查看 Upstream 的 Targets 是否添加成功</h5><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/10.25.98.128:8001/upstreams</span><span class="regexp">/backend1/targets</span></span></span><br></pre></td></tr></table></figure><h5 id="创建-Service"><a href="#创建-Service" class="headerlink" title="创建 Service"></a>创建 Service</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line"><span class="params">--url</span> http:<span class="string">//192.168.0.1</span><span class="function">:8001</span>/services/ \</span><br><span class="line"><span class="params">--data</span> <span class="string">"name=backend1"</span> \</span><br><span class="line"><span class="params">--data</span> <span class="string">"host=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="查看-Service"><a href="#查看-Service" class="headerlink" title="查看 Service"></a>查看 Service</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">--url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8001</span><span class="regexp">/services/</span>backend1</span><br></pre></td></tr></table></figure><h5 id="给-Service-添加-Routes"><a href="#给-Service-添加-Routes" class="headerlink" title="给 Service 添加 Routes"></a>给 Service 添加 Routes</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -i -X POST --url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8001</span><span class="regexp">/routes/</span> -d </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"service"</span>: &#123;</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">"2bc5f78b-02f8-4109-96c0-0888cbee7ccb"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"methods"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看-Service-下的-Routes"><a href="#查看-Service-下的-Routes" class="headerlink" title="查看 Service 下的 Routes"></a>查看 Service 下的 Routes</h5><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/services</span><span class="regexp">/manageone-cmdb/routes</span></span></span><br></pre></td></tr></table></figure><h5 id="通过-Kong-API-访问-backend1-服务"><a href="#通过-Kong-API-访问-backend1-服务" class="headerlink" title="通过 Kong API 访问 backend1 服务"></a>通过 Kong API 访问 backend1 服务</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -i -X GET http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>v1<span class="regexp">/test/</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/</a></li></ul>]]></content>
      <tags>
        <tag>Kong</tag>
        <tag>API 网关</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF 简介</title>
    <url>/2017/06/14/common/CSRF%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="CSRF-是什么？"><a href="#CSRF-是什么？" class="headerlink" title="CSRF 是什么？"></a>CSRF 是什么？</h4><p>CSRF（Cross-site Request Forgery）跨站请求伪造，缩写为：CSRF/XSRF。 也被称为：one click attack/session riding。</p><a id="more"></a><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">背景：有网站 <span class="selector-tag">a</span>, b</span><br><span class="line"><span class="number">1</span>. a网站通过标签 &lt;<span class="selector-tag">img</span> src=<span class="string">"http://b?xx=xx&amp;x=x"</span>&gt; 构造了一个 get 请求,这个请求为 <span class="selector-tag">b</span> 的地址并且携带了一些请求参数</span><br><span class="line"><span class="number">2</span>. 浏览器发起请求的时候看到的域名是 <span class="selector-tag">b</span> 的域名就会携带 <span class="selector-tag">b</span> 网站下的 cookie</span><br><span class="line"><span class="number">3</span>. 如果 cookie 里携带了一些认证信息，<span class="selector-tag">b</span> 网站就会认为这是一个正常的请求从而导致了一些安全问题</span><br></pre></td></tr></table></figure><p>该攻击可以实施的点在于：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. 浏览器在发起 <span class="builtin-name">get</span> 请求的时候会默认携带该请求域名下的 cookie</span><br><span class="line">2. 一般而言浏览器有同源策略的限制，但是通过标签 &lt;img <span class="attribute">src</span>=<span class="string">""</span>&gt; 或者<span class="built_in"> script </span>所构造的请求不会有这个限制</span><br><span class="line">3. b 网站允许 <span class="builtin-name">get</span> 请求去执行一些操作</span><br></pre></td></tr></table></figure><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><ol><li>检查 Referer</li><li>添加校验 Token</li></ol>]]></content>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>siege 压测工具</title>
    <url>/2017/05/21/common/siege%20%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>siege 是一款高性能的 http 压力测试工具。<br>siege 支持身份验证、 cookies、 http、 https 和 ftp 协议。</p><h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 对指定站点进行压测</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s URL</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>文件中包含的若干URL进行批量测试</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s -f URL_File_Name</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 支持多个Header参数</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s -H <span class="string">"Authorization: XXXX"</span> -H <span class="string">"SX: 1212"</span> URL</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 支持application/json方式请求</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s 'URL POST &lt; data.json' </span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s 'URL PUT &lt; data.json'</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-c</td><td>并发数</td></tr><tr><td>-t</td><td>压力测试时间，可以在时间后加单位</td></tr><tr><td>-r</td><td>重复次数。与-t含义相同，设一个即可</td></tr><tr><td>-f</td><td>包含URL的文本名字</td></tr><tr><td>-b</td><td>BENCHMARK模式，请求之间无需延迟</td></tr><tr><td>-p</td><td>打印整个页面的内容</td></tr><tr><td>-H</td><td>给请求添加头，支持多个</td></tr><tr><td>-A</td><td>给请求设置User-Agent</td></tr><tr><td>-T</td><td>给请求设置Content-Type</td></tr></tbody></table><h4 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h4><table><thead><tr><th>性能参数</th><th>描述</th></tr></thead><tbody><tr><td>Transactions</td><td>总共测试次数</td></tr><tr><td>Availability</td><td>成功次数百分比</td></tr><tr><td>Elapsed time</td><td>总共耗时多少秒</td></tr><tr><td>Data transferred</td><td>总共数据传输</td></tr><tr><td>Response time</td><td>等到响应耗时</td></tr><tr><td>Transaction rate</td><td>平均每秒处理请求数</td></tr><tr><td>Throughput</td><td>吞吐率</td></tr><tr><td>Concurrency</td><td>最高并发</td></tr><tr><td>Successful transactions</td><td>成功的请求数</td></tr><tr><td>Failed transactions</td><td>失败的请求数</td></tr></tbody></table><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.joedog.org/siege-manual/" target="_blank" rel="noopener">https://www.joedog.org/siege-manual/</a></li><li><a href="https://www.jianshu.com/p/74c465ff136f/" target="_blank" rel="noopener">https://www.jianshu.com/p/74c465ff136f/</a></li></ul>]]></content>
      <tags>
        <tag>Siege</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 两数之和</title>
    <url>/2018/03/01/leetcode-cn/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>  </span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>  </span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ret []<span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> index1, num1 := <span class="keyword">range</span> nums &#123;</span><br><span class="line">		<span class="keyword">for</span> index2, num2 := <span class="keyword">range</span> nums &#123;</span><br><span class="line">			<span class="keyword">if</span> index1 != index2 &amp;&amp; num1+num2 == target &#123;</span><br><span class="line">				ret = []<span class="keyword">int</span>&#123;index2, index1&#125;</span><br><span class="line">				<span class="keyword">return</span> ret</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(n^2)</li><li>空间复杂度： O(1)</li></ul><h5 id="一遍哈希表"><a href="#一遍哈希表" class="headerlink" title="一遍哈希表"></a>一遍哈希表</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		ret     []<span class="keyword">int</span></span><br><span class="line">		numsMap <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	numsMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">	<span class="keyword">for</span> index, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := numsMap[num]; ok &#123;</span><br><span class="line">			numsMap[num] = <span class="built_in">append</span>(numsMap[num], index)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			numsMap[num] = []<span class="keyword">int</span>&#123;index&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> indexList, ok := numsMap[target-num]; ok &#123;</span><br><span class="line">			<span class="keyword">for</span> _, i := <span class="keyword">range</span> indexList &#123;</span><br><span class="line">				<span class="keyword">if</span> i != index &#123;</span><br><span class="line">					ret = []<span class="keyword">int</span>&#123;i, index&#125;</span><br><span class="line">					<span class="keyword">return</span> ret</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>10. 正则表达式匹配</title>
    <url>/2018/03/10/leetcode-cn/10.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aa"</span></span><br><span class="line">p = <span class="string">"a"</span></span><br><span class="line"><span class="section">输出: false</span></span><br><span class="line"><span class="section">解释: "a" 无法匹配 "aa" 整个字符串。</span></span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aa"</span></span><br><span class="line">p = <span class="string">"a*"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span></span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"ab"</span></span><br><span class="line">p = <span class="string">".*"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。</span></span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aab"</span></span><br><span class="line">p = <span class="string">"c*a*b"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。</span></span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"mississippi"</span></span><br><span class="line">p = <span class="string">"mis*is*p*."</span></span><br><span class="line"><span class="section">输出: false</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	strList := regexp.MustCompile(p).FindAllString(s, <span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(strList); index++ &#123;</span><br><span class="line">		<span class="keyword">if</span> strList[index] == s &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">    matches := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'.'</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f := <span class="built_in">make</span>([][]<span class="keyword">bool</span>, m + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(f); i++ &#123;</span><br><span class="line">        f[i] = <span class="built_in">make</span>([]<span class="keyword">bool</span>, n + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'*'</span> &#123;</span><br><span class="line">                f[i][j] = f[i][j] || f[i][j<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">if</span> matches(i, j - <span class="number">1</span>) &#123;</span><br><span class="line">                    f[i][j] = f[i][j] || f[i<span class="number">-1</span>][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> matches(i, j) &#123;</span><br><span class="line">                f[i][j] = f[i][j] || f[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// . 46, * 42</span></span><br><span class="line">	s, p := <span class="string">"aa"</span>, <span class="string">"a"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">	s, p = <span class="string">"aa"</span>, <span class="string">"a*"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"ab"</span>, <span class="string">".*"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"ab"</span>, <span class="string">".*c"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">	s, p = <span class="string">"aab"</span>, <span class="string">"c*a*b"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"mississippi"</span>, <span class="string">"mis*is*p*."</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">	s, p = <span class="string">"bbcacbabbcbaaccabc"</span>, <span class="string">"b*a*a*.c*bb*b*.*.*"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"aaacb"</span>, <span class="string">"a*acb"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"aaa"</span>, <span class="string">"a*a"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">	s, p = <span class="string">"aaa"</span>, <span class="string">"ab*a*c*a"</span></span><br><span class="line">	fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/regular-expression-matching" target="_blank" rel="noopener">https://leetcode-cn.com/problems/regular-expression-matching</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 单例模式</title>
    <url>/2019/07/13/golang/Golang%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>单例模式是最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p><strong>意图：</strong> 保证一个类型仅有一个实例，并提供一个访问它的全局访问点。<br><strong>主要解决：</strong> 一个全局使用的类型频繁地创建与销毁。<br><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。<br><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>Golang 目前常见的有以下四种方式（懒汉式、 饿汉式、 双重检查、 sync.Once）</p><a id="more"></a><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h5 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance *SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">		singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := GetSingletonInstance()</span><br><span class="line">	b := GetSingletonInstance()</span><br><span class="line">	c := <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">	fmt.Println(unsafe.Pointer(s))</span><br><span class="line">	fmt.Println(unsafe.Pointer(b))</span><br><span class="line">	fmt.Println(unsafe.Pointer(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>利用 sync.Mutex 进行加锁，保证线程安全。<br><strong>缺点：</strong> 加锁有了额外开销。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	lock              sync.Mutex</span><br><span class="line">	singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">	lock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> lock.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">		singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>导入包的时候直接创建实例，这样无需判空且线程安全。<br><strong>优点：</strong> 简单方便<br><strong>缺点：</strong> 不管程序中是否使用都会生成该实例，该实例持续占有在内存中<br><strong>适用场景：</strong> 该实例使用频繁，功能简单占用内存少</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p>第一次判断不加锁，第二次加锁保证线程安全，实例创建完成后，获取实例就不用加锁了。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	lock              sync.Mutex</span><br><span class="line">	singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">		lock.Lock()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">			singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		lock.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h4><p>sync.Once 确保创建实例子的函数只执行一次</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	one               sync.Once</span><br><span class="line">	singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">	one.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sync-Once-源码分析"><a href="#sync-Once-源码分析" class="headerlink" title="sync.Once 源码分析"></a>sync.Once 源码分析</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Once is an object that will perform exactly one action.</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">	done <span class="keyword">uint32</span></span><br><span class="line">	m    Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// o.done 初始化为0，双重检查</span></span><br><span class="line">	<span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line">		o.doSlow(f)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">	o.m.Lock()</span><br><span class="line">	<span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line">	<span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// o.done 赋值为1，atomic 原子操作</span></span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 执行函数</span></span><br><span class="line">		f()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/singleton-pattern.html</a></li><li><a href="https://www.cnblogs.com/wpnine/p/10426105.html" target="_blank" rel="noopener">https://www.cnblogs.com/wpnine/p/10426105.html</a></li></ul>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>11. 盛最多水的容器</title>
    <url>/2018/03/11/leetcode-cn/11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>你不能倾斜容器，且 n 的值至少为 2。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">49</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		b    <span class="keyword">int</span></span><br><span class="line">		e    <span class="keyword">int</span></span><br><span class="line">		area <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	getArea := <span class="function"><span class="keyword">func</span><span class="params">(x1, x2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x := x1 - x2</span><br><span class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">			x *= <span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> height[x1] &gt; height[x2] &#123;</span><br><span class="line">			<span class="keyword">return</span> height[x2] * x</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> height[x1] * x</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	getMax := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">			<span class="keyword">return</span> x</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	b, e = <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> b &lt; e &#123;</span><br><span class="line">		area = getMax(getArea(b, e), area)</span><br><span class="line">		<span class="keyword">if</span> height[b] &lt; height[e] &#123;</span><br><span class="line">			b++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			e--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(maxArea(n))</span><br><span class="line">	n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>&#125;</span><br><span class="line">	fmt.Println(maxArea(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>12. 整数转罗马数字</title>
    <url>/2018/03/12/leetcode-cn/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">I 可以放在 V (<span class="number">5</span>) 和 X (<span class="number">10</span>) 的左边，来表示 <span class="number">4</span> 和 <span class="number">9</span>。</span><br><span class="line">X 可以放在 L (<span class="number">50</span>) 和 C (<span class="number">100</span>) 的左边，来表示 <span class="number">40</span> 和 <span class="number">90</span>。 </span><br><span class="line">C 可以放在 D (<span class="number">500</span>) 和 M (<span class="number">1000</span>) 的左边，来表示 <span class="number">400</span> 和 <span class="number">900</span>。</span><br><span class="line">给定一个整数，将其转为罗马数字。输入确保在 <span class="number">1</span> 到 <span class="number">3999</span> 的范围内。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">3</span></span><br><span class="line">输出: <span class="string">"III"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="number">4</span></span><br><span class="line">输出: <span class="string">"IV"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">9</span></span><br><span class="line">输出: <span class="string">"IX"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line">输入: <span class="number">58</span></span><br><span class="line">输出: <span class="string">"LVIII"</span></span><br><span class="line">解释: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">5</span>:</span><br><span class="line">输入: <span class="number">1994</span></span><br><span class="line">输出: <span class="string">"MCMXCIV"</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		numStr <span class="keyword">string</span></span><br><span class="line">		k      <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	numMap := <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="number">0</span>: &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;,</span><br><span class="line">		<span class="number">1</span>: &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;,</span><br><span class="line">		<span class="number">2</span>: &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;,</span><br><span class="line">		<span class="number">3</span>: &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> num &lt; <span class="number">1</span> || num &gt; <span class="number">3999</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">			numStr = numMap[k][num%<span class="number">10</span>] + numStr</span><br><span class="line">			num /= <span class="number">10</span></span><br><span class="line">			k++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> numStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">3</span></span><br><span class="line">	fmt.Println(intToRoman(n))</span><br><span class="line">	n = <span class="number">4</span></span><br><span class="line">	fmt.Println(intToRoman(n))</span><br><span class="line">	n = <span class="number">9</span></span><br><span class="line">	fmt.Println(intToRoman(n))</span><br><span class="line">	n = <span class="number">58</span></span><br><span class="line">	fmt.Println(intToRoman(n))</span><br><span class="line">	n = <span class="number">1994</span></span><br><span class="line">	fmt.Println(intToRoman(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/integer-to-roman" target="_blank" rel="noopener">https://leetcode-cn.com/problems/integer-to-roman</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 消息队列之 RabbitMQ</title>
    <url>/2019/07/21/golang/Golang%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%20RabbitMQ/</url>
    <content><![CDATA[<h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>消息队列（Message Queue）是一种应用间的通信方式，一种应用间的异步协作机制。消息的生产者只需将消息发布到 MQ 中，消息消费者只需要从 MQ 中获取消息消费，消息的可靠性由消息系统来保证。</p><h4 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h4><p>RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。</p><a id="more"></a><h5 id="RabbitMQ-特点"><a href="#RabbitMQ-特点" class="headerlink" title="RabbitMQ 特点"></a>RabbitMQ 特点</h5><ol><li>可靠性（Reliability）</li><li>灵活的路由（Flexible Routing）</li><li>消息集群（Clustering）</li><li>高可用（Highly Available Queues）</li><li>多种协议（Multi-protocol）</li><li>多语言客户端（Many Clients）</li><li>管理界面（Management UI）</li><li>跟踪机制（Tracing）</li><li>插件机制（Plugin System）</li></ol><h5 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h5><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>direct</td><td>路由键完全匹配，单播</td></tr><tr><td>topic</td><td>路由键模式匹配，路由键可以包含通配符：”#”、”*”</td></tr><tr><td>fanout</td><td>不处理路由键，广播，转发消息最快</td></tr><tr><td>headers</td><td>不处理路由键，根据发送的消息内容中的 headers 属性进行匹配，其他跟 direct 模式完全一致，性能较其他模式差很多</td></tr></tbody></table><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>容器化部署，简单方便</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --hostname rabbit1 --name rabbitmq1 -p 9419:9419 -p 8080:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit2 --name rabbitmq2 -p 5673:5672 --link rabbitmq1:rabbit1 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit3 --name rabbitmq3 -p 5674:5672 --link rabbitmq1:rabbit1 --link rabbitmq2:rabbit2 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq2 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq3 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="RabbitMQ-Exporter"><a href="#RabbitMQ-Exporter" class="headerlink" title="RabbitMQ Exporter"></a>RabbitMQ Exporter</h4><p><strong>repo:</strong> <a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></p><p><strong>Start RabbitMQ Exporter:</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RABBIT_EXPORTERS</span>=exchange,node,queue <span class="attribute">RABBIT_CAPABILITIES</span>=bert,no_sort <span class="attribute">RABBIT_USER</span>=guest <span class="attribute">RABBIT_PASSWORD</span>=guest <span class="attribute">OUTPUT_FORMAT</span>=JSON <span class="attribute">PUBLISH_PORT</span>=8082 <span class="attribute">RABBIT_URL</span>=http://127.0.0.1:8080 <span class="attribute">MAX_QUEUES</span>=5000 nohup rabbitmq_exporter &amp;</span><br></pre></td></tr></table></figure><p><strong>Start in container:</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--net</span>=container:my-rabbit kbudde/rabbitmq-exporter</span><br></pre></td></tr></table></figure><h4 id="Golang-客户端-Demo"><a href="#Golang-客户端-Demo" class="headerlink" title="Golang 客户端 Demo"></a>Golang 客户端 Demo</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"URL"</span>: <span class="string">"amqp://guest:guest@10.5.124.213:5672/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">	<span class="string">"github.com/streadway/amqp"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">	URL       <span class="keyword">string</span></span><br><span class="line">	QueueList <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">	Config</span><br><span class="line">	Connection *amqp.Connection</span><br><span class="line">	Channel    *amqp.Channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	reconnectDelay      = <span class="number">3</span> * time.Second <span class="comment">// reconnectDelay</span></span><br><span class="line">	retryNum            = <span class="number">5</span>               <span class="comment">// retryNum</span></span><br><span class="line">	DefaultExchangeName = <span class="string">"default"</span></span><br><span class="line">	DefaultQueueName    = <span class="string">"default"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">connect</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		err error</span><br><span class="line">	)</span><br><span class="line">	log.WithFields(log.Fields&#123;</span><br><span class="line">		<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">	&#125;).Info(<span class="string">"Attempting to connect."</span>)</span><br><span class="line">	c.Connection, err = amqp.Dial(c.URL)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Error(<span class="string">"Failed to connect to RabbitMQ."</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.Channel, err = c.Connection.Channel()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Error(<span class="string">"Failed to open a channel."</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">isConnected</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> c.Connection.IsClosed() || c.Channel == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">handleConnect</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// retry connect</span></span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; retryNum; index++ &#123;</span><br><span class="line">		c.connect()</span><br><span class="line">		<span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			log.WithFields(log.Fields&#123;</span><br><span class="line">				<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			&#125;).Warn(<span class="string">"Failed to connect. Retrying..."</span>)</span><br><span class="line">			time.Sleep(reconnectDelay)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">		&#125;).Info(<span class="string">"Connect succeed."</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">		&#125;).Fatal(<span class="string">"Connect failed."</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Producer <span class="keyword">struct</span> &#123;</span><br><span class="line">	Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducer</span><span class="params">()</span> *<span class="title">Producer</span></span> &#123;</span><br><span class="line">	rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">	err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	producer := &amp;Producer&#123;&#125;</span><br><span class="line">	producer.URL = rabbitConfig.URL</span><br><span class="line"></span><br><span class="line">	producer.handleConnect()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> producer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Producer)</span> <span class="title">UnsafePushExchange</span><span class="params">(data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, exchangeName <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// check connect</span></span><br><span class="line">	<span class="keyword">if</span> !p.isConnected() &#123;</span><br><span class="line">		p.handleConnect()</span><br><span class="line">		p.initExchange()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// parse data</span></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		bytesData []<span class="keyword">byte</span></span><br><span class="line">		err       error</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	publishData := Msg&#123;</span><br><span class="line">		Data:         data,</span><br><span class="line">		Time:         util.DecodeTime(time.Now().UTC()),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bytesData, err = json.Marshal(publishData)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"data"</span>:   data,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Error(<span class="string">"Failed to marshal a message."</span>)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = p.Channel.Publish(</span><br><span class="line">		exchangeName, <span class="comment">// exchange</span></span><br><span class="line">		<span class="string">""</span>,           <span class="comment">// routing key</span></span><br><span class="line">		<span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line">		<span class="literal">false</span>,        <span class="comment">// immediate</span></span><br><span class="line">		amqp.Publishing&#123;</span><br><span class="line">			DeliveryMode: amqp.Persistent,</span><br><span class="line">			ContentType:  <span class="string">"application/json"</span>,</span><br><span class="line">			Body:         bytesData,</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Error(<span class="string">"Failed to publish a message."</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"data"</span>:   publishData,</span><br><span class="line">		&#125;).Info(<span class="string">"Publish a message."</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h5><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Consumer <span class="keyword">struct</span> &#123;</span><br><span class="line">	Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConsumer</span><span class="params">(queueName <span class="keyword">string</span>)</span> *<span class="title">Consumer</span></span> &#123;</span><br><span class="line">	rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">	err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> queueName == <span class="string">""</span> &#123;</span><br><span class="line">		queueName = DefaultQueueName</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	consumer := &amp;Consumer&#123;</span><br><span class="line">		queueName: queueName,</span><br><span class="line">	&#125;</span><br><span class="line">	consumer.URL = rabbitConfig.URL</span><br><span class="line">	consumer.QueueList = rabbitConfig.QueueList</span><br><span class="line"></span><br><span class="line">	consumer.handleConnect()</span><br><span class="line"></span><br><span class="line">	consumer.initQueue()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> consumer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Consumer)</span> <span class="title">Receive</span><span class="params">(forever <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="comment">// check connect</span></span><br><span class="line">	<span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">		c.handleConnect()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	msgs, err := c.Channel.Consume(</span><br><span class="line">		c.queueName, <span class="comment">// queue</span></span><br><span class="line">		<span class="string">""</span>,          <span class="comment">// consumer</span></span><br><span class="line">		<span class="literal">false</span>,       <span class="comment">// auto-ack</span></span><br><span class="line">		<span class="literal">false</span>,       <span class="comment">// exclusive</span></span><br><span class="line">		<span class="literal">false</span>,       <span class="comment">// no-local</span></span><br><span class="line">		<span class="literal">false</span>,       <span class="comment">// no-wait</span></span><br><span class="line">		<span class="literal">nil</span>,         <span class="comment">// args</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.WithFields(log.Fields&#123;</span><br><span class="line">			<span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">			<span class="string">"err"</span>:    err,</span><br><span class="line">		&#125;).Info(<span class="string">"Failed to register a consumer."</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> msg := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">			<span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">				c.handleConnect()</span><br><span class="line">			&#125;</span><br><span class="line">			c.handle(msg.Body)</span><br><span class="line">			msg.Ack(<span class="literal">false</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	&lt;-forever</span><br><span class="line">	log.Info(<span class="string">"Consumer is Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="noopener">https://www.jianshu.com/p/79ca08116d57</a></li><li><a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></li><li><a href="https://www.rabbitmq.com/tutorials/tutorial-four-go.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-four-go.html</a></li></ul>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>13. 罗马数字转整数</title>
    <url>/2018/03/13/leetcode-cn/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">I 可以放在 V (<span class="number">5</span>) 和 X (<span class="number">10</span>) 的左边，来表示 <span class="number">4</span> 和 <span class="number">9</span>。</span><br><span class="line">X 可以放在 L (<span class="number">50</span>) 和 C (<span class="number">100</span>) 的左边，来表示 <span class="number">40</span> 和 <span class="number">90</span>。 </span><br><span class="line">C 可以放在 D (<span class="number">500</span>) 和 M (<span class="number">1000</span>) 的左边，来表示 <span class="number">400</span> 和 <span class="number">900</span>。</span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 <span class="number">1</span> 到 <span class="number">3999</span> 的范围内。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="string">"III"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="string">"IV"</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="string">"LVIII"</span></span><br><span class="line">输出: <span class="number">58</span></span><br><span class="line">解释: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line">输入: <span class="string">"MCMXCIV"</span></span><br><span class="line">输出: <span class="number">1994</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		num  <span class="keyword">int</span></span><br><span class="line">		b    <span class="keyword">int</span></span><br><span class="line">		e    <span class="keyword">int</span></span><br><span class="line">		flag <span class="keyword">bool</span> <span class="comment">// 用来判断最后一位有效罗马数字是否计算过</span></span><br><span class="line">	)</span><br><span class="line">	numMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">		<span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"II"</span>: <span class="number">2</span>, <span class="string">"III"</span>: <span class="number">3</span>, <span class="string">"IV"</span>: <span class="number">4</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"VI"</span>: <span class="number">6</span>, <span class="string">"VII"</span>: <span class="number">7</span>, <span class="string">"VIII"</span>: <span class="number">8</span>, <span class="string">"IX"</span>: <span class="number">9</span>,</span><br><span class="line">		<span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"XX"</span>: <span class="number">20</span>, <span class="string">"XXX"</span>: <span class="number">30</span>, <span class="string">"XL"</span>: <span class="number">40</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"LX"</span>: <span class="number">60</span>, <span class="string">"LXX"</span>: <span class="number">70</span>, <span class="string">"LXXX"</span>: <span class="number">80</span>, <span class="string">"XC"</span>: <span class="number">90</span>,</span><br><span class="line">		<span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"CC"</span>: <span class="number">200</span>, <span class="string">"CCC"</span>: <span class="number">300</span>, <span class="string">"CD"</span>: <span class="number">400</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"DC"</span>: <span class="number">600</span>, <span class="string">"DCC"</span>: <span class="number">700</span>, <span class="string">"DCCC"</span>: <span class="number">800</span>, <span class="string">"CM"</span>: <span class="number">900</span>,</span><br><span class="line">		<span class="string">"M"</span>: <span class="number">1000</span>, <span class="string">"MM"</span>: <span class="number">2000</span>, <span class="string">"MMM"</span>: <span class="number">3000</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	flag = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">for</span> b, e = <span class="number">0</span>, <span class="number">1</span>; e &lt;= <span class="built_in">len</span>(s); e++ &#123;</span><br><span class="line">		<span class="keyword">if</span> numMap[s[b:e]] == <span class="number">0</span> &#123;</span><br><span class="line">			flag = <span class="literal">false</span></span><br><span class="line">			num += numMap[s[b:e<span class="number">-1</span>]]</span><br><span class="line">			b = e - <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> e == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">			flag = <span class="literal">true</span></span><br><span class="line">			num += numMap[s[b:e]]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !flag &#123;</span><br><span class="line">		num += numMap[s[b:e<span class="number">-1</span>]]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"III"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"IV"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"IX"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"LVIII"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"MCMXCIV"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"DCXXI"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"XIII"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">	s = <span class="string">"XI"</span></span><br><span class="line">	fmt.Println(romanToInt(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/roman-to-integer</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>16. 最接近的三数之和</title>
    <url>/2018/03/16/leetcode-cn/16.%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">-1</span>，<span class="number">2</span>，<span class="number">1</span>，<span class="number">-4</span>], 和 target = <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 <span class="number">2.</span> (<span class="number">-1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>).</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		l       <span class="keyword">int</span></span><br><span class="line">		r       <span class="keyword">int</span></span><br><span class="line">		t       <span class="keyword">int</span></span><br><span class="line">		sumList []<span class="keyword">int</span></span><br><span class="line">		sum     <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	abs := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> x * <span class="number">-1</span>, <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x, <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	length := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt;= <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> x - y</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> x &lt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> y - x</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">				<span class="keyword">return</span> x - y</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> y - x</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">	<span class="keyword">if</span> r &lt; <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> r == <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l &gt;= r &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		m := nums[l] + nums[r]</span><br><span class="line">		perfectValue := target - m</span><br><span class="line">		dValue, direction := <span class="number">-1</span>, <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(nums); index++ &#123;</span><br><span class="line">			<span class="keyword">if</span> index == l || index == r &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> nums[index] == perfectValue &#123;</span><br><span class="line">				<span class="keyword">return</span> target</span><br><span class="line">			&#125;</span><br><span class="line">			x, y := abs(nums[index] - perfectValue)</span><br><span class="line">			<span class="keyword">if</span> dValue &lt; <span class="number">0</span> &#123;</span><br><span class="line">				dValue, direction, t = x, y, nums[index]</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> dValue &gt; x &#123;</span><br><span class="line">				dValue, direction, t = x, y, nums[index]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sumList = <span class="built_in">append</span>(sumList, m+t)</span><br><span class="line">		<span class="keyword">if</span> direction &#123;</span><br><span class="line">			l++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			r--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort.Ints(sumList)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(sumList) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(sumList) == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> sumList[<span class="number">0</span>]</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		sum = sumList[<span class="number">0</span>]</span><br><span class="line">		dValue := length(sum, target)</span><br><span class="line">		index := <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> index &lt; <span class="built_in">len</span>(sumList) &#123;</span><br><span class="line">			<span class="keyword">if</span> dValue &gt; length(sumList[index], target) &#123;</span><br><span class="line">				sum = sumList[index]</span><br><span class="line">				dValue = length(sum, target)</span><br><span class="line">			&#125;</span><br><span class="line">			index++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums, target := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-4</span>&#125;, <span class="number">1</span></span><br><span class="line">	fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">	nums, target = []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">55</span>&#125;, <span class="number">3</span></span><br><span class="line">	fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">	nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>&#125;, <span class="number">12</span></span><br><span class="line">	fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>17. 电话号码的字母组合</title>
    <url>/2018/03/17/leetcode-cn/17.%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>给出数字到字母的映射如下（与电话按键相同）。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1 不对应任何字母。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：<span class="string">"23"</span></span><br><span class="line">输出：[<span class="string">"ad"</span>, <span class="string">"ae"</span>, <span class="string">"af"</span>, <span class="string">"bd"</span>, <span class="string">"be"</span>, <span class="string">"bf"</span>, <span class="string">"cd"</span>, <span class="string">"ce"</span>, <span class="string">"cf"</span>].</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法（递归求解）"><a href="#解法（递归求解）" class="headerlink" title="解法（递归求解）"></a>解法（递归求解）</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		all []<span class="keyword">string</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(digits) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	numMap := <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">"2"</span>: &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;,</span><br><span class="line">		<span class="string">"3"</span>: &#123;<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;,</span><br><span class="line">		<span class="string">"4"</span>: &#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;,</span><br><span class="line">		<span class="string">"5"</span>: &#123;<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>&#125;,</span><br><span class="line">		<span class="string">"6"</span>: &#123;<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>&#125;,</span><br><span class="line">		<span class="string">"7"</span>: &#123;<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>&#125;,</span><br><span class="line">		<span class="string">"8"</span>: &#123;<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>&#125;,</span><br><span class="line">		<span class="string">"9"</span>: &#123;<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	getTwoLetterCombinations := <span class="function"><span class="keyword">func</span><span class="params">(num1, num2 []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> (</span><br><span class="line">			strList []<span class="keyword">string</span></span><br><span class="line">		)</span><br><span class="line">		l1, l2 := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">		i := <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> i &lt; l1 &#123;</span><br><span class="line">			j := <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> j &lt; l2 &#123;</span><br><span class="line">				strList = <span class="built_in">append</span>(strList, num1[i])</span><br><span class="line">				j++</span><br><span class="line">			&#125;</span><br><span class="line">			i++</span><br><span class="line">		&#125;</span><br><span class="line">		i = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> i &lt; l2*l1 &#123;</span><br><span class="line">			strList[i] += num2[i%l2]</span><br><span class="line">			i++</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> strList</span><br><span class="line">	&#125;</span><br><span class="line">	numStr := <span class="keyword">string</span>(digits[<span class="number">0</span>])</span><br><span class="line">	all = numMap[numStr]</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">1</span>; index &lt; <span class="built_in">len</span>(digits); index++ &#123;</span><br><span class="line">		numStr := <span class="keyword">string</span>(digits[index])</span><br><span class="line">		numStrList := numMap[numStr]</span><br><span class="line">		all = getTwoLetterCombinations(all, numStrList)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"23"</span></span><br><span class="line">	fmt.Println(letterCombinations(s))</span><br><span class="line">	s = <span class="string">"2"</span></span><br><span class="line">	fmt.Println(letterCombinations(s))</span><br><span class="line">	s = <span class="string">"27"</span></span><br><span class="line">	fmt.Println(letterCombinations(s))</span><br><span class="line">	s = <span class="string">"234"</span></span><br><span class="line">	fmt.Println(letterCombinations(s))</span><br><span class="line">	s = <span class="string">"34"</span></span><br><span class="line">	fmt.Println(letterCombinations(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>14. 最长公共前缀</title>
    <url>/2018/03/14/leetcode-cn/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>所有输入只包含小写字母 a-z。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span><br><span class="line">输出: <span class="string">"fl"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: [<span class="string">"dog"</span>,<span class="string">"racecar"</span>,<span class="string">"car"</span>]</span><br><span class="line">输出: <span class="string">""</span></span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		index     <span class="keyword">int</span></span><br><span class="line">		prefixStr <span class="keyword">uint8</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strs) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strs[<span class="number">0</span>]) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	&#125;</span><br><span class="line">	index = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(strs[<span class="number">0</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> strIndex := <span class="number">1</span>; strIndex &lt; <span class="built_in">len</span>(strs); strIndex++ &#123;</span><br><span class="line">			<span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(strs[strIndex]) &#123;</span><br><span class="line">				<span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">			&#125;</span><br><span class="line">			prefixStr = strs[<span class="number">0</span>][index]</span><br><span class="line">			<span class="keyword">if</span> strs[strIndex][index] != prefixStr &#123;</span><br><span class="line">				<span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		index++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">string</span>&#123;<span class="string">"flower"</span>, <span class="string">"flow"</span>, <span class="string">"flight"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">	s = []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"area"</span>, <span class="string">"car"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">	s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">	s = []<span class="keyword">string</span>&#123;<span class="string">"abcd"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">	s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">	s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"ac"</span>&#125;</span><br><span class="line">	fmt.Println(longestCommonPrefix(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>19. 删除链表的倒数第N个节点</title>
    <url>/2018/03/19/leetcode-cn/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。给定的 n 保证是有效的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定一个链表: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, 和 n = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><p>扫描一遍，使用数组存储所有节点</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		p     *ListNode</span><br><span class="line">		pList []*ListNode</span><br><span class="line">	)</span><br><span class="line">	p = head</span><br><span class="line">	<span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">		pList = <span class="built_in">append</span>(pList, p)</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	l := <span class="built_in">len</span>(pList)</span><br><span class="line">	<span class="keyword">if</span> l == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	pre := l - n - <span class="number">1</span></span><br><span class="line">	next := l - n + <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> next &gt;= l &#123;</span><br><span class="line">		pList[pre].Next = <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> pre &lt; <span class="number">0</span> &#123;</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		pList[pre].Next = pList[next]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h5><p>i, j 双指针初始化为表头和表头后 n 个节点。i 和 j 双指针保持窗口大小为 n （间距）同时向后移动，当 j 移动到表尾， i 指向的就是我们要找的倒数第 n 个节点。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> head *ListNode</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">	p := head</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">		n := ListNode&#123;Val: item&#125;</span><br><span class="line">		p.Next = &amp;n</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;)</span><br><span class="line">	printListNode(a)</span><br><span class="line">	printListNode(removeNthFromEnd(a, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>18. 四数之和</title>
    <url>/2018/03/18/leetcode-cn/18.%20%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>答案中不可以包含重复的四元组。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>]，和 target = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">-2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	retNum := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	retMiddleNums := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	retNumStr := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	numLength := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> x := <span class="number">0</span>; x &lt; numLength<span class="number">-3</span>; x++ &#123;</span><br><span class="line">		<span class="keyword">for</span> i := x + <span class="number">1</span>; i &lt; numLength<span class="number">-2</span>; i++ &#123;</span><br><span class="line">			k := i + <span class="number">1</span></span><br><span class="line">			j := numLength - <span class="number">1</span></span><br><span class="line">			<span class="keyword">for</span> k &lt; j &#123;</span><br><span class="line">				a, b, c, d := nums[i], nums[k], nums[j], nums[x]</span><br><span class="line">				<span class="keyword">if</span> a+b+c+d &lt; target &#123;</span><br><span class="line">					k++</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> a+b+c+d &gt; target &#123;</span><br><span class="line">					j--</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					subRet := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, a, b, c, d)</span><br><span class="line">					sort.Ints(subRet)</span><br><span class="line">					<span class="keyword">var</span> numStrList []<span class="keyword">string</span></span><br><span class="line">					<span class="keyword">var</span> numStr <span class="keyword">string</span></span><br><span class="line">					<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(subRet); i++ &#123;</span><br><span class="line">						numStrList = <span class="built_in">append</span>(numStrList, strconv.Itoa(subRet[i]))</span><br><span class="line">					&#125;</span><br><span class="line">					numStr = strings.Join(numStrList, <span class="string">","</span>)</span><br><span class="line">					retMiddleNums[numStr] = <span class="string">""</span></span><br><span class="line">					<span class="keyword">for</span> (k &lt; j) &amp;&amp; (b == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">						k++</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">for</span> (k &lt; j) &amp;&amp; (c == nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">						j--</span><br><span class="line">					&#125;</span><br><span class="line">					k++</span><br><span class="line">					j--</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> numStr := <span class="keyword">range</span> retMiddleNums &#123;</span><br><span class="line">		retNumStr = <span class="built_in">append</span>(retNumStr, numStr)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(retNumStr); index++ &#123;</span><br><span class="line">		strNumList := strings.Split(retNumStr[index], <span class="string">","</span>)</span><br><span class="line">		<span class="keyword">var</span> retNumItem []<span class="keyword">int</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strNumList); i++ &#123;</span><br><span class="line">			numItem, _ := strconv.Atoi(strNumList[i])</span><br><span class="line">			retNumItem = <span class="built_in">append</span>(retNumItem, numItem)</span><br><span class="line">		&#125;</span><br><span class="line">		retNum = <span class="built_in">append</span>(retNum, retNumItem)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> retNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sort"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums, target := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span></span><br><span class="line">	fmt.Println(fourSum(nums, target))</span><br><span class="line">	nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>&#125;, <span class="number">0</span></span><br><span class="line">	fmt.Println(fourSum(nums, target))</span><br><span class="line">	nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">0</span></span><br><span class="line">	fmt.Println(fourSum(nums, target))</span><br><span class="line">	nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">4</span></span><br><span class="line">	fmt.Println(fourSum(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/4sum</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>15. 三数之和</title>
    <url>/2018/03/15/leetcode-cn/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>答案中不可以包含重复的三元组。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	retNum := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	numLength := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; (i &lt; numLength<span class="number">-2</span>) &amp;&amp; (nums[i] &lt;= <span class="number">0</span>); i++ &#123;</span><br><span class="line">		k := i + <span class="number">1</span></span><br><span class="line">		j := numLength - <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt; <span class="number">0</span>) &amp;&amp; (nums[i] == nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> k &lt; j &#123;</span><br><span class="line">			a, b, c := nums[i], nums[k], nums[j]</span><br><span class="line">			<span class="keyword">if</span> a+b+c &lt; <span class="number">0</span> &#123;</span><br><span class="line">				k++</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> a+b+c &gt; <span class="number">0</span> &#123;</span><br><span class="line">				j--</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				subRet := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, a, b, c)</span><br><span class="line">				retNum = <span class="built_in">append</span>(retNum, subRet)</span><br><span class="line">				<span class="keyword">for</span> (k &lt; j) &amp;&amp; (b == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">					k++</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (k &lt; j) &amp;&amp; (c == nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">					j--</span><br><span class="line">				&#125;</span><br><span class="line">				k++</span><br><span class="line">				j--</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> retNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">	nums = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">	nums = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-2</span>&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">	nums = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">	nums = []<span class="keyword">int</span>&#123;<span class="number">-4</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">	nums = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	fmt.Println(threeSum(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 两数相加</title>
    <url>/2018/03/02/leetcode-cn/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)  </span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span>  </span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	h := &amp;ListNode&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> s := h; l1 != <span class="literal">nil</span>; l1 = l1.Next &#123;</span><br><span class="line">		s.Val = l1.Val</span><br><span class="line">		<span class="keyword">if</span> l1.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">			s.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		s = s.Next</span><br><span class="line">	&#125;</span><br><span class="line">	k := <span class="number">0</span></span><br><span class="line">	s, e := h, h</span><br><span class="line">	<span class="keyword">for</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		s.Val += l2.Val + k</span><br><span class="line">		k = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> s.Val &gt;= <span class="number">10</span> &#123;</span><br><span class="line">			s.Val -= <span class="number">10</span></span><br><span class="line">			k = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> s.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			s.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		e = s</span><br><span class="line">		s = s.Next</span><br><span class="line">		l2 = l2.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k != <span class="number">0</span> &amp;&amp; s != <span class="literal">nil</span> &#123;</span><br><span class="line">		s.Val += k</span><br><span class="line">		k = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> s.Val &gt;= <span class="number">10</span> &#123;</span><br><span class="line">			s.Val -= <span class="number">10</span></span><br><span class="line">			k = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		s = s.Next</span><br><span class="line">		e = e.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> s != <span class="literal">nil</span> &#123;</span><br><span class="line">			e.Next.Val += <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			e.Next = &amp;ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> s != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> s.Val == <span class="number">0</span> &amp;&amp; s.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			e.Next = <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		s = s.Next</span><br><span class="line">		e = e.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(h *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> h != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(h.Val)</span><br><span class="line">		h = h.Next</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l1 := ListNode&#123;Val: <span class="number">2</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>, Next: &amp;ListNode&#123;Val: <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">	l2 := ListNode&#123;Val: <span class="number">5</span>, Next: &amp;ListNode&#123;Val: <span class="number">6</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>&#125;&#125;&#125;</span><br><span class="line">	<span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">	l1 = ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">	l2 = ListNode&#123;Val: <span class="number">5</span>, Next: &amp;ListNode&#123;Val: <span class="number">6</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>&#125;&#125;&#125;</span><br><span class="line">	<span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">	l1 = ListNode&#123;Val: <span class="number">9</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>&#125;&#125;</span><br><span class="line">	l2 = ListNode&#123;Val: <span class="number">9</span>&#125;</span><br><span class="line">	<span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">	l1 = ListNode&#123;Val: <span class="number">8</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>&#125;&#125;&#125;</span><br><span class="line">	l2 = ListNode&#123;Val: <span class="number">2</span>&#125;</span><br><span class="line">	<span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>20. 有效的括号</title>
    <url>/2018/03/20/leetcode-cn/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">"()"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"(]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"([)]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-栈"><a href="#解法：-栈" class="headerlink" title="解法： 栈"></a>解法： 栈</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		stack *list.List</span><br><span class="line">	)</span><br><span class="line">	stack = list.New()</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> s &#123;</span><br><span class="line">		<span class="keyword">if</span> item == <span class="number">40</span> || item == <span class="number">91</span> || item == <span class="number">123</span> &#123;</span><br><span class="line">			stack.PushBack(item)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		x := stack.Back()</span><br><span class="line">		<span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">		r := x.Value.(<span class="keyword">int32</span>)</span><br><span class="line">		<span class="keyword">if</span> item == <span class="number">41</span> &amp;&amp; r == <span class="number">40</span> &#123;</span><br><span class="line">			stack.Remove(x)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">93</span> &amp;&amp; r == <span class="number">91</span> &#123;</span><br><span class="line">			stack.Remove(x)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">125</span> &amp;&amp; r == <span class="number">123</span> &#123;</span><br><span class="line">			stack.Remove(x)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stack.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"container/list"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"()"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"[()]"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"(&#123;)&#125;"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"()[]"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"([&#123;&#125;])"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"]"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">	s = <span class="string">"(])"</span></span><br><span class="line">	fmt.Println(isValid(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>21. 合并两个有序链表</title>
    <url>/2018/03/21/leetcode-cn/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		l *ListNode</span><br><span class="line">		p *ListNode</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	l = &amp;ListNode&#123;&#125;</span><br><span class="line">	p = l</span><br><span class="line">	<span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">			p.Val = l2.Val</span><br><span class="line">			l2 = l2.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">			p.Val = l1.Val</span><br><span class="line">			l1 = l1.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1.Val &gt; l2.Val &#123;</span><br><span class="line">			p.Val = l2.Val</span><br><span class="line">			l2 = l2.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p.Val = l1.Val</span><br><span class="line">			l1 = l1.Next</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">			p.Next = <span class="literal">nil</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">			p = p.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> head *ListNode</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">	p := head</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">		n := ListNode&#123;Val: item&#125;</span><br><span class="line">		p.Next = &amp;n</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</span><br><span class="line">	printListNode(a)</span><br><span class="line">	printListNode(b)</span><br><span class="line">	printListNode(mergeTwoLists(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>23. 合并K个排序链表</title>
    <url>/2018/03/23/leetcode-cn/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(lists) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		mix    <span class="keyword">int</span></span><br><span class="line">		nilNum <span class="keyword">int</span></span><br><span class="line">		length <span class="keyword">int</span></span><br><span class="line">		l      *ListNode</span><br><span class="line">		p      *ListNode</span><br><span class="line">		pre    *ListNode</span><br><span class="line">	)</span><br><span class="line">	length = <span class="built_in">len</span>(lists)</span><br><span class="line">	l = &amp;ListNode&#123;&#125;</span><br><span class="line">	p = l</span><br><span class="line">	pre = p</span><br><span class="line">	<span class="keyword">const</span> MaxNum = <span class="number">999999999</span></span><br><span class="line">	<span class="keyword">for</span> nilNum &lt; length &#123;</span><br><span class="line">		mix = MaxNum</span><br><span class="line">		nilNum = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> lists[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">				nilNum++</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix &gt; lists[i].Val &#123;</span><br><span class="line">				mix = lists[i].Val</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> lists[i] != <span class="literal">nil</span> &amp;&amp; mix == lists[i].Val &#123;</span><br><span class="line">				p.Val = mix</span><br><span class="line">				lists[i] = lists[i].Next</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> nilNum &lt; length &amp;&amp; mix != MaxNum &#123;</span><br><span class="line">			p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">			pre = p</span><br><span class="line">			p = p.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix == MaxNum &#123;</span><br><span class="line">			pre.Next = <span class="literal">nil</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p.Next = <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> nilNum == length &amp;&amp; mix == MaxNum &amp;&amp; p == pre &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> head *ListNode</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">	p := head</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">		n := ListNode&#123;Val: item&#125;</span><br><span class="line">		p.Next = &amp;n</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">6</span>&#125;)&#125;</span><br><span class="line">	printListNode(mergeKLists(n))</span><br><span class="line">	n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">	printListNode(mergeKLists(n))</span><br><span class="line">	n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;),&#125;</span><br><span class="line">	printListNode(mergeKLists(n))</span><br><span class="line">	n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;),&#125;</span><br><span class="line">	printListNode(mergeKLists(n))</span><br><span class="line">	n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">	printListNode(mergeKLists(n))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>24. 两两交换链表中的节点</title>
    <url>/2018/03/24/leetcode-cn/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, 你应该返回 <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> lists []ListNode</span><br><span class="line">	p := head</span><br><span class="line">	<span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">		lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(lists)<span class="number">-1</span>; i += <span class="number">2</span> &#123;</span><br><span class="line">		lists[i], lists[i+<span class="number">1</span>] = lists[i+<span class="number">1</span>], lists[i]</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;lists[<span class="number">0</span>]</span><br><span class="line">	point := head</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(lists); i++ &#123;</span><br><span class="line">		point.Next = &amp;lists[i]</span><br><span class="line">		point = point.Next</span><br><span class="line">	&#125;</span><br><span class="line">	point.Next = <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> head *ListNode</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">	p := head</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">		n := ListNode&#123;Val: item&#125;</span><br><span class="line">		p.Next = &amp;n</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span><br><span class="line">	printListNode(swapPairs(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>25. K 个一组翻转链表</title>
    <url>/2018/03/25/leetcode-cn/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。<br>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给你这个链表：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">2</span> 时，应当返回: <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">3</span> 时，应当返回: <span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> k &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		lists    []ListNode</span><br><span class="line">		newLists []ListNode</span><br><span class="line">	)</span><br><span class="line">	p := head</span><br><span class="line">	<span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">		lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	length := <span class="built_in">len</span>(lists)</span><br><span class="line">	<span class="keyword">if</span> length &lt;= <span class="number">1</span> || length &lt; k &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	newLists = <span class="built_in">make</span>([]ListNode, length)</span><br><span class="line">	reverse := <span class="function"><span class="keyword">func</span><span class="params">(s []ListNode, x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt;= j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">			newLists[x+i], newLists[x+j] = s[j], s[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length/k; i ++ &#123;</span><br><span class="line">		x := i * k</span><br><span class="line">		reverse(lists[x:k+x], x)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := (length / k) * k; i &lt; length; i++ &#123;</span><br><span class="line">		newLists[i] = lists[i]</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;newLists[<span class="number">0</span>]</span><br><span class="line">	point := head</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(newLists); i++ &#123;</span><br><span class="line">		point.Next = &amp;newLists[i]</span><br><span class="line">		point = point.Next</span><br><span class="line">	&#125;</span><br><span class="line">	point.Next = <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> head *ListNode</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">	p := head</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">		n := ListNode&#123;Val: item&#125;</span><br><span class="line">		p.Next = &amp;n</span><br><span class="line">		p = p.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n, k := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">3</span></span><br><span class="line">	printListNode(reverseKGroup(n, k))</span><br><span class="line">	n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), <span class="number">3</span></span><br><span class="line">	printListNode(reverseKGroup(n, k))</span><br><span class="line">	n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">2</span></span><br><span class="line">	printListNode(reverseKGroup(n, k))</span><br><span class="line">	n, k = createListNode([]<span class="keyword">int</span>&#123;&#125;), <span class="number">2</span></span><br><span class="line">	printListNode(reverseKGroup(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>22. 括号生成</title>
    <url>/2018/03/22/leetcode-cn/22.%20%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">3</span></span><br><span class="line">输出：[</span><br><span class="line">       <span class="string">"((()))"</span>,</span><br><span class="line">       <span class="string">"(()())"</span>,</span><br><span class="line">       <span class="string">"(())()"</span>,</span><br><span class="line">       <span class="string">"()(())"</span>,</span><br><span class="line">       <span class="string">"()()()"</span></span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-递归"><a href="#解法：-递归" class="headerlink" title="解法： 递归"></a>解法： 递归</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(l, r, n <span class="keyword">int</span>, str <span class="keyword">string</span>, strList *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l &lt; r &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">2</span>*n &#123;</span><br><span class="line">		*strList = <span class="built_in">append</span>(*strList, str)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> l &lt; n &#123;</span><br><span class="line">		backtrack(l+<span class="number">1</span>, r, n, str+<span class="string">"("</span>, strList)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> r &lt; n &#123;</span><br><span class="line">		backtrack(l, r+<span class="number">1</span>, n, str+<span class="string">")"</span>, strList)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	strList := &amp;[]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	backtrack(<span class="number">0</span>, <span class="number">0</span>, n, <span class="string">""</span>, strList)</span><br><span class="line">	<span class="keyword">return</span> *strList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(generateParenthesis(<span class="number">1</span>))</span><br><span class="line">	fmt.Println(generateParenthesis(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(generateParenthesis(<span class="number">3</span>))</span><br><span class="line">	fmt.Println(generateParenthesis(<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>26. 删除排序数组中的重复项</title>
    <url>/2018/03/26/leetcode-cn/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span>。 </span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> length == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	pre, index := nums[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> pre != nums[i] &#123;</span><br><span class="line">			pre = nums[i]</span><br><span class="line">			index++</span><br><span class="line">			nums[index] = nums[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	nums = nums[:index+<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(removeDuplicates(n))</span><br><span class="line">	n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(removeDuplicates(n))</span><br><span class="line">	n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(removeDuplicates(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>28. 实现 strStr()</title>
    <url>/2018/03/28/leetcode-cn/28.%20%E5%AE%9E%E7%8E%B0%20strStr()/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现 strStr() 函数。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。<br>如果不存在，则返回 -1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"hello"</span>, <span class="attr">needle</span> = <span class="string">"ll"</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"aaaaa"</span>, <span class="attr">needle</span> = <span class="string">"bba"</span></span><br><span class="line">输出: -<span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	l1, l2 := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line">	<span class="keyword">if</span> l2 &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1 &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> l1 &lt; l2 &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	x := i</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> i &gt;= l1 || j &gt;= l2 &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> haystack[i] == needle[j] &#123;</span><br><span class="line">			<span class="keyword">if</span> j == l2<span class="number">-1</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> i - l2 + <span class="number">1</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				i++</span><br><span class="line">				j++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			i = x + <span class="number">1</span></span><br><span class="line">			x++</span><br><span class="line">			j = <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="string">"hello"</span>, <span class="string">"ll"</span></span><br><span class="line">	fmt.Println(strStr(a, b))</span><br><span class="line">	a, b = <span class="string">"aaaaa"</span>, <span class="string">"bba"</span></span><br><span class="line">	fmt.Println(strStr(a, b))</span><br><span class="line">	a, b = <span class="string">"helllllo"</span>, <span class="string">"ll"</span></span><br><span class="line">	fmt.Println(strStr(a, b))</span><br><span class="line">	a, b = <span class="string">"mississippi"</span>, <span class="string">"issip"</span></span><br><span class="line">	fmt.Println(strStr(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/implement-strstr" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-strstr</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>27. 移除元素</title>
    <url>/2018/03/27/leetcode-cn/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。<br>你不需要考虑数组中超出新长度后面的元素。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。</span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	index := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> val != nums[i] &#123;</span><br><span class="line">			nums[index] = nums[i]</span><br><span class="line">			index++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	nums = nums[:index]</span><br><span class="line">	<span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n, k := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, <span class="number">3</span></span><br><span class="line">	fmt.Println(removeElement(n, k))</span><br><span class="line">	n, k = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, <span class="number">2</span></span><br><span class="line">	fmt.Println(removeElement(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>29. 两数相除</title>
    <url>/2018/03/29/leetcode-cn/29.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend 除以除数 divisor 得到的商。<br>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>被除数和除数均为 32 位有符号整数。 除数不为 0。<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: dividend = <span class="number">10</span>, divisor = <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: <span class="number">10</span>/<span class="number">3</span> = truncate(<span class="number">3.33333</span>..) = truncate(<span class="number">3</span>) = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">7</span>, divisor = <span class="number">-3</span></span><br><span class="line">输出: <span class="number">-2</span></span><br><span class="line">解释: <span class="number">7</span>/<span class="number">-3</span> = truncate(<span class="number">-2.33333</span>..) = <span class="number">-2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>使用递归和位运算。除数以指数形式增长，计算速度快。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 每次找到最大的n保证 x &gt;= y * pow(<span class="number">2</span>, n)</span><br><span class="line"><span class="number">2.</span> divide(x, y) = pow(<span class="number">2</span>, n) + divide(x - y * pow(<span class="number">2</span>, n), y) </span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> x &lt; y: divide(x, y) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">比如 ：</span><br><span class="line">divide(<span class="number">14</span>, <span class="number">3</span>) = divide(<span class="number">14</span> - <span class="number">12</span>, <span class="number">3</span>) + pow(<span class="number">2</span>, <span class="number">2</span>) </span><br><span class="line">              = divide(<span class="number">2</span>, <span class="number">3</span>) + <span class="number">4</span></span><br><span class="line">              = <span class="number">0</span> + <span class="number">4</span> </span><br><span class="line">              = <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="keyword">int</span>, divisor <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	abs := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> x * <span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	pow := <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		s := <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">			s *= <span class="number">2</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s</span><br><span class="line">	&#125;</span><br><span class="line">	min := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">			<span class="keyword">return</span> y</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	i, a, b := <span class="number">0</span>, abs(dividend), abs(divisor)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="number">0</span> || a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> b &lt;= a &#123;</span><br><span class="line">		b = b &lt;&lt; <span class="number">1</span></span><br><span class="line">		i = i + <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	res := pow(i<span class="number">-1</span>) + divide(a-(b&gt;&gt;<span class="number">1</span>), abs(divisor))</span><br><span class="line">	<span class="keyword">if</span> (dividend ^ divisor) &lt; <span class="number">0</span> &#123;</span><br><span class="line">		res = -res</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min(res, (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(divide(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">12</span>, <span class="number">-3</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">14</span>, <span class="number">3</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">	fmt.Println(divide(<span class="number">-2147483648</span>, <span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/divide-two-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/divide-two-integers</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>3. 无重复字符的最长子串</title>
    <url>/2018/03/03/leetcode-cn/3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "abcabcbb"</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line"><span class="section">输入: "bbbbb"</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line"><span class="section">输入: "pwwkew"</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">"pwke"</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		maxX = <span class="number">0</span></span><br><span class="line">		maxY = <span class="number">1</span></span><br><span class="line">		x    = <span class="number">0</span></span><br><span class="line">		y    = <span class="number">1</span></span><br><span class="line">	)</span><br><span class="line">	charList := []<span class="keyword">byte</span>(s)</span><br><span class="line">	<span class="keyword">for</span> x &lt;= y &amp;&amp; y &lt; <span class="built_in">len</span>(charList) &#123;</span><br><span class="line">		isIn := <span class="literal">false</span></span><br><span class="line">		<span class="keyword">for</span> _, i := <span class="keyword">range</span> charList[x:y] &#123;</span><br><span class="line">			<span class="keyword">if</span> i == charList[y] &#123;</span><br><span class="line">				isIn = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> isIn &#123;</span><br><span class="line">			x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			y += <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> y-x &gt; maxY-maxX &#123;</span><br><span class="line">			maxY, maxX = y, x</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxY - maxX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="string">"abcabcbb"</span></span><br><span class="line">	fmt.Println(lengthOfLongestSubstring(a))</span><br><span class="line">	b := <span class="string">"bbbbb"</span></span><br><span class="line">	fmt.Println(lengthOfLongestSubstring(b))</span><br><span class="line">	c := <span class="string">"pwwkew"</span></span><br><span class="line">	fmt.Println(lengthOfLongestSubstring(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>6. Z 字形变换</title>
    <url>/2018/03/06/leetcode-cn/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><p>L C I R<br>E T O E S I I G<br>E D H N<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p><p>请你实现这个将字符串进行指定行数变换的函数：<br>string convert(string s, int numRows);</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">"LEETCODEISHIRING"</span>, <span class="attr">numRows</span> = <span class="number">3</span></span><br><span class="line">输出: <span class="string">"LCIRETOESIIGEDHN"</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">"LEETCODEISHIRING"</span>, <span class="attr">numRows</span> = <span class="number">4</span></span><br><span class="line">输出: <span class="string">"LDREOEIIECIHNTSG"</span></span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="keyword">string</span>, numRows <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		convertStr        = <span class="string">""</span></span><br><span class="line">		convertSubStrList = <span class="built_in">make</span>([]<span class="keyword">string</span>, numRows)</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> numRows &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> numRows == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> s</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(s); index++ &#123;</span><br><span class="line">		k := index % (<span class="number">2</span>*numRows - <span class="number">2</span>)</span><br><span class="line">		y := <span class="number">2</span>*numRows - <span class="number">2</span> - k</span><br><span class="line">		<span class="keyword">if</span> k &gt;= <span class="number">0</span> &amp;&amp; k &lt; numRows &#123;</span><br><span class="line">			convertSubStrList[k] += <span class="keyword">string</span>(s[index])</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> y &gt;= <span class="number">0</span> &amp;&amp; y &lt; numRows &#123;</span><br><span class="line">			convertSubStrList[y] += <span class="keyword">string</span>(s[index])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	convertStr = strings.Join(convertSubStrList, <span class="string">""</span>)</span><br><span class="line">	<span class="keyword">return</span> convertStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s, l := <span class="string">"LEETCODEISHIRING"</span>, <span class="number">3</span></span><br><span class="line">	fmt.Println(convert(s, l), <span class="string">"LCIRETOESIIGEDHN"</span>)</span><br><span class="line">	s, l = <span class="string">"LEETCODEISHIRING"</span>, <span class="number">4</span></span><br><span class="line">	fmt.Println(convert(s, l), <span class="string">"LDREOEIIECIHNTSG"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/zigzag-conversion" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zigzag-conversion</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>4. 寻找两个正序数组的中位数</title>
    <url>/2018/03/04/leetcode-cn/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。<br>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 <span class="number">2.0</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		nums   []<span class="keyword">int</span></span><br><span class="line">		minNum <span class="keyword">int</span></span><br><span class="line">		index  <span class="keyword">int</span></span><br><span class="line">		index1 <span class="keyword">int</span></span><br><span class="line">		index2 <span class="keyword">int</span></span><br><span class="line">		m      <span class="keyword">float64</span></span><br><span class="line">	)</span><br><span class="line">	nums1Len, nums2Len := <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">	numsTotal := nums1Len + nums2Len</span><br><span class="line">	<span class="keyword">for</span> index = <span class="number">0</span>; index &lt; numsTotal; index++ &#123;</span><br><span class="line">		<span class="keyword">if</span> index &gt; numsTotal/<span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> index1 &lt; nums1Len &amp;&amp; index2 &lt; nums2Len &#123;</span><br><span class="line">			<span class="keyword">if</span> nums1[index1] &lt; nums2[index2] &#123;</span><br><span class="line">				minNum = nums1[index1]</span><br><span class="line">				index1++</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				minNum = nums2[index2]</span><br><span class="line">				index2++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> index1 &lt; nums1Len &#123;</span><br><span class="line">			minNum = nums1[index1]</span><br><span class="line">			index1++</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> index2 &lt; nums2Len &#123;</span><br><span class="line">			minNum = nums2[index2]</span><br><span class="line">			index2++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		nums = <span class="built_in">append</span>(nums, minNum)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> numsTotal%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">		m = <span class="keyword">float64</span>(nums[index<span class="number">-1</span>])</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m = <span class="keyword">float64</span>(nums[index<span class="number">-1</span>]+nums[index<span class="number">-2</span>]) / <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">	fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">	a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">	a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">	a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">	fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>7. 整数反转</title>
    <url>/2018/03/07/leetcode-cn/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">123</span></span><br><span class="line">输出: <span class="number">321</span></span><br><span class="line"></span><br><span class="line"> 示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="number">-123</span></span><br><span class="line">输出: <span class="number">-321</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">120</span></span><br><span class="line">输出: <span class="number">21</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		n <span class="keyword">int</span></span><br><span class="line">		k <span class="keyword">int</span></span><br><span class="line">		f <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	f = <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		f = <span class="number">-1</span></span><br><span class="line">		x *= f</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">			n *= <span class="number">10</span></span><br><span class="line">		&#125;</span><br><span class="line">		n += x % <span class="number">10</span></span><br><span class="line">		x /= <span class="number">10</span></span><br><span class="line">		k++</span><br><span class="line">	&#125;</span><br><span class="line">	n *= f</span><br><span class="line">	<span class="keyword">if</span> n &gt; <span class="number">2147483648</span> || n &lt; <span class="number">-2147483648</span> &#123;</span><br><span class="line">		n = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">123</span></span><br><span class="line">	fmt.Println(reverse(n), n)</span><br><span class="line">	n = <span class="number">-123</span></span><br><span class="line">	fmt.Println(reverse(n), n)</span><br><span class="line">	n = <span class="number">120</span></span><br><span class="line">	fmt.Println(reverse(n), n)</span><br><span class="line">	n = <span class="number">1534236469</span></span><br><span class="line">	fmt.Println(reverse(n), n)</span><br><span class="line">	n = <span class="number">1563847412</span></span><br><span class="line">	fmt.Println(reverse(n), n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>5. 最长回文子串</title>
    <url>/2018/03/05/leetcode-cn/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入: <span class="string">"babad"</span></span><br><span class="line">输出: <span class="string">"bab"</span></span><br><span class="line">注意: <span class="string">"aba"</span> 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入: <span class="string">"cbbd"</span></span><br><span class="line">输出: <span class="string">"bb"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		subStr        = <span class="string">""</span></span><br><span class="line">		lenS          <span class="keyword">int</span></span><br><span class="line">		index         <span class="keyword">int</span></span><br><span class="line">		subK          <span class="keyword">int</span></span><br><span class="line">		maxLeftIndex  <span class="keyword">int</span></span><br><span class="line">		maxRightIndex <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	lenS = <span class="number">2</span>*<span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> index &lt; lenS &#123;</span><br><span class="line">		subK = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			leftIndex, rightIndex := index-subK, index+subK</span><br><span class="line">			<span class="keyword">if</span> leftIndex%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">				leftIndex--</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> rightIndex%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">				rightIndex++</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> leftIndex &lt; <span class="number">0</span> || rightIndex &gt;= lenS &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> s[leftIndex/<span class="number">2</span>] == s[rightIndex/<span class="number">2</span>] &#123;</span><br><span class="line">				<span class="keyword">if</span> maxRightIndex-maxLeftIndex &lt; rightIndex/<span class="number">2</span>-leftIndex/<span class="number">2</span> &#123;</span><br><span class="line">					maxLeftIndex, maxRightIndex = leftIndex/<span class="number">2</span>, rightIndex/<span class="number">2</span></span><br><span class="line">				&#125;</span><br><span class="line">				subK++</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		index++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> maxRightIndex &lt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">		subStr = s[maxLeftIndex:maxRightIndex+<span class="number">1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> subStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"babad"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"cbbd"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"abcd"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"cbbb"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"bbbc"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"ababa"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">	s = <span class="string">"bbbb"</span></span><br><span class="line">	fmt.Println(longestPalindrome(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 主从同步</title>
    <url>/2015/10/23/mysql/MySQL%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>主从同步分三个步骤：</p><ol><li>master 将改变记录到二进制日志 binary log 中（这些记录叫做二进制日志事件，binary log events）。</li><li>slave 将 master 的 binary log events 拷贝到它的中继日志 relay log 中。</li><li>slave 重做中继日志中的事件，将改变反映它自己的数据。</li></ol><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="https://ftp.bmp.ovh/imgs/2020/06/6cc1471efd7bdf88.png" alt></p><a id="more"></a><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><h5 id="生成快照"><a href="#生成快照" class="headerlink" title="生成快照"></a>生成快照</h5><p>如果数据库是 MYISAM 或者既有 MYISAM 又有 INNODB 的话使用如下命令导出一个快照：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --lock-tables --events --triggers --routines --flush-logs --master-data=2 --databases test &gt; db.sql</span><br></pre></td></tr></table></figure><table><tr><td>--locl-tables</td><td>导出数据时锁表</td></tr><tr><td>--events</td><td>会把创建的所有事件也导出来</td></tr><tr><td>--triggers</td><td>会把创建的事务也导出来</td></tr><tr><td>--routines</td><td>这个是存储过程和存储方法</td></tr><tr><td>--flush-log</td><td>导出时先刷新下 binglog 日志</td></tr><tr><td>--master-data=2</td><td>导出的文件里 change master 是被注释掉的 ，等于1时不是注释的，这个根据自己的要求改，一般都会选择2因为在从服务器上需要 change 一下 主服务器的ip，端口 ，账号 ，密码</td></tr></table><p>如果数据库只有 INNODB，可以使用如下命令：</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">mysqldump</span> <span class="literal">-</span><span class="comment">uroot</span> <span class="literal">-</span><span class="comment">p</span> --<span class="comment">single</span><span class="literal">-</span><span class="comment">transaction</span> --<span class="comment">events</span> --<span class="comment">triggers</span> --<span class="comment">routines</span> --<span class="comment">flush</span><span class="literal">-</span><span class="comment">logs</span> --<span class="comment">master</span><span class="literal">-</span><span class="comment">data=2</span> --<span class="comment">databases</span> <span class="comment">test</span> &gt; <span class="comment">db</span><span class="string">.</span><span class="comment">sql</span></span><br></pre></td></tr></table></figure><table><tr><td>--single-transaction</td><td>这个参数只对 innodb 适用</td></tr><tr><td>--databases</td><td>后面跟除 mysql 以后的其他所有数据库的库名，我这里只有一个 test 库</td></tr><tr><td>--master-data</td><td>参数会记录导出快照时候的 mysql 二进制日志位置，下面会用到</td></tr></table><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>修改 mysql 的配置文件 my.cnf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 [mysqld] 配置段下添加如下字段</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log-bin</span>=log</span><br><span class="line"><span class="attr">binlog-do-db</span>=database_name    //需要同步的数据库，如果没有这一行那么表示同步所有的数据库</span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql        //被忽略的数据库</span><br></pre></td></tr></table></figure><h5 id="新建同步账号"><a href="#新建同步账号" class="headerlink" title="新建同步账号"></a>新建同步账号</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.*  <span class="keyword">to</span> repl@<span class="number">192.168</span><span class="number">.80</span><span class="number">.35</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysqld restart</span></span><br></pre></td></tr></table></figure><h5 id="查看日志情况"><a href="#查看日志情况" class="headerlink" title="查看日志情况"></a>查看日志情况</h5><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">show <span class="keyword">master</span> <span class="title">status</span></span><br></pre></td></tr></table></figure><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>修改 mysql 的配置文件 my.cnf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 [mysqld] 配置段下添加如下字段</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">master-host</span>=<span class="number">192.168</span>.<span class="number">80.35</span></span><br><span class="line"><span class="attr">master-user</span>=repl</span><br><span class="line"><span class="attr">master-password</span>=password</span><br><span class="line"><span class="attr">master-port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">master-connect-retry</span>=<span class="number">60</span>       //如果从服务器发现主服务器断掉，重新连接的时间差（秒）</span><br><span class="line"><span class="comment">#replicate-ignore-db=mysql    //忽略的数据库</span></span><br><span class="line"><span class="comment">#replicate-do-db=repl         //同步的数据库（需要备份的数据库名），不写本行代表需要同步所有的数据库</span></span><br></pre></td></tr></table></figure><h5 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysqld restart</span></span><br></pre></td></tr></table></figure><h5 id="快照还原，开始同步"><a href="#快照还原，开始同步" class="headerlink" title="快照还原，开始同步"></a>快照还原，开始同步</h5><p>先将从主库生成的快照文件还原，然后在 master 主机上使用 grep 命令查找到二进制日志 binglog 的名称以及位置。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">grep -i <span class="string">"change master"</span> db.sql</span><br><span class="line"><span class="meta"># -- CHANGE MASTER TO  MASTER_LOG_FILE=<span class="string">'log.xxxx'</span>, MASTER_LOG_POS=98<span class="comment">;</span></span></span><br></pre></td></tr></table></figure><p><strong>change master</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master <span class="keyword">to</span> <span class="attribute">master_host</span>=<span class="string">'192.168.80.35'</span>, <span class="attribute">master_user</span>=<span class="string">'repl'</span>, <span class="attribute">master_password</span>=<span class="string">'password'</span>, <span class="attribute">master_log_file</span>=<span class="string">'log.xxxx'</span>, <span class="attribute">master_log_pos</span>=98;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>如果 Slave_IO_Running 、 Slave_SQL_Running 状态为 Yes，则表明设置成功。</p><h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><h5 id="start-slave-报错"><a href="#start-slave-报错" class="headerlink" title="start slave 报错"></a>start slave 报错</h5><h6 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h6><p><span style="color:red">ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO</span></p><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">执行 <span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span> 提示 <span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line">原因：<span class="keyword">slave</span> 已经默认开启，要先关闭再开启</span><br></pre></td></tr></table></figure><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. 先执行 slave <span class="keyword">stop</span></span><br><span class="line"><span class="number">2.</span> 再执行 <span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'192.168.80.35'</span>,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'password'</span>, master_log_file=<span class="string">'log.000003'</span> ,master_log_pos=<span class="number">98</span>;</span><br><span class="line">3. 再执行 slave <span class="keyword">start</span></span><br><span class="line"><span class="number">4.</span> 最后查看状态 <span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G</span><br></pre></td></tr></table></figure><h4 id="测试主从同步"><a href="#测试主从同步" class="headerlink" title="测试主从同步"></a>测试主从同步</h4><p>在我们配置的主从同步的数据库下建测试表，对数据进行操作，然后在另一边查看是否同步。</p><h4 id="清除主从同步配置信息"><a href="#清除主从同步配置信息" class="headerlink" title="清除主从同步配置信息"></a>清除主从同步配置信息</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; slave stop;</span><br><span class="line">mysql&gt; reset slave;</span><br><span class="line">mysql&gt; change master <span class="keyword">to</span> <span class="attribute">master_user</span>=<span class="string">''</span>, <span class="attribute">master_host</span>=<span class="string">''</span>, <span class="attribute">master_password</span>=<span class="string">''</span>;</span><br></pre></td></tr></table></figure><h5 id="清除失败"><a href="#清除失败" class="headerlink" title="清除失败"></a>清除失败</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可能报错：ERROR 1210 (HY000): Incorrect arguments to MASTER_HOST 。解决办法如下：</span></span><br><span class="line"></span><br><span class="line">mysql&gt; change master <span class="keyword">to</span> <span class="attribute">master_host</span>=<span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令报错的原因，为 master_host=' ' 里面必须有内容，即使为空，也应该用空格代替，而不能什么都不写。</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/myIvan/p/10164926.html" target="_blank" rel="noopener">https://www.cnblogs.com/myIvan/p/10164926.html</a></li></ul>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>8. 字符串转换整数 (atoi)</title>
    <url>/2018/03/08/leetcode-cn/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi)/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><p>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。<br>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。<br>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。<br>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。<br>如果数值超过这个范围，请返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入: "42"</span></span><br><span class="line"><span class="section">输出: 42</span></span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入: "   -42"</span></span><br><span class="line"><span class="section">输出: -42</span></span><br><span class="line"><span class="section">解释: 第一个非空白字符为 '-', 它是一个负号。</span></span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line"><span class="section">输入: "4193 with words"</span></span><br><span class="line"><span class="section">输出: 4193</span></span><br><span class="line"><span class="section">解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。</span></span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line"><span class="section">输入: "words and 987"</span></span><br><span class="line"><span class="section">输出: 0</span></span><br><span class="line"><span class="section">解释: 第一个非空字符是 'w', 但它不是数字或正、负号。</span></span><br><span class="line">     因此无法执行有效的转换。</span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line"><span class="section">输入: "-91283472332"</span></span><br><span class="line"><span class="section">输出: -2147483648</span></span><br><span class="line"><span class="section">解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 </span></span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		f      <span class="keyword">int</span></span><br><span class="line">		numStr <span class="keyword">string</span></span><br><span class="line">		num    <span class="keyword">int</span></span><br><span class="line">		k      <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(str) &lt; <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		ch := str[<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">if</span> ch == <span class="number">32</span> &#123;</span><br><span class="line">			str = str[<span class="number">1</span>:]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ch := str[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">if</span> ch == <span class="number">45</span> &#123;</span><br><span class="line">		str = str[<span class="number">1</span>:]</span><br><span class="line">		f = <span class="number">-1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ch == <span class="number">43</span> &#123;</span><br><span class="line">		str = str[<span class="number">1</span>:]</span><br><span class="line">		f = <span class="number">1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ch &gt;= <span class="number">48</span> &amp;&amp; ch &lt;= <span class="number">57</span> &#123;</span><br><span class="line">		f = <span class="number">1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		f = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> f == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(str); index++ &#123;</span><br><span class="line">			<span class="keyword">if</span> str[index] &gt;= <span class="number">48</span> &amp;&amp; str[index] &lt;= <span class="number">57</span> &#123;</span><br><span class="line">				numStr += <span class="keyword">string</span>(str[index])</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	newNumLength := <span class="built_in">len</span>(numStr)</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; newNumLength; index++ &#123;</span><br><span class="line">		<span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">			num *= <span class="number">10</span></span><br><span class="line">		&#125;</span><br><span class="line">		num += <span class="keyword">int</span>(numStr[index]) - <span class="number">48</span></span><br><span class="line">		k++</span><br><span class="line">		<span class="keyword">if</span> num*f &gt;= <span class="number">2147483648</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> num*f &lt; <span class="number">-2147483648</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-2147483648</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	num = num * f</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"42"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">42</span>)</span><br><span class="line">	s = <span class="string">" "</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">	s = <span class="string">"  "</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">	s = <span class="string">""</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">	s = <span class="string">"-42"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">-42</span>)</span><br><span class="line">	s = <span class="string">" -42"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">-42</span>)</span><br><span class="line">	s = <span class="string">"+42"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">42</span>)</span><br><span class="line">	s = <span class="string">"0"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">	s = <span class="string">"9"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">9</span>)</span><br><span class="line">	s = <span class="string">"4193 with words"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">4193</span>)</span><br><span class="line">	s = <span class="string">"words and 987"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">	s = <span class="string">"-91283472332"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">-2147483648</span>)</span><br><span class="line">	s = <span class="string">"2147483648"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">2147483647</span>)</span><br><span class="line">	s = <span class="string">"9223372036854775808"</span></span><br><span class="line">	fmt.Println(myAtoi(s), <span class="number">2147483647</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-to-integer-atoi</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>9. 回文数</title>
    <url>/2018/03/09/leetcode-cn/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">示例</span> <span class="attr">1:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">2:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">-121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从左向右读,</span> <span class="string">为</span> <span class="number">-121</span> <span class="string">。</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">121</span><span class="bullet">-</span> <span class="string">。因此它不是一个回文数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">3:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">10</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">01</span> <span class="string">。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> x == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	str := strconv.Itoa(x)</span><br><span class="line">	strLength := <span class="built_in">len</span>(str)</span><br><span class="line">	<span class="keyword">for</span> index := <span class="number">0</span>; index &lt; strLength; index++ &#123;</span><br><span class="line">		<span class="keyword">if</span> str[index] != str[strLength-index<span class="number">-1</span>] &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">121</span></span><br><span class="line">	fmt.Println(isPalindrome(n), <span class="literal">true</span>)</span><br><span class="line">	n = <span class="number">-121</span></span><br><span class="line">	fmt.Println(isPalindrome(n), <span class="literal">false</span>)</span><br><span class="line">	n = <span class="number">10</span></span><br><span class="line">	fmt.Println(isPalindrome(n), <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number</a></p>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 之 AWS RDS 查看慢日志</title>
    <url>/2015/12/10/mysql/MySQL%20AWS%20RDS/</url>
    <content><![CDATA[<h4 id="查看慢日志"><a href="#查看慢日志" class="headerlink" title="查看慢日志"></a>查看慢日志</h4><p>需要修改 RDS 的参数组，开启记录慢查询日志。</p><a id="more"></a><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>开启 RDS 记录慢查询日志，然后再次按照之前的文档查询日志，参考步骤如下：</p><ol><li>登陆 AWS Console 页面，打开 RDS 服务。</li><li>左侧导航栏中找到参数组，修改参数组 sys-mysql，依次修改如下参数：<table><tr><td>slow_query_log</td><td>要创建慢速查询日志，请设置为 1。默认值为 0。</td></tr><tr><td>long_query_time</td><td>要防止在慢速查询日志中记录快速运行的查询，请指定需要记录的最短查询执行时间值，以秒为单位。默认值为 10 秒，最小值为 0。如果大于这个规定的时间就会记录。</td></tr><tr><td>log_output option</td><td>可以指定为 FILE，TABLE 或者 NONE。NONE 为不记录，FILE 是以文件的形式保存，一小时一次。TABLE 是存储到 MySQL 的一个表当中，慢速查询写入 mysql.slow_log 表。</td></tr></table></li><li>如果配置的是 table 可以通过如下方式查看：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  mysql.slow_log;</span><br></pre></td></tr></table></figure></li></ol><h5 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h5><p>慢查询日志，参考如下文档：<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_LogAccess.Concepts.MySQL.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_LogAccess.Concepts.MySQL.html</a><br>修改参数组，参考如下文档：<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html#USER_WorkingWithParamGroups.Modifying" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html#USER_WorkingWithParamGroups.Modifying</a></p><h4 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h4><h5 id="主从相关文档"><a href="#主从相关文档" class="headerlink" title="主从相关文档"></a>主从相关文档</h5><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/mysql_rds_set_external_master.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/mysql_rds_set_external_master.html</a></p><h5 id="其他操作文档"><a href="#其他操作文档" class="headerlink" title="其他操作文档"></a>其他操作文档</h5><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/Appendix.MySQL.CommonDBATasks.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/Appendix.MySQL.CommonDBATasks.html</a></p>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>AWS</tag>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 负载均衡</title>
    <url>/2017/08/12/nginx/nginx%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>nginx 通过 upstream 实现负载均衡， upstream 目前支持5种方式。</p><h5 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h5><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指定权重"><a href="#指定权重" class="headerlink" title="指定权重"></a>指定权重</h5><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14 <span class="attribute">weight</span>=10; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15 <span class="attribute">weight</span>=10; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="IP-绑定-ip-hash"><a href="#IP-绑定-ip-hash" class="headerlink" title="IP 绑定 ip_hash"></a>IP 绑定 ip_hash</h5><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14:88; </span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15:80; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="fair（第三方）"><a href="#fair（第三方）" class="headerlink" title="fair（第三方）"></a>fair（第三方）</h5><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   <span class="built_in"> server </span>server1; </span><br><span class="line">   <span class="built_in"> server </span>server2; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="url-hash（第三方）"><a href="#url-hash（第三方）" class="headerlink" title="url_hash（第三方）"></a>url_hash（第三方）</h5><p>按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   <span class="built_in"> server </span>squid1:3128; </span><br><span class="line">   <span class="built_in"> server </span>squid2:3128; </span><br><span class="line">    hash <span class="variable">$request_uri</span>; </span><br><span class="line">    hash_method crc32; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>upstream 还可以为每个设备设置状态值，这些状态值的含义分别如下：</p><table><thead><tr><th>状态值</th><th>含义</th></tr></thead><tbody><tr><td>down</td><td>表示单前的 server 暂时不参与负载</td></tr><tr><td>weight</td><td>默认为1， weight 越大负载的权重就越大</td></tr><tr><td>max_fails</td><td>允许请求失败的次数默认为1，当超过最大次数时返回 proxy_next_upstream 模块定义的错误</td></tr><tr><td>fail_timeout</td><td>max_fails 次失败后，暂停的时间</td></tr><tr><td>backup</td><td>其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器，所以这台机器压力会最轻</td></tr></tbody></table><p>例如：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream bakend&#123;  </span><br><span class="line">      # 定义负载均衡设备的<span class="built_in"> Ip </span>及设备状态 </span><br><span class="line">      ip_hash; </span><br><span class="line">     <span class="built_in"> server </span>10.0.0.11:9090 down; </span><br><span class="line">     <span class="built_in"> server </span>10.0.0.11:8080 <span class="attribute">weight</span>=2; </span><br><span class="line">     <span class="built_in"> server </span>10.0.0.11:6060; </span><br><span class="line">     <span class="built_in"> server </span>10.0.0.11:7070 backup; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h4><p>django + uwsgi + nginx 部署的 web 站点运行时报504 ， 可能是超时时间设置有问题。<br>nginx 和 uwsgi 整合时有三个参数可以用于设置超时时间，在 nginx 配置文件 http -&gt; server -&gt; location 中设置。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">uwsgi_connect_timeout    ：默认<span class="number">60</span>秒，与 uwsgi-server 连接的超时时间，该值不能超过<span class="number">75</span>秒.若在超时时间内未能成功连接则断开连接尝试。 </span><br><span class="line">uwsgi_read_timeout       ：默认<span class="number">60</span>秒，nginx等待 uwsgi 进程发送响应数据的超时时间。若有需要长时间运行才能产生输出结果的uwsgi进程则需将此参数调高。若在错误日志文件中看到 upstream timed <span class="keyword">out</span> 需将此参数调高。若超过超时时间还未收到响应则 nginx 关闭连接。 </span><br><span class="line">uwsgi_send_timeout       ：默认<span class="number">60</span>秒，nginx 向 uwsgi 进程发送请求的超时时间。超时时间由两次写操作的时间间隔算，而非整个请求。若超过超时时间仍没写入动作则 nginx 关闭连接。</span><br></pre></td></tr></table></figure><p><span style="color:red">注：这里还需要排除其他原因，根据具体环境而定，如使用 aws 的 LB 就会有空闲时间的限制</span></p><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">504 </span>   网关超时 Gateway timeout（例如nginx正在处理但是程序执行过程太长，nginx配置的等待时间较短，于是时间到了超时返回<span class="number">504</span>，排查超时时间等因素）</span><br><span class="line"><span class="symbol">502 </span>   网关错误 Bad Gateway  服务不给nginx任何响应 （例如uwsgi最多只能处理<span class="number">300</span>个请求，但nginx转发了<span class="number">600</span>个请求，uwsgi不给nginx任何响应，<span class="number">502</span>）</span><br><span class="line"><span class="symbol">500 </span>   服务器内部错误，可能是服务内部有问题（例如代码内部有问题）</span><br><span class="line"><span class="symbol">404 </span>   找不到该网页（可能web 路径有问题    ）</span><br><span class="line"><span class="symbol">200 </span>   正常状态</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx location 匹配规则</title>
    <url>/2017/08/13/nginx/nginx%20location%20%E6%AD%A3%E5%88%99%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<h4 id="匹配命令"><a href="#匹配命令" class="headerlink" title="匹配命令"></a>匹配命令</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">~   正则匹配，区分大小写</span><br><span class="line">~*  正则匹配，不区分大小写</span><br><span class="line"><span class="section">=   普通字符精确匹配，如果找到，停止搜索</span></span><br><span class="line">^~  普通字符匹配（如果该选项匹配，只匹配该选项，一般用来匹配目录）</span><br><span class="line">/   通用匹配，如果没有其它匹配，任何请求都会匹配到</span><br><span class="line">@   定义命名的 location，使用在内部定向时，例如：error<span class="emphasis">_page、try_</span>files</span><br></pre></td></tr></table></figure><h4 id="匹配优先级（与在配置文件中的顺序无关）"><a href="#匹配优先级（与在配置文件中的顺序无关）" class="headerlink" title="匹配优先级（与在配置文件中的顺序无关）"></a>匹配优先级（与在配置文件中的顺序无关）</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 精确匹配 ”=“ 会第一个被处理。如果发现精确匹配，停止搜索。</span><br><span class="line"><span class="number">2.</span> 匹配最长的规则，如果这个规则带有 ^~ 修饰符，停止搜索。</span><br><span class="line"><span class="number">3.</span> 存储 #<span class="number">2</span> 的最长匹配规则，然后按在配置文件中的定义顺序匹配正则表达，若匹配到正则表达式，停止搜索。</span><br><span class="line"><span class="number">4.</span> 若没有匹配到正则表达式，使用存储的 #<span class="number">2</span> 的最长匹配。</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h5><ol><li>Directives with the = prefix that match the query exactly. If found, searching stops.</li><li>All remaining directives with conventional strings, longest match first. If this match used the ^~ prefix, searching stops.</li><li>Regular expressions, in order of definition in the configuration file.</li><li>If #3 yielded a match, that result is used. Else the match from #2 is used.</li></ol><ol><li>= 前缀的指令严格匹配这个查询。如果找到，停止搜索。</li><li>所有剩下的常规字符串，最长的匹配。如果这个匹配使用 ^〜 前缀，搜索停止。</li><li>正则表达式，在配置文件中定义的顺序。</li><li>如果第三条规则产生匹配的话，结果被使用。否则，使用第二条规则的结果。</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @location 例子</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@fetch</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="variable">@fetch</span> &#123;</span><br><span class="line">    [ configuration X ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span>  = / &#123;</span><br><span class="line">    <span class="comment"># 精确匹配 / </span></span><br><span class="line">    [ configuration A ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span>  / &#123;</span><br><span class="line">    <span class="comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></span><br><span class="line">    <span class="comment"># 但是正则和最长字符串会优先匹配</span></span><br><span class="line">    [ configuration B ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /documents/ &#123;</span><br><span class="line">    <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></span><br><span class="line">    <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span><br><span class="line">    [ configuration C ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /documents/Abc</span> &#123;</span><br><span class="line">    [ configuration CC ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /images/ &#123;</span><br><span class="line">    <span class="comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索，采用这一条</span></span><br><span class="line">    [ configuration D ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">    <span class="comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span></span><br><span class="line">    <span class="comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span></span><br><span class="line">    [ configuration E ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /images/ &#123;</span><br><span class="line">    <span class="comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span></span><br><span class="line">    [ configuration F ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /images/abc &#123;</span><br><span class="line">    <span class="comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span></span><br><span class="line">    <span class="comment"># F 与 G 的放置顺序是没有关系的</span></span><br><span class="line">    [ configuration G ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /images/abc/</span> &#123;</span><br><span class="line">    <span class="comment"># 只有去掉 config D 才有效</span></span><br><span class="line">    <span class="comment"># 先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span></span><br><span class="line">    [ configuration H ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* /js/.*/\.js</span></span><br></pre></td></tr></table></figure><h4 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h4><h5 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h5><p>处理静态文件请求，这是 nginx 作为 http 服务器的强项，有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录匹配</span></span><br><span class="line"><span class="keyword">location</span> <span class="title">^~ /static</span>/ &#123;</span><br><span class="line">    root /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后缀匹配</span></span><br><span class="line"><span class="keyword">location</span> <span class="title">~* \.(gif</span>|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    alias /webroot/res/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.nginx.cn/115.html" target="_blank" rel="noopener">https://www.nginx.cn/115.html</a></li></ul>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 学习笔记</title>
    <url>/2015/09/01/mysql/MySQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统) 应用软件之一。</p><a id="more"></a><p><span style="color:red">Server version: 5.7.17 MySQL Community Server (GPL)</span></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mysql</span> <span class="string">-u用户名</span> <span class="string">-p用户密码</span> <span class="string">（如果连接远端机器加上参数</span> <span class="string">-h</span> <span class="string">远端机器IP</span>  <span class="string">-P</span> <span class="string">端口）</span></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="string">mysql</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">-P</span> <span class="number">3306</span> <span class="string">-uroot</span> <span class="string">-ppassword</span></span><br></pre></td></tr></table></figure><h5 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h4 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h4><h5 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; create<span class="built_in"> user </span><span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span> identified by <span class="string">'readonly'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select Host, User from mysql.user;</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">| Host      | User      |</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">| %         | root      |</span><br><span class="line">| 127.0.0.1 | blazehu   |</span><br><span class="line">| 127.0.0.1 | root      |</span><br><span class="line">| localhost | mysql.sys |</span><br><span class="line">| localhost | root      |</span><br><span class="line"><span class="code">+-----------+</span>-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop<span class="built_in"> user </span><span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="用户赋权"><a href="#用户赋权" class="headerlink" title="用户赋权"></a>用户赋权</h5><p>使用 grant 增加新用户设置用户权限等 （可以直接对 mysql.user 用户表操作，来修改用户密码等）</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">update</span>, <span class="keyword">insert</span>, <span class="keyword">delete</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span> identified <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; show grants for <span class="emphasis">'blazehu'</span>@<span class="emphasis">'127.0.0.1'</span>;</span><br><span class="line"><span class="code">+---------------------------------------------------------------------------+</span></span><br><span class="line">| Grants for blazehu@127.0.0.1                                              |</span><br><span class="line"><span class="code">+---------------------------------------------------------------------------+</span></span><br><span class="line">| GRANT USAGE ON <span class="strong">*.*</span> TO <span class="emphasis">'blazehu'</span>@<span class="emphasis">'127.0.0.1'</span>                               |</span><br><span class="line">| GRANT SELECT, INSERT, UPDATE, DELETE ON <span class="string">`test`.* TO '</span>blazehu'@<span class="emphasis">'127.0.0.1'</span> |</span><br><span class="line"><span class="code">+---------------------------------------------------------------------------+</span></span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="用户重命名"><a href="#用户重命名" class="headerlink" title="用户重命名"></a>用户重命名</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; rename<span class="built_in"> user </span><span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">to</span> <span class="string">'blaze'</span>@<span class="string">'127.0.0.1'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">update</span> mysql.<span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'blaze'</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">0</span>  Warnings: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">'blaze'</span>@<span class="string">'127.0.0.1'</span>=<span class="keyword">password</span>(<span class="string">'123456'</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>也可以使用 mysqladmin 命令来修改密码。</p><h4 id="数据库基础操作"><a href="#数据库基础操作" class="headerlink" title="数据库基础操作"></a>数据库基础操作</h4><h5 id="显示数据库列表"><a href="#显示数据库列表" class="headerlink" title="显示数据库列表"></a>显示数据库列表</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line"><span class="code">+--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line"><span class="code">+--------------------+</span></span><br><span class="line">| information<span class="emphasis">_schema |</span></span><br><span class="line"><span class="emphasis">| mysql              |</span></span><br><span class="line"><span class="emphasis">| performance_</span>schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line"><span class="code">+--------------------+</span></span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database test<span class="built_in"> default </span>character <span class="builtin-name">set</span> utf8;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use <span class="built_in">test</span></span></span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">drop</span> <span class="keyword">database</span> test;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="数据表基础操作"><a href="#数据表基础操作" class="headerlink" title="数据表基础操作"></a>数据表基础操作</h4><h5 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h5><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|<span class="string"> Tables_in_test                    </span>|</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|<span class="string"> account_permission                </span>|</span><br><span class="line">|<span class="string"> account_userpermission            </span>|</span><br><span class="line">|<span class="string"> auth_group                        </span>|</span><br><span class="line">|<span class="string"> auth_group_permissions            </span>|</span><br><span class="line">|<span class="string"> auth_permission                   </span>|</span><br><span class="line">|<span class="string"> auth_user                         </span>|</span><br><span class="line">|<span class="string"> auth_user_groups                  </span>|</span><br><span class="line">|<span class="string"> auth_user_user_permissions        </span>|</span><br><span class="line">|<span class="string"> authtoken_token                   </span>|</span><br><span class="line">|<span class="string"> django_admin_log                  </span>|</span><br><span class="line">|<span class="string"> django_cas_ng_proxygrantingticket </span>|</span><br><span class="line">|<span class="string"> django_cas_ng_sessionticket       </span>|</span><br><span class="line">|<span class="string"> django_content_type               </span>|</span><br><span class="line">|<span class="string"> django_migrations                 </span>|</span><br><span class="line">|<span class="string"> django_session                    </span>|</span><br><span class="line">+-----------------------------------+</span><br><span class="line">15 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="查看数据库表结构"><a href="#查看数据库表结构" class="headerlink" title="查看数据库表结构"></a>查看数据库表结构</h5><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc auth_user;</span><br><span class="line">+--------------+--------------+------+-----+---------+----------------+</span><br><span class="line">|<span class="string"> Field        </span>|<span class="string"> Type         </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</span><br><span class="line">+--------------+--------------+------+-----+---------+----------------+</span><br><span class="line">|<span class="string"> id           </span>|<span class="string"> int(11)      </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</span><br><span class="line">|<span class="string"> password     </span>|<span class="string"> varchar(128) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> last_login   </span>|<span class="string"> datetime(6)  </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> is_superuser </span>|<span class="string"> tinyint(1)   </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> username     </span>|<span class="string"> varchar(150) </span>|<span class="string"> NO   </span>|<span class="string"> UNI </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> first_name   </span>|<span class="string"> varchar(30)  </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> last_name    </span>|<span class="string"> varchar(150) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> email        </span>|<span class="string"> varchar(254) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> is_staff     </span>|<span class="string"> tinyint(1)   </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> is_active    </span>|<span class="string"> tinyint(1)   </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> date_joined  </span>|<span class="string"> datetime(6)  </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">+--------------+--------------+------+-----+---------+----------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">drop</span> <span class="keyword">table</span> auth_user;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h5 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show <span class="keyword">create</span> table auth_user \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: auth_user</span><br><span class="line"><span class="keyword">Create</span> Table: <span class="keyword">CREATE</span> TABLE <span class="symbol">`auth_user`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`password`</span> varchar(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`last_login`</span> datetime(<span class="number">6</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`is_superuser`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`username`</span> varchar(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`first_name`</span> varchar(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`last_name`</span> varchar(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`email`</span> varchar(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`is_staff`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`is_active`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`date_joined`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`username`</span> (<span class="symbol">`username`</span>)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">3</span> DEFAULT CHARSET=utf8mb4</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><h5 id="数据库表增删改查"><a href="#数据库表增删改查" class="headerlink" title="数据库表增删改查"></a>数据库表增删改查</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">插入： <span class="keyword">insert</span> <span class="keyword">into</span> tablename <span class="keyword">values</span>(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">删除： <span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span>  ...;</span><br><span class="line">更新： <span class="keyword">update</span> tablename <span class="keyword">set</span> a=<span class="string">""</span> <span class="keyword">where</span> ...;</span><br><span class="line">查找： <span class="keyword">select</span> * <span class="keyword">from</span> tablename <span class="keyword">where</span> ...;</span><br></pre></td></tr></table></figure><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">alter</span> <span class="keyword">table</span> auth_user <span class="keyword">add</span> key test__name(<span class="type">name</span>) <span class="keyword">using</span> btree;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><h5 id="查看数据库变量信息"><a href="#查看数据库变量信息" class="headerlink" title="查看数据库变量信息"></a>查看数据库变量信息</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like "character%";</span><br><span class="line"><span class="code">+--------------------------+</span>----------------------------+</span><br><span class="line">| Variable<span class="emphasis">_name            | Value                      |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------+</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_client     | latin1                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_connection | latin1                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_database   | utf8mb4                    |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_filesystem | binary                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_results    | latin1                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_server     | latin1                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_system     | utf8                       |</span></span><br><span class="line"><span class="emphasis">| character_</span>sets<span class="emphasis">_dir       | /usr/share/mysql/charsets/ |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------+</span></span><br><span class="line"><span class="emphasis">8 rows in set (0.01 sec)</span></span><br></pre></td></tr></table></figure><h5 id="查看数据库大小"><a href="#查看数据库大小" class="headerlink" title="查看数据库大小"></a>查看数据库大小</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat(round(sum(DATA<span class="emphasis">_LENGTH/1024/1024),2),'MB') as data from information_</span>schema.TABLES where table<span class="emphasis">_schema='test';</span></span><br><span class="line"><span class="emphasis">+--------+</span></span><br><span class="line"><span class="emphasis">| data   |</span></span><br><span class="line"><span class="emphasis">+--------+</span></span><br><span class="line"><span class="emphasis">| 0.56MB |</span></span><br><span class="line"><span class="emphasis">+--------+</span></span><br><span class="line"><span class="emphasis">1 row in set (0.01 sec)</span></span><br></pre></td></tr></table></figure><h5 id="查看数据表大小"><a href="#查看数据表大小" class="headerlink" title="查看数据表大小"></a>查看数据表大小</h5><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT TABLE_NAME, round(DATA_LENGTH/1024/1024,2) as data ,TABLE_ROWS FROM information_schema.TABLES WHERE TABLE_SCHEMA='test' order by data desc limit 10;</span><br><span class="line">+---------------------------+------+------------+</span><br><span class="line">|<span class="string"> TABLE_NAME                </span>|<span class="string"> data </span>|<span class="string"> TABLE_ROWS </span>|</span><br><span class="line">+---------------------------+------+------------+</span><br><span class="line">|<span class="string"> django_session            </span>|<span class="string"> 4.45 </span>|<span class="string">        410 </span>|</span><br><span class="line">|<span class="string"> cloud_hostmaintenanceuser </span>|<span class="string"> 1.52 </span>|<span class="string">       7648 </span>|</span><br><span class="line">|<span class="string"> storage_cephbucket        </span>|<span class="string"> 1.52 </span>|<span class="string">       1284 </span>|</span><br><span class="line">|<span class="string"> redis_draft_service_log   </span>|<span class="string"> 0.52 </span>|<span class="string">        990 </span>|</span><br><span class="line">|<span class="string"> kubemetrics_nodeinfos     </span>|<span class="string"> 0.42 </span>|<span class="string">       1235 </span>|</span><br><span class="line">|<span class="string"> saltstack_saltgrainsitems </span>|<span class="string"> 0.30 </span>|<span class="string">       1409 </span>|</span><br><span class="line">|<span class="string"> auth_user_groups          </span>|<span class="string"> 0.23 </span>|<span class="string">       3055 </span>|</span><br><span class="line">|<span class="string"> storage_glusterbrick      </span>|<span class="string"> 0.22 </span>|<span class="string">       1328 </span>|</span><br><span class="line">|<span class="string"> saltstack_addonversion    </span>|<span class="string"> 0.17 </span>|<span class="string">       1283 </span>|</span><br><span class="line">|<span class="string"> auth_user                 </span>|<span class="string"> 0.14 </span>|<span class="string">       1171 </span>|</span><br><span class="line">+---------------------------+------+------------+</span><br><span class="line">10 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h5 id="修改默认分隔符"><a href="#修改默认分隔符" class="headerlink" title="修改默认分隔符"></a>修改默认分隔符</h5><p>默认分隔符为 “;”</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">delimiter <span class="comment">//</span></span><br></pre></td></tr></table></figure><h5 id="MySQL-主从，跳过一个错误"><a href="#MySQL-主从，跳过一个错误" class="headerlink" title="MySQL 主从，跳过一个错误"></a>MySQL 主从，跳过一个错误</h5><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> GLOBAL <span class="comment">SQL_SLAVE_SKIP_COUNTER = 1</span>;</span><br></pre></td></tr></table></figure><h4 id="通过脚本操作数据库"><a href="#通过脚本操作数据库" class="headerlink" title="通过脚本操作数据库"></a>通过脚本操作数据库</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql -h host -P<span class="built_in"> port </span>-uUsername -pPassword -e <span class="string">"command"</span></span><br></pre></td></tr></table></figure><h4 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h4><h5 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h5><h6 id="mysqldump-命令"><a href="#mysqldump-命令" class="headerlink" title="mysqldump 命令"></a>mysqldump 命令</h6><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包括数据库中的数据</span></span><br><span class="line">root<span class="variable">@demo</span><span class="symbol">:/</span><span class="comment"># mysqldump -uroot -ppassword test &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不包括数据库中的数据</span></span><br><span class="line">root<span class="variable">@demo</span><span class="symbol">:/</span><span class="comment"># mysqldump -uroot -ppassword -d test &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库中的某张表（包含数据）</span></span><br><span class="line">root<span class="variable">@demo</span><span class="symbol">:/</span><span class="comment"># mysqldump -uroot -ppassword test auth_user &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库中的某张表（不包含数据）</span></span><br><span class="line">root<span class="variable">@demo</span><span class="symbol">:/</span><span class="comment"># mysqldump -uroot -ppassword -d test auth_user &gt; test.sql</span></span><br></pre></td></tr></table></figure><h5 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h5><h6 id="mysql-命令"><a href="#mysql-命令" class="headerlink" title="mysql 命令"></a>mysql 命令</h6><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@demo</span><span class="symbol">:/</span><span class="comment"># mysql -uroot -ppassword test &lt; test.sql</span></span><br></pre></td></tr></table></figure><h6 id="source-命令"><a href="#source-命令" class="headerlink" title="source 命令"></a>source 命令</h6><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mysql&gt; source test.sql;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="备份数据表"><a href="#备份数据表" class="headerlink" title="备份数据表"></a>备份数据表</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table auth_user_bak as select * <span class="keyword">from</span> auth_user;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">1</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="热备工具"><a href="#热备工具" class="headerlink" title="热备工具"></a>热备工具</h5><p>qpress 解压工具<br>percona-xtrabackup 热备工具</p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="在做数据库主从和备份的时候发现-dump-失败-？"><a href="#在做数据库主从和备份的时候发现-dump-失败-？" class="headerlink" title="在做数据库主从和备份的时候发现 dump 失败 ？"></a>在做数据库主从和备份的时候发现 dump 失败 ？</h5><p>mysqldump 失败的原因可能是 my.cnf <span style="color:red">“#innodb_force_recovery=1”</span> 参数没有注释掉，这个参数放开会导致数据库不能做 insert、update、dump 数据库等操作。</p><h5 id="Ubuntu-12-04-安装-mysql-python-提示找不到-mysql-config-？"><a href="#Ubuntu-12-04-安装-mysql-python-提示找不到-mysql-config-？" class="headerlink" title="Ubuntu 12.04 安装 mysql-python 提示找不到 mysql_config ？"></a>Ubuntu 12.04 安装 mysql-python 提示找不到 mysql_config ？</h5><p>安装 libmysqlclient-dev 库： <span style="color:red">sudo apt-get install libmysqlclient-dev </span>。安装完成之后在 /etc/mysql 下会生成默认的 my.cnf 配置文件 ，系统优先读取该路径下的配置文件信息，这时候需要注意检查配置文件是否正确。</p><h5 id="通过-shell-watch-mysql-的一些参数，发现-mysql-连接断开，报错-too-many-connection-？"><a href="#通过-shell-watch-mysql-的一些参数，发现-mysql-连接断开，报错-too-many-connection-？" class="headerlink" title="通过 shell watch mysql 的一些参数，发现 mysql 连接断开，报错 too many connection ？"></a>通过 shell watch mysql 的一些参数，发现 mysql 连接断开，报错 too many connection ？</h5><p>watch 每隔2秒钟 连接一次 mysql 导致数据库连接过多，数据库自动断开连不上。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-tutorial.html</a></li></ul>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>双机热备（keepalived）</title>
    <url>/2015/08/16/ops/keepalived/</url>
    <content><![CDATA[<h4 id="keepalived是什么？"><a href="#keepalived是什么？" class="headerlink" title="keepalived是什么？"></a>keepalived是什么？</h4><p>　　Keepalived是Linux下一个轻量级别的高可用解决方案。除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件。</p><a id="more"></a><p>　　Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。<br>keepalived官网: <a href="http://www.keepalived.org" target="_blank" rel="noopener">http://www.keepalived.org</a></p><h4 id="keepalived高可用架构示意图"><a href="#keepalived高可用架构示意图" class="headerlink" title="keepalived高可用架构示意图"></a>keepalived高可用架构示意图</h4><p><img src="/2015/08/16/ops/keepalived/keepalived_1.png" alt></p><h4 id="keepalived实践"><a href="#keepalived实践" class="headerlink" title="keepalived实践"></a>keepalived实践</h4><p>提供2台物理机<br>3个内网ip分别为：<span style="color:red">10.10.10.126（主节点），10.10.10.127（备用节点），10.10.10.129 （对外提供服务的虚拟IP）</span></p><p>在这种模式下，虚拟IP：<span style="color:red">10.10.10.129</span>，在某时刻只能属于某一个节点，另一个节点作为备用节点存在。<br>当主节点不可用时，备用节点接管虚拟IP（即虚拟IP漂移至节点B），提供正常服务。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在两台服务器上分别安装 keepalived<br>使用源码包安装</p><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#<span class="number">10.10</span><span class="number">.10</span><span class="number">.126</span></span><br><span class="line">sudo vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state MASTER         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    <span class="keyword">interface</span> <span class="symbol">eth0</span>       #虚<span class="symbol">IP</span>地址放置的网卡位置</span><br><span class="line">    <span class="symbol">virtual_router_id</span> <span class="symbol">51</span> #保持主从服务器一致</span><br><span class="line">    <span class="symbol">priority</span> <span class="symbol">100</span>         #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    <span class="symbol">advert_int</span> <span class="symbol">1</span>         #心跳广播（<span class="symbol">VRRP</span> <span class="symbol">Multicast</span>）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">authentication</span> &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass <span class="number">1234</span>    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">10.10</span><span class="number">.10</span><span class="number">.129</span>      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red">注意：备份服务器 10.10.10.127 配置中 state 要改成 BACKUP，同时调低 priority。</span></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#<span class="number">10.10</span><span class="number">.10</span><span class="number">.127</span></span><br><span class="line">sudo vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state BACKUP         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    <span class="keyword">interface</span> <span class="symbol">eth0</span>       #虚<span class="symbol">IP</span>地址放置的网卡位置</span><br><span class="line">    <span class="symbol">virtual_router_id</span> <span class="symbol">51</span> #保持主从服务器一致</span><br><span class="line">    <span class="symbol">priority</span> <span class="symbol">99</span>          #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    <span class="symbol">advert_int</span> <span class="symbol">1</span>         #心跳广播（<span class="symbol">VRRP</span> <span class="symbol">Multicast</span>）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">authentication</span> &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass <span class="number">1234</span>    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">10.10</span><span class="number">.10</span><span class="number">.129</span>      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动keepalived服务"><a href="#启动keepalived服务" class="headerlink" title="启动keepalived服务"></a>启动keepalived服务</h5><p>$ sudo service keepalived start<br>$ keepalived -D -f /usr/local/etc/keepalived/keepalived.conf</p><p>查看log消息: tail -f /var/log/messages<br>启动主节点 10.10.10.126 后, messages日志为: 广播ARP消息</p><p>重启keepalived服务之后使用: ip a 查看虚拟IP信息<br>10.10.10.126 机器上有两个ip ： 本机IP 10.10.10.126 和 虚拟IP 10.10.10.129<br>10.10.10.127 机器上有一个ip ： 本机IP 10.10.10.127</p><p>在第三台机器上进行访问<br>$ curl <a href="http://10.10.10.126" target="_blank" rel="noopener">http://10.10.10.126</a><br>$ curl <a href="http://10.10.10.127" target="_blank" rel="noopener">http://10.10.10.127</a><br>$ curl <a href="http://10.10.10.129" target="_blank" rel="noopener">http://10.10.10.129</a></p><p>为了防止备用节点浪费资源，可以使用相互热备<br>分别修改126和127的机器的keepalived 配置文件，增加一个新的配置：VI_2</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state BACKUP         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    <span class="keyword">interface</span> <span class="symbol">eth0</span>       #虚<span class="symbol">IP</span>地址放置的网卡位置</span><br><span class="line">    <span class="symbol">virtual_router_id</span> <span class="symbol">51</span> #保持主从服务器一致</span><br><span class="line">    <span class="symbol">priority</span> <span class="symbol">99</span>          #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    <span class="symbol">advert_int</span> <span class="symbol">1</span>         #心跳广播（<span class="symbol">VRRP</span> <span class="symbol">Multicast</span>）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">authentication</span> &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass <span class="number">1234</span>    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">10.10</span><span class="number">.10</span><span class="number">.129</span>      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;     </span><br><span class="line">    state MASTER         #设置为主服务器（状态参数 master/backup）</span><br><span class="line">    <span class="keyword">interface</span> <span class="symbol">eth0</span>       #虚<span class="symbol">IP</span>地址放置的网卡位置</span><br><span class="line">    <span class="symbol">virtual_router_id</span> <span class="symbol">52</span> #保持主从服务器一致</span><br><span class="line">    <span class="symbol">priority</span> <span class="symbol">100</span>         #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    <span class="symbol">advert_int</span> <span class="symbol">1</span>         #心跳广播（<span class="symbol">VRRP</span> <span class="symbol">Multicast</span>）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">authentication</span> &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass <span class="number">1234</span>    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">10.10</span><span class="number">.10</span><span class="number">.130</span>      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 之 pg_stat_statements</title>
    <url>/2019/11/23/pgsql/PostgreSQL%20%E4%B9%8B%20pg_stat_statements/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>pg_stat_statements 模块提供了一种跟踪执行的所有 SQL 语句的统计信息的方法。</p><a id="more"></a><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>ubuntu 16.04 安装：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> -y update &amp;&amp; apt-<span class="builtin-name">get</span> install -y postgresql-contrib-9.6 postgresql-plpython-9.6</span><br></pre></td></tr></table></figure><p>如果 pgsql 是通过容器部署可以更新基础镜像：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:9.6</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> -y update &amp;&amp; apt-<span class="builtin-name">get</span> install -y --force-yes postgresql-contrib-9.6 postgresql-plpython-9.6</span><br></pre></td></tr></table></figure><h4 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">shared_preload_libraries = <span class="string">'pg_stat_statements'</span>    # 加载 pg_stat_statements 模块</span><br></pre></td></tr></table></figure><p>以下可选参数：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">track_io_timing = <span class="keyword">on</span>                      # 跟踪 IO 消耗的时间</span><br><span class="line">track_activity_query_size = <span class="number">2048</span>          # 单条 <span class="keyword">sql</span> 的最长长度，超过截断显示</span><br><span class="line"></span><br><span class="line">pg_stat_statements.save = <span class="keyword">on</span>              # 重启后是否保留统计信息 </span><br><span class="line">pg_stat_statements.max = <span class="number">10000</span>            # 最多保留统计信息条数，通过 LRU 算法来覆盖老的记录。  </span><br><span class="line">pg_stat_statements.track = <span class="keyword">all</span>            # <span class="keyword">all</span>：所有 <span class="keyword">sql</span> 包括函数内嵌套的 <span class="keyword">sql</span> 、 top：直接执行的 <span class="keyword">sql</span> 不包括函数内嵌套的、 <span class="keyword">none</span>：不跟踪  </span><br><span class="line">pg_stat_statements.track_utility = <span class="keyword">off</span>    # 是否跟踪非 DML 语句 (例如 DDL、DCL)， <span class="keyword">on</span> 表示跟踪, <span class="keyword">off</span> 表示不跟踪</span><br></pre></td></tr></table></figure><h4 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker restart pgsql</span></span><br></pre></td></tr></table></figure><h4 id="加载扩展"><a href="#加载扩展" class="headerlink" title="加载扩展"></a>加载扩展</h4><p>加载扩展模块</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">extension</span> pg_stat_statements;</span><br></pre></td></tr></table></figure><p>卸载扩展模块</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">extension</span> pg_stat_statements;</span><br></pre></td></tr></table></figure><h4 id="常用分析语句"><a href="#常用分析语句" class="headerlink" title="常用分析语句"></a>常用分析语句</h4><p>单次调用最耗时</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> mean_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗时</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> total_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>响应时间抖动最严重</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> stddev_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>单次调用最耗 IO</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) /calls <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗IO</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗共享内存</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (shared_blks_hit + shared_blks_dirtied) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗临时空间</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> temp_blks_written <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="重置统计信息"><a href="#重置统计信息" class="headerlink" title="重置统计信息"></a>重置统计信息</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_stat_statements_reset();</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.postgresql.org/docs/9.6/pgstatstatements.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.6/pgstatstatements.html</a></li><li><a href="https://yq.aliyun.com/articles/74421" target="_blank" rel="noopener">https://yq.aliyun.com/articles/74421</a></li></ul>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 主从同步</title>
    <url>/2019/11/24/pgsql/PostgreSQL%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>PostgreSQL 9.0 引入了主备流复制机制，流复制每次传输单位是 WAL 日志的 record。通过流复制备库不断的从主库同步相应的数据，并在备库 apply 每个 WAL record 。</p><a id="more"></a><p>PostgreSQL 9.0 之前提供的方法是主库写完一个 WAL 日志文件后，才把 WAL 日志文件传送到备库，这样的方式会导致主备延迟特别大。同时 PostgreSQL 9.0 之后提供了 Hot Standby ，备库在应用 WAL record 的同时也能够提供只读服务，大大提升了用户体验。</p><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><p>pgsql 通过容器部署，这里使用 docker-compose<br>主库： 192.168.0.1<br>从库： 192.168.0.2</p><h5 id="启动主库"><a href="#启动主库" class="headerlink" title="启动主库"></a>启动主库</h5><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">pgsql:</span></span><br><span class="line"><span class="symbol">  image:</span> postgres:<span class="number">9.6</span></span><br><span class="line"><span class="symbol">  restart:</span> always</span><br><span class="line"><span class="symbol">  container_name:</span> pgsql</span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">   - <span class="number">5432</span>:<span class="number">5432</span></span><br><span class="line"><span class="symbol">  environment:</span></span><br><span class="line">   - POSTGRES_PASSWORD=postgres</span><br><span class="line"><span class="symbol">  volumes:</span></span><br><span class="line">   - <span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data:<span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data</span><br></pre></td></tr></table></figure><h5 id="新建归档日志目录"><a href="#新建归档日志目录" class="headerlink" title="新建归档日志目录"></a>新建归档日志目录</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">docker exec -ti pgsql bash</span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/<span class="title">pg_archive</span></span></span><br></pre></td></tr></table></figure><h5 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> <span class="keyword">replica</span> <span class="keyword">login</span> <span class="keyword">replication</span> <span class="keyword">encrypted</span> <span class="keyword">password</span> <span class="string">'replica'</span>;</span><br><span class="line"></span><br><span class="line"># 查看是否创建成功</span><br><span class="line">\du</span><br></pre></td></tr></table></figure><h5 id="修改-pg-hba-conf-文件-从库ip"><a href="#修改-pg-hba-conf-文件-从库ip" class="headerlink" title="修改 pg_hba.conf 文件 (从库ip)"></a>修改 pg_hba.conf 文件 (从库ip)</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">host <span class="keyword">replication</span> <span class="keyword">replica</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> trust</span><br></pre></td></tr></table></figure><h5 id="修改-postgresql-conf"><a href="#修改-postgresql-conf" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen_addresses</span> = <span class="string">'*'</span>     <span class="comment"># 监听所有 IP</span></span><br><span class="line"><span class="attr">wal_level</span> = hot_standby    <span class="comment"># 开启热备</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">32</span>       <span class="comment"># 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">64</span>     <span class="comment"># 设置流复制保留的最多的 xlog 数目，一份是 16M，注意机器磁盘 16M * 64 = 1G</span></span><br><span class="line"><span class="attr">wal_sender_timeout</span> = <span class="number">60</span>    <span class="comment"># 设置流复制主机发送数据的超时时间</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">500</span>      <span class="comment"># 这个设置要注意下，从库的 max_connections 必须要大于主库的</span></span><br><span class="line"><span class="attr">archive_mode</span> = <span class="literal">on</span>          <span class="comment"># 允许归档</span></span><br><span class="line">                           <span class="comment"># 用该命令来归档logfile segment</span></span><br><span class="line"><span class="attr">archive_command</span> = <span class="string">'cp %p /var/lib/postgresql/data/pg_archive/%f'</span></span><br></pre></td></tr></table></figure><h5 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h5><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker restart pgsql</span></span><br></pre></td></tr></table></figure><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><h5 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h5><p>拷贝 docker-compose 文件, 并拉起容器</p><h5 id="拷贝主服务器数据"><a href="#拷贝主服务器数据" class="headerlink" title="拷贝主服务器数据"></a>拷贝主服务器数据</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除从库数据</span></span><br><span class="line">rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/*  </span></span><br><span class="line"></span><br><span class="line">pg_basebackup -h <span class="number">192.168</span>.<span class="number">0.1</span> -U replica -D /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span> -<span class="title">X</span> <span class="title">stream</span> -<span class="title">P</span></span></span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/<span class="title">pg_archive</span></span></span><br></pre></td></tr></table></figure><h5 id="添加-recovery-conf-文件"><a href="#添加-recovery-conf-文件" class="headerlink" title="添加 recovery.conf 文件"></a>添加 recovery.conf 文件</h5><p>recovery.conf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">standby_mode</span> = <span class="literal">on</span>    </span><br><span class="line"><span class="attr">primary_conninfo</span> = <span class="string">'host=192.168.0.1 port=5432 user=replica password=replica'</span> </span><br><span class="line"><span class="attr">recovery_target_timeline</span> = <span class="string">'latest'</span></span><br></pre></td></tr></table></figure><h5 id="修改-postgresql-conf-1"><a href="#修改-postgresql-conf-1" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">wal_level</span> = hot_standby</span><br><span class="line"><span class="attr">hot_standby_feedback</span> = <span class="literal">on</span>             <span class="comment"># 如果有错误的数据复制，是否向主进行反馈</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">1000</span>                <span class="comment"># 一般查多于写的应用从库的最大连接数要比较大</span></span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span>                      <span class="comment"># 说明这台机器不仅仅是用于数据归档，也用于数据查询</span></span><br><span class="line"><span class="attr">max_standby_streaming_delay</span> = <span class="number">30</span>s     <span class="comment"># 数据流备份的最大延迟时间</span></span><br><span class="line"><span class="attr">wal_receiver_status_interval</span> = <span class="number">10</span>s    <span class="comment"># 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</span></span><br></pre></td></tr></table></figure><h5 id="重启从库"><a href="#重启从库" class="headerlink" title="重启从库"></a>重启从库</h5><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker restart pgsql-<span class="literal">slave</span></span><br></pre></td></tr></table></figure><h4 id="验证主从"><a href="#验证主从" class="headerlink" title="验证主从"></a>验证主从</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> client_addr, sync_state <span class="keyword">from</span> pg_stat_replication;</span><br><span class="line"></span><br><span class="line">ps -ef 查看进程是否存在</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/9.6/<span class="title">bin</span>/<span class="title">pg_ctl</span> -<span class="title">D</span> /<span class="title">var</span>/<span class="title">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span> <span class="title">status</span></span></span><br><span class="line"></span><br><span class="line">pg_controldata /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span></span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li><li><a href="http://mysql.taobao.org/monthly/2015/10/04/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2015/10/04/</a></li></ul>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 学习笔记</title>
    <url>/2019/11/22/pgsql/PostgreSQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>PostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，在灵活的 BSD 许可证下发行。</p><a id="more"></a><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\d</span>           当前数据库的所有表</span><br><span class="line"><span class="string">\dt</span>          只显示匹配的表  </span><br><span class="line"><span class="string">\di</span>          只显示索引</span><br><span class="line"><span class="string">\ds</span>          只显示序列</span><br><span class="line"><span class="string">\dv</span>          只显示视图</span><br><span class="line"><span class="string">\df</span>          只显示函数</span><br><span class="line"><span class="string">\du</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\dg</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\encoding</span>    指定客户端的字符编码，如 <span class="string">\encoding</span> UTF8</span><br><span class="line"><span class="string">\x</span>           把表中的每一行的每列数据都拆分为单行展示, 与 MySQL 中的 <span class="string">"\G"</span> 的功能类似</span><br></pre></td></tr></table></figure><h5 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">psql -U postgres</span><br><span class="line">psql -h <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">5432</span> -U repuser -d postgres -W</span><br><span class="line">psql -U postgres -d test</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> env</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGDATABASE</span>=postgres</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGHOST</span>=192.168.0.1</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGPORT</span>=5432</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGUSER</span>=postgres</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">psql</span><br></pre></td></tr></table></figure><h5 id="Logout"><a href="#Logout" class="headerlink" title="Logout"></a>Logout</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\q</span></span><br></pre></td></tr></table></figure><h5 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h5 id="Use-Database"><a href="#Use-Database" class="headerlink" title="Use Database"></a>Use Database</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\c</span> postgres</span><br><span class="line"></span><br><span class="line"><span class="string">\c</span> test</span><br></pre></td></tr></table></figure><h5 id="Show-Tables"><a href="#Show-Tables" class="headerlink" title="Show Tables"></a>Show Tables</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\d</span></span><br><span class="line"></span><br><span class="line"><span class="string">\d</span> <span class="string">"Table1"</span></span><br></pre></td></tr></table></figure><h5 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create<span class="built_in"> user </span>repuser REPLICATION LOGIN<span class="built_in"> CONNECTION </span>LIMIT 2 ENCRYPTED PASSWORD <span class="string">'postgres'</span>;</span><br></pre></td></tr></table></figure><h5 id="Drop-User"><a href="#Drop-User" class="headerlink" title="Drop User"></a>Drop User</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">drop<span class="built_in"> user </span>repuser;</span><br></pre></td></tr></table></figure><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">pg_dump -U postgres test &gt; test.<span class="keyword">sql</span> </span><br><span class="line"></span><br><span class="line">pg_dump -U postgres -d test -s &gt; test.<span class="keyword">sql</span>    # -s, <span class="comment">--schema-only  dump only the schema, no data</span></span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> "Name", "Age" <span class="keyword">from</span> "Person" <span class="keyword">where</span> "Sex" = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> "Age" <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"> <span class="type">Name</span>|  Age</span><br><span class="line"> <span class="comment">----+-------</span></span><br><span class="line"> 张三 | <span class="number">20</span></span><br><span class="line"> 李四 | <span class="number">18</span></span><br><span class="line"> 王五 | <span class="number">16</span></span><br><span class="line">(<span class="number">3</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><h4 id="查看数据库、表、索引大小"><a href="#查看数据库、表、索引大小" class="headerlink" title="查看数据库、表、索引大小"></a>查看数据库、表、索引大小</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_database_size(<span class="string">'test'</span>));</span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_table_size(<span class="string">'test_table'</span>));   </span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_indexes_size(<span class="string">'test_index'</span>));</span><br></pre></td></tr></table></figure><h4 id="查询计划"><a href="#查询计划" class="headerlink" title="查询计划"></a>查询计划</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">analyze</span> <span class="keyword">select</span> <span class="string">"Name"</span>, <span class="string">"Age"</span> <span class="keyword">from</span> <span class="string">"Person"</span> <span class="keyword">where</span> <span class="string">"Sex"</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">"Age"</span>;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_age</span><br><span class="line">    <span class="keyword">ON</span> <span class="built_in">public</span>."Person" <span class="keyword">USING</span> btree</span><br><span class="line">    ("Age" <span class="keyword">COLLATE</span> pg_catalog."default")</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_name</span><br><span class="line">    <span class="keyword">ON</span> <span class="built_in">public</span>."Person" <span class="keyword">USING</span> btree</span><br><span class="line">    ("Name") <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><p>查看索引</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_indexes <span class="keyword">where</span> tablename=<span class="string">'Person'</span>;</span><br></pre></td></tr></table></figure><h4 id="vacuum"><a href="#vacuum" class="headerlink" title="vacuum"></a>vacuum</h4><p>vacuum 操作可以手动和自动。设置自动 vacuum 注意必须设置 <span style="color:red">track_counts = true </span>。具体的设置可以参照官方的文档。（8.3 版本以后）</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">vacuumdb</span> --<span class="comment">analyze</span> --<span class="comment">verbose</span> <span class="literal">-</span><span class="comment">f</span> --<span class="comment">dbname=test</span></span><br></pre></td></tr></table></figure><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ol><li>释放，再利用更新或者删除的行所占据的磁盘空间。</li><li>更新 PostgreSQL 查询计划中使用的统计数据。</li><li>防止因事务 ID 的重置而使非常老的数据丢失。</li></ol><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ol><li>PostgreSQL 数据的插入，更新，删除操作并不是真正放到数据库空间。如果不定期释放空间的话，由于数据太多，查询速度会巨降。</li><li>PostgreSQL 在做查询处理的时候，为了是查询速度提高，会根据统计数据来确定执行计划。如果不及时更新的话，查询的效果可能不如预期。</li><li>PostgreSQL 中每一个事务都会产生一个事务 ID，但这个数字是有上限的。当事务 ID 达到最大值后，会重新从最小值开始循环。这样如果不及时把以前的数据释放掉的话，原来的老数据会因为事务 ID 的丢失而丢失掉。</li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li></ul>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sanic 学习笔记（0.6.0）</title>
    <url>/2016/12/21/python/Sanic%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>Sanic is a Python 3.7+ web server and web framework that’s written to go fast. It allows the usage of the <strong>async/await</strong> syntax added in Python 3.5, which makes your code non-blocking and speedy.</p><a id="more"></a><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>下面是一个简单的例子，使用到如下库：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">sanic (<span class="name">sanic</span> is a flask-like python3.<span class="number">5</span>+ web server)</span><br><span class="line">peewee (<span class="name">simple</span> and small ORM)</span><br><span class="line">PyMySQL (<span class="name">mysql</span> database driver)</span><br><span class="line">marshmallow (<span class="name">serialize</span> and deserialize models)</span><br><span class="line">AoikLiveReload (<span class="name">automatic</span> reload app in development)</span><br></pre></td></tr></table></figure><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p><img src="/2016/12/21/python/Sanic%E5%88%9D%E8%AF%86/sanic_example_1.png" alt></p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">(sanic)</span> <span class="string">[blazehu@MacBook</span> <span class="string">~]$</span> <span class="string">python3</span> <span class="string">app.py</span></span><br><span class="line"><span class="number">2018</span><span class="number">-12</span><span class="number">-21</span> <span class="number">10</span><span class="string">:53:50</span> <span class="bullet">-</span> <span class="string">(sanic)[INFO]:</span> <span class="string">Goin'</span> <span class="string">Fast</span> <span class="string">@</span> <span class="string">http://0.0.0.0:8000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-12</span><span class="number">-21</span> <span class="number">10</span><span class="string">:53:50</span> <span class="bullet">-</span> <span class="string">(sanic)[INFO]:</span> <span class="string">Starting</span> <span class="string">worker</span> <span class="string">[44832]</span></span><br></pre></td></tr></table></figure><h5 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h5><p>create a new employee<br><img src="/2016/12/21/python/Sanic%E5%88%9D%E8%AF%86/sanic_example_2.png" alt><br>list employees<br><img src="/2016/12/21/python/Sanic%E5%88%9D%E8%AF%86/sanic_example_3.png" alt><br>logs</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">(sanic) [blazehu@MacBook ~]$ python3 app.py</span><br><span class="line">2018-12-21 10:53:50 - (sanic)[INFO]: Goin' Fast @ http://0.0.0.0:8000</span><br><span class="line">2018-12-21 10:53:50 - (sanic)[INFO]: Starting worker [44832]</span><br><span class="line">2018-12-21 10:59:54 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:55817</span>]: GET http://127.0.0.1:8000/employee/  200 267</span><br><span class="line">2018-12-21 11:00:03 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:55865</span>]: GET http://127.0.0.1:8000/employee/  200 267</span><br><span class="line">2018-12-21 11:01:05 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56135</span>]: GET http://127.0.0.1:8000/employee/  200 38</span><br><span class="line">2018-12-21 11:01:44 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56325</span>]: POST http://127.0.0.1:8000/employee/  200 28</span><br><span class="line">2018-12-21 11:02:38 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56562</span>]: GET http://127.0.0.1:8000/employee/  200 95</span><br></pre></td></tr></table></figure><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><h6 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> playhouse.pool <span class="keyword">import</span> MySQLDatabase</span><br><span class="line"><span class="keyword">from</span> playhouse.shortcuts <span class="keyword">import</span> RetryOperationalError</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetryMysqlDatabase</span><span class="params">(RetryOperationalError, MySQLDatabase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, database, **kwargs)</span>:</span></span><br><span class="line">        super(MySQLDatabase, self).__init__(database, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sequence_exists</span><span class="params">(self, seq)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = RetryMysqlDatabase(</span><br><span class="line">    database=config.DB_NAME, host=config.DB_HOST,</span><br><span class="line">    user=config.DB_USER, passwd=config.DB_PASSWORD, port=config.DB_PORT,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="string">"""A base model that will use our MySQL database"""</span></span><br><span class="line">    is_deleted = BooleanField(<span class="string">u'是否删除'</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        database = db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="comment"># base info</span></span><br><span class="line">    number = CharField(verbose_name=<span class="string">u'编号'</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    name = CharField(verbose_name=<span class="string">u'姓名'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    email = CharField(verbose_name=<span class="string">u'邮箱'</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="serialize-py"><a href="#serialize-py" class="headerlink" title="serialize.py"></a>serialize.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    <span class="comment"># 基本信息</span></span><br><span class="line">    number = fields.String()</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.Email()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_employee</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> models.Employee(**data)</span><br></pre></td></tr></table></figure><h6 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sanic.views <span class="keyword">import</span> HTTPMethodView</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Blueprint, response</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Employee</span><br><span class="line"><span class="keyword">import</span> serialize</span><br><span class="line"></span><br><span class="line">employee_bp = Blueprint(<span class="string">"employee_bp"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeView</span><span class="params">(HTTPMethodView)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        employees = Employee.select().where(Employee.is_deleted == <span class="number">0</span>)</span><br><span class="line">        schema = serialize.EmployeeSchema()</span><br><span class="line">        data = schema.dump(employees, many=<span class="literal">True</span>).data</span><br><span class="line">        <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">200</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"data"</span>: data&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = request[<span class="string">"POST"</span>]</span><br><span class="line">        employee_schema = serialize.EmployeeSchema()</span><br><span class="line">        _, error = employee_schema.load(data)</span><br><span class="line">        <span class="keyword">if</span> error:</span><br><span class="line">            msg = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> error_item <span class="keyword">in</span> error:</span><br><span class="line">                error_detail = error.get(error_item)</span><br><span class="line">                <span class="keyword">if</span> isinstance(error_detail, list):</span><br><span class="line">                    error_detail = <span class="string">','</span>.join(error_detail)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    error_detail = str(error_detail)</span><br><span class="line">                msg += <span class="string">"&#123;0&#125;: &#123;1&#125;"</span>.format(error_item, error_detail)</span><br><span class="line">            <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">500</span>, <span class="string">"msg"</span>: msg&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            number = data.get(<span class="string">"number"</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                Employee.get(Employee.number == number)</span><br><span class="line">                <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">500</span>, <span class="string">"msg"</span>: <span class="string">"the number is uniq"</span>&#125;)</span><br><span class="line">            <span class="keyword">except</span> Employee.DoesNotExist:</span><br><span class="line">                employee = Employee()</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> data:</span><br><span class="line">                    value = data.get(key)</span><br><span class="line">                    <span class="keyword">if</span> hasattr(employee, key):</span><br><span class="line">                        setattr(employee, key, value)</span><br><span class="line">                employee.save()</span><br><span class="line">        <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">201</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">employee_bp.add_route(EmployeeView.as_view(), <span class="string">"/"</span>)</span><br></pre></td></tr></table></figure><h6 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> aoiklivereload <span class="keyword">import</span> LiveReloader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> employee_bp</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> db, Employee</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.blueprint(employee_bp, url_prefix=<span class="string">'/employee'</span>)</span><br><span class="line">CORS(app, automatic_options=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware('request')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">transform_data_request</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request[<span class="string">'POST'</span>] = request.json <span class="keyword">if</span> request.json <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        request[<span class="string">'GET'</span>] = request.args <span class="keyword">if</span> request.args <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(repr(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware('response')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(request, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db.is_closed():</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># application config</span></span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># init the database</span></span><br><span class="line">db.create_tables([Employee, ], safe=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># reload the app</span></span><br><span class="line">    reloader = LiveReloader()</span><br><span class="line">    reloader.start_watcher_thread()</span><br><span class="line">    <span class="comment"># run server debug</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h6 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 关闭长连接</span></span><br><span class="line">KEEP_ALIVE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 关闭启动logo</span></span><br><span class="line">LOGO = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql Database for dev</span></span><br><span class="line">DB_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">DB_PORT = <span class="number">3306</span></span><br><span class="line">DB_NAME = <span class="string">'sanic'</span></span><br><span class="line">DB_USER = <span class="string">'root'</span></span><br><span class="line">DB_PASSWORD = <span class="string">'123456'</span></span><br></pre></td></tr></table></figure><h6 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h6><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># python <span class="number">3.7</span><span class="number">.2</span></span><br><span class="line">PyMySQL==<span class="number">0.7</span><span class="number">.11</span></span><br><span class="line">AoikLiveReload==<span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">peewee==<span class="number">2.8</span><span class="number">.5</span></span><br><span class="line">marshmallow==<span class="number">2.13</span><span class="number">.6</span></span><br><span class="line">sanic-crud==<span class="number">0.2</span><span class="number">.4</span></span><br><span class="line">Sanic-Cors==<span class="number">0.6</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">sanic==<span class="number">0.6</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h6 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dev, demo debug </span></span><br><span class="line">python3 app.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> deploy</span></span><br><span class="line">gunicorn app:app --bind 0.0.0.0:8000 --worker-class sanic.worker.GunicornWorker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Sanic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 列表推导式</title>
    <url>/2016/05/10/python/base/python%20%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>列表推导式即 List Comprehensions ，简单却强大。</p><h4 id="列表推导式的格式"><a href="#列表推导式的格式" class="headerlink" title="列表推导式的格式"></a>列表推导式的格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x <span class="keyword">for</span> item <span class="keyword">in</span> sequence &lt;<span class="keyword">if</span> (conditions)&gt;]  <span class="comment"># 这里的x是对 item进行的操作</span></span><br><span class="line">[表达式  <span class="keyword">for</span>  变量  <span class="keyword">in</span> 列表  <span class="keyword">if</span>  条件]         <span class="comment"># 列表推导式会比for循环快很多</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x &lt; <span class="number">2</span>]</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略条件语句</span></span><br><span class="line">In [<span class="number">2</span>]: [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义表达式和条件语句</span></span><br><span class="line">In [<span class="number">3</span>]: [(x, x**<span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="keyword">if</span> x % <span class="number">3</span>]</span><br><span class="line">Out[<span class="number">3</span>]: [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个 for 和多个 if </span></span><br><span class="line">In [<span class="number">4</span>]: [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> <span class="keyword">not</span> x % <span class="number">3</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> <span class="keyword">not</span> y % <span class="number">2</span>]</span><br><span class="line">Out[<span class="number">4</span>]: [(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">0</span>), (<span class="number">3</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表达式可以是函数</span></span><br><span class="line">In [<span class="number">7</span>]: [sum([x, y]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: [sum([x, y]) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])]</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017317609699776" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017317609699776</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 包裹传递和解包裹</title>
    <url>/2016/05/07/python/base/python%20%E5%8C%85%E8%A3%B9%E4%BC%A0%E9%80%92%E5%92%8C%E8%A7%A3%E5%8C%85%E8%A3%B9/</url>
    <content><![CDATA[<h4 id="包裹传递"><a href="#包裹传递" class="headerlink" title="包裹传递"></a>包裹传递</h4><p>在定义函数时，我们有时候并不知道调用的时候会传递多少个参数。 这时候，包裹 (packing) 位置参数，或者包裹关键字参数，来进行参数传递，会非常有用。</p><a id="more"></a><h5 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*name)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(type(name))</span><br><span class="line"><span class="meta">... </span>    print(name)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">func</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>)</span></span></span><br></pre></td></tr></table></figure><p>两次调用，尽管参数个数不同，都基于同一个 func 定义。在 func 的参数表中，所有的参数被 name 收集，根据位置合并成一个元组 (tuple) ，这就是包裹位置传递。<br>name 是包裹位置传递所用的元组名，在定义 func 时，在 name 前加 * 号。</p><h5 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(type(x))</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'a': 1, 'b': 2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'a': 1, 'b': 2, 'c': 3&#125;</span><br></pre></td></tr></table></figure><p>与上面一个例子类似， dict 是一个字典，收集所有的关键字，传递给函数 func 。参数 dict 是包裹关键字传递所用的字典，在 dict 前加 **。</p><h4 id="解包裹"><a href="#解包裹" class="headerlink" title="解包裹"></a>解包裹</h4><p>* 和 ** ，也可以在调用的时候使用，即解包裹 (unpacking) ，下面为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b ,c)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, b, c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*args)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(**kwargs)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><span style="color:red">包裹传递在定义函数时，元组前加 * 、字典前加 ** 。</span><br><span style="color:red">包裹和解包裹并不是相反操作，是两个相对独立的过程。</span></p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 动态类型</title>
    <url>/2016/05/08/python/base/python%20%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 的数据类型分为 mutable 和 immutable ， mutable 和 immutable 字面意思理解就是说数据可变和数据不可变。<br>mutable: list、dict<br>inmutable: int、 string、 float、 tuple…</p><a id="more"></a><h4 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h4><p>由于 Python 的变量 (variable) 不需要声明，而在赋值的时候，变量可以重新赋值为任意值，这就涉及到 Python 的一个重要的核心概念：<span style="color:red"> 动态类型 (dynamic typing) 。</span></p><h5 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h5><p>在这里重复强调一下在 Python 中一切皆对象，Python 是纯血统的面向对象的编程语言，与 java 不同。我们知道 Java 中有装箱和拆箱，基本数据类型 int 在持久化的过程中是需要封装为 Integer 的。</p><p>但是在 Python 中，一切皆对象。什么都是对象，包括你的代码，对象是存储在内存中的实体，我们在程序中使用的都是对象名，只是指向这个对象的一个引用 (reference)。</p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p><span style="color:red">引用和对象分离，是动态类型的核心，引用可以随时的指向一个新的对象。</span> 这不同于 C++ 中的指针和引用的概念，在 C++ 中指针在逻辑上是独立存在的，但是引用是和对象绑定在一起的。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'blazehu'</span></span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>第一行：在内存中建立了对象 ‘blazehu’(字符串类型)，通过赋值让引用 a 指向它。<br>第二行：2是在内存中存在的整数对象，将引用 a 指向2，于是 ‘blazehu’ 就没有引用指向它， Python 会自动的将这种没有引用指向的垃圾销毁掉，释放相应的内存空间。</p><h5 id="immutable（不可变数据类型）"><a href="#immutable（不可变数据类型）" class="headerlink" title="immutable（不可变数据类型）"></a>immutable（不可变数据类型）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(x)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这样类似于 C/C++ 中的值传递，即传递的引用不能改变自身，只是改变了引用的指向。</p><h5 id="mutable（可变数据类型）"><a href="#mutable（可变数据类型）" class="headerlink" title="mutable（可变数据类型）"></a>mutable（可变数据类型）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(x)</span><br><span class="line">[<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>这就类似于 C/C++ 中的指针传递，即传递的引用可以引用自身的元素改变自身，改变了引用的值。 但是元组 (tuple) ，尽管可以调用引用元素，但不可以赋值，因此不能改变对象自身，所以也算是 immutable object 。</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>对于较小的整数和短字符 Python 会缓存这些对象，而不是频繁的创建和销毁。<br><span style="color:red">256 is an existing object but 257 isn’t.</span> When you start up python the numbers from <span style="color:red">-5 to 256 </span>will be allocated. These numbers are used a lot, so it makes sense just to have them ready.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">256</span>)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">257</span>)</span><br><span class="line"><span class="number">140084850247312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">140084850247440</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">140084850247344</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><span style="color:red">对于 inmutable object 我们在函数参数传递是值传递</span><br><span style="color:red">对于 mutable object 我们在函数参数传递是指针传递</span></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://github.com/satwikkansal/wtfpython" target="_blank" rel="noopener">https://github.com/satwikkansal/wtfpython</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html" target="_blank" rel="noopener">https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 匿名函数</title>
    <url>/2016/05/20/python/base/python%20%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>有些时候我们只是为了定义一些简单的操作，显式地定义函数略显麻烦，这时候我们可以直接使用匿名函数。</p><a id="more"></a><h4 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h4><p><span style="color:red">lambda 表达式又称为匿名函数，通常和其他高阶函数配合使用。</span>匿名函数不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda &lt;参数&gt;: 函数体</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">f1 = <span class="keyword">lambda</span> x: x*<span class="number">2</span></span><br><span class="line">f2 = <span class="keyword">lambda</span> x, y: x * y</span><br><span class="line">f3 = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line">f4 = <span class="keyword">lambda</span> x: x%<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(f1(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">print(f2(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">print(f3(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">print(f4(<span class="number">4</span>), f4(<span class="number">7</span>))</span><br><span class="line"><span class="comment"># 0, 1</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 内置函数</title>
    <url>/2016/05/18/python/base/python%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 解释器内置了很多函数和类型，以便于我们使用。</p><a id="more"></a><table style="color:#0090c0"><tr><td colspan="5" style="text-align:center;font-weight:700;color:#000">内置函数</td></tr><tr><td>abs()</td><td>delattr()</td><td>hash()</td><td>memoryview()</td><td>set()</td></tr><tr><td>all()</td><td>dict()</td><td>help()</td><td>min()</td><td>setattr()</td></tr><tr><td>any()</td><td>dir()</td><td>hex()</td><td>next()</td><td>slice()</td></tr><tr><td>ascii()</td><td>divmod()</td><td>id()</td><td>object()</td><td>sorted()</td></tr><tr><td>bin()</td><td>enumerate()</td><td>input()</td><td>oct()</td><td>staticmethod()</td></tr><tr><td>bool()</td><td>eval()</td><td>int()</td><td>open()</td><td>str()</td></tr><tr><td>breakpoint()</td><td>exec()</td><td>isinstance()</td><td>ord()</td><td>sum()</td></tr><tr><td>bytearray()</td><td>filter()</td><td>issubclass()</td><td>pow()</td><td>super()</td></tr><tr><td>bytes()</td><td>float()</td><td>iter()</td><td>print()</td><td>tuple()</td></tr><tr><td>callable()</td><td>format()</td><td>len()</td><td>property()</td><td>type()</td></tr><tr><td>chr()</td><td>frozenset()</td><td>list()</td><td>range()</td><td>vars()</td></tr><tr><td>classmethod()</td><td>getattr()</td><td>locals()</td><td>repr()</td><td>zip()</td></tr><tr><td>compile()</td><td>globals()</td><td>map()</td><td>reversed()</td><td>__import__()</td></tr><tr><td>complex()</td><td>hasattr()</td><td>max()</td><td>round()</td><td></td></tr></table><h4 id="常用函数介绍"><a href="#常用函数介绍" class="headerlink" title="常用函数介绍"></a>常用函数介绍</h4><h5 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h5><h6 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h6><p>返回一个数的绝对值。实参可以是整数或浮点数。如果实参是一个复数，返回它的模。</p><h6 id="pow"><a href="#pow" class="headerlink" title="pow()"></a>pow()</h6><p>pow() 方法返回 xy（x的y次方） 的值。</p><h6 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h6><p>min() 方法返回给定参数的最小值，参数可以为序列。</p><h6 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h6><p>max() 方法返回给定参数的最大值，参数可以为序列。</p><h6 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h6><p>sum() 方法对系列进行求和计算。</p><h5 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h5><h6 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h6><p>getattr() 函数用于返回一个对象属性值。</p><h6 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr()"></a>hasattr()</h6><p>hasattr() 函数用于判断对象是否包含对应的属性。</p><h6 id="setattr"><a href="#setattr" class="headerlink" title="setattr()"></a>setattr()</h6><p>setattr() 函数对应函数 getattr()，用于设置属性值，该属性不一定是存在的。</p><h6 id="delattr"><a href="#delattr" class="headerlink" title="delattr()"></a>delattr()</h6><p>delattr 函数用于删除属性。delattr(x, ‘foobar’) 相等于 del x.foobar。</p><h5 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h5><h6 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h6><p>chr() 用一个整数作参数，返回一个对应的字符。</p><h6 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h6><p>ord() 函数是 chr() 函数（对于 8 位的 ASCII 字符串）的配对函数，它以一个字符串（Unicode 字符）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值。</p><h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><h6 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h6><p>sorted() 函数对所有可迭代的对象进行排序操作。</p><h6 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h6><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><h6 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h6><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><h5 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h5><h6 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h6><p>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><h6 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h6><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><h6 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h6><p>id() 函数返回对象的唯一标识符，标识符是一个整数。</p><h6 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h6><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.python.org/zh-cn/3.7/library/functions.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.7/library/functions.html</a></li><li><a href="https://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-built-in-functions.html</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 第三方模块</title>
    <url>/2016/05/01/python/base/python%20%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h4><p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。Mac 或 Linux 预安装了 pip 和 Python。</p><a id="more"></a><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><h6 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 pika 模块</span></span><br><span class="line"><span class="attr">easy_install</span> <span class="string">pika</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install pika</span></span><br></pre></td></tr></table></figure><h6 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h6><p>Linux 上如果没有安装 pip 工具的话可以在官网上下载 pip 的源码包安装。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">tar -zxvf <span class="module-access"><span class="module"><span class="identifier">XXXX</span>.</span></span>tar.gz (<span class="keyword">or</span> tar jxvf <span class="module-access"><span class="module"><span class="identifier">XXXX</span>.</span></span>tar.bz2)  </span><br><span class="line">cd XXXX</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><span style="color:red">如果 Windows 提示未找到命令，需要配置环境变量。</span>即将 C:\Python27\Scripts 配置到 path 里。然后在 cmd 命令行使用 pip 或者 easy_install 命令安装需要的模块。</p><h6 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h6><p>在官网上下载对应版本的 module 模块，直接安装。</p><h6 id="pip-安装-1"><a href="#pip-安装-1" class="headerlink" title="pip 安装"></a>pip 安装</h6><h6 id="easy-install-安装"><a href="#easy-install-安装" class="headerlink" title="easy_install 安装"></a>easy_install 安装</h6><h4 id="第三方模块安装路径"><a href="#第三方模块安装路径" class="headerlink" title="第三方模块安装路径"></a>第三方模块安装路径</h4><p>Python 默认将三方模块安装到 site-packages ，但是如果使用 Debian 软件管理器安装，模块将被安装到 dist-packages 。</p><h5 id="查看第三方模块安装路径"><a href="#查看第三方模块安装路径" class="headerlink" title="查看第三方模块安装路径"></a>查看第三方模块安装路径</h5><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.sysconfig <span class="keyword">import</span> get_python_lib</span><br><span class="line"><span class="built_in">print</span> (get_python_lib())</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/kevin922/p/3161411.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevin922/p/3161411.html</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 执行系统命令</title>
    <url>/2016/05/02/python/base/python%20%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 执行系统命令有很多种方法，下面给出了常见的四种方式。</p><a id="more"></a><h4 id="os-system"><a href="#os-system" class="headerlink" title="os.system"></a>os.system</h4><p>os.system 直接调用标准 C 的 system() 函数，仅仅在一个子终端运行系统命令，而不能获取命令执行后的返回信息，返回脚本的退出状态码。</p><h5 id="用于测试的-shell-脚本-test-sh"><a href="#用于测试的-shell-脚本-test-sh" class="headerlink" title="用于测试的 shell 脚本 test.sh"></a>用于测试的 shell 脚本 test.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "Hello World!!!"</span><br><span class="line">exit 3</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status = os.system(<span class="string">"bash test.sh"</span>)</span><br><span class="line">Hello World!!!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status</span><br><span class="line"><span class="number">768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status &gt;&gt; <span class="number">8</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>该方法在调用完 shell 脚本后，返回一个16位的二进制数，<span style="color:red">低位为杀死所调用脚本的信号号码，高位为脚本的退出状态码。</span> 返回的结果都是0（使用位运算向右位移8位得到的结果就是高位值），代表代码正常退出。我们如果需要的到脚本执行后返回的状态码，可以使用位运算得到。</p><h4 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a>os.popen</h4><p>这种调用方法是通过管道的方式来实现的，函数返回一个 file-like 的对象，里面的内容是脚本输出的内容（可以简单的理解为 echo 的输出内容）。</p><h5 id="用于测试的-shell-脚本-test-sh-1"><a href="#用于测试的-shell-脚本-test-sh-1" class="headerlink" title="用于测试的 shell 脚本 test.sh"></a>用于测试的 shell 脚本 test.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "Hello World!!!"</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = os.popen(<span class="string">"bash test.sh"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output</span><br><span class="line">&lt;open file <span class="string">'bash test.sh'</span>, mode <span class="string">'r'</span> at <span class="number">0x1031bd780</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output.read()</span><br><span class="line"><span class="string">'Hello World!!!\n'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="commands-模块"><a href="#commands-模块" class="headerlink" title="commands 模块"></a>commands 模块</h4><p><strong>1. getstatusoutput(cmd)</strong><br>使用 os.popen() 执行命令 cmd ，然后返回两个元素的元组（status, result）。<span style="color:red">执行方式： { cmd; } 2&gt;&amp;1 ，返回结果里包含标准输出和标准错误。</span></p><p><strong>2. getoutput(cmd)</strong><br>只返回执行的结果，忽略状态码。</p><p><strong>3. getstatus(file)</strong><br>返回 ls -ld file 执行的结果</p><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status, output = commands.getstatusoutput(<span class="string">"bash test.sh"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status</span><br><span class="line"><span class="number">768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output</span><br><span class="line"><span class="string">'Hello World!!!'</span></span><br></pre></td></tr></table></figure><h4 id="subprocess-模块"><a href="#subprocess-模块" class="headerlink" title="subprocess 模块"></a>subprocess 模块</h4><p>功能强大的子进程管理模块。</p><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">"bash test.sh"</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stdout.read()</span><br><span class="line"><span class="string">'Hello World!!!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stderr.read()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 正则表达式</title>
    <url>/2016/05/12/python/base/python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它 “匹配” 了，否则，该字符串就是不合法的。</p><h4 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h4><p>Python 自1.5版本起增加了 re 模块，它提供 Perl 风格的正则表达式模式。 re 模块使 Python 语言拥有全部的正则表达式功能。</p><a id="more"></a><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>可以匹配任意单个字符除了 \n</td></tr><tr><td>*</td><td>匹配前一个字符0次或者n次</td></tr><tr><td>?</td><td>匹配前一个字符0次或者1次</td></tr><tr><td>^</td><td>表示匹配的字符必须在最前面</td></tr><tr><td>$</td><td>表示匹配的字符必须在最后面</td></tr><tr><td>+</td><td>表示匹配前一个字符1次或者n次</td></tr><tr><td>\d+</td><td>匹配数字</td></tr><tr><td>\d</td><td>匹配单个数字</td></tr><tr><td>.*</td><td>贪心算法，提取最多的内容</td></tr><tr><td>.*?</td><td>非贪心算法，提取内容</td></tr><tr><td>x|y</td><td>表示匹配 x or y</td></tr><tr><td>[abc]</td><td>表示匹配 abc 当中的任意一个字符，可以使用连接符- ：例如 [a-z]</td></tr><tr><td>[^abc]</td><td>表示匹配除了列出字符以外的所有字符，是[abc]的补集</td></tr><tr><td>{n}</td><td>表示匹配前面n个字符</td></tr><tr><td>{n,}</td><td>表示匹配至少n个前面的字符</td></tr><tr><td>{n, m}</td><td>表示匹配至少n个最多m个前面的字符</td></tr></tbody></table><p>使用括号的话，括号内的是返回的结果。</p><h5 id="re-函数"><a href="#re-函数" class="headerlink" title="re 函数"></a>re 函数</h5><p>re.S : 正则匹配的时候包括 \n<br>findall() : 返回匹配的所有结果列表<br>search() : 返回匹配到的第一个结果<br>sub() ： 替换匹配的结果<br>compile() ： 把正则表达式编译为正则表达式对象</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">secret_code = <span class="string">'hadkfalifexxIxxasdasdaxxsdasdxxasadasdaxxsdaxxs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . 的使用举例</span></span><br><span class="line">a = <span class="string">'xz123'</span></span><br><span class="line">b = re.findall(<span class="string">'x.'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前一个字符0次或无限次</span></span><br><span class="line"><span class="comment"># * 的使用举例</span></span><br><span class="line">a = <span class="string">'xyxy123'</span></span><br><span class="line">b = re.findall(<span class="string">'x*'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前一个字符0次或者1次</span></span><br><span class="line"><span class="comment"># ? 的使用举例</span></span><br><span class="line">a = <span class="string">'xyx123'</span></span><br><span class="line">b = re.findall(<span class="string">'x?'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合方式</span></span><br><span class="line"><span class="comment"># .* 贪心算法，提取最多的内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx.*xx'</span>, secret_code)</span><br><span class="line"><span class="comment"># .*? 非贪心算法，提取内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx.*?xx'</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用括号和不适用括号的区别</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*)xx'</span>, secret_code)</span><br><span class="line"><span class="comment"># .*? 非贪心算法，提取内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># re.S 的作用是使 find 包括 \n</span></span><br><span class="line">secret_code = <span class="string">'''hadkfalifexxIxxasdasdaxxs</span></span><br><span class="line"><span class="string">dasdxxasadasdaxxsdaxxs'''</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code, re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 findall 和 search 的区别</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line">b = re.search(<span class="string">'xx(.*?)xx(.*?)xx'</span>, secret_code).group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub 的使用举例</span></span><br><span class="line"><span class="comment">#替换</span></span><br><span class="line">b = re.sub(<span class="string">'xx(.*?)xx(.*?)xx'</span>, <span class="string">"123%d123"</span>, secret_code)</span><br><span class="line">b = re.sub(<span class="string">'xx(.*?)xx(.*?)xx'</span>, <span class="string">"123%d123"</span> % <span class="number">789</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile 的用法</span></span><br><span class="line">pattern = <span class="string">'xx(.*?)xx'</span></span><br><span class="line">new_pattern = re.compile(pattern, re.S)</span><br><span class="line">b = re.findall(new_pattern, secret_code)</span><br><span class="line"><span class="comment"># ['I', 's\ndasd', 'sda']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配数字( \d+ 匹配数字连续的依旧连续, \d 匹配数字分成一个一个数字)</span></span><br><span class="line">a = <span class="string">'asdasd123123vvvdsdfsd76989aowoie'</span></span><br><span class="line">b = re.findall(<span class="string">'(\d+)'</span>, a)</span><br><span class="line"><span class="comment"># ['123123', '76989']</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 高阶函数</title>
    <url>/2016/05/21/python/base/python%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>高阶函数是一种将函数作为参数，或者把函数作为结果返回的函数。map 、 reduce 、 filter 、 sorted 就是高阶函数的典型例子。</p><a id="more"></a><h4 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h4><p><span style="color:red">map 函数的作用是将一个列表映射到另一个列表。</span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map(function, sequence)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>] + t[<span class="number">1</span>] + t[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x, x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">s2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s3 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(map(function1, s1))</span><br><span class="line"><span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line">print(map(function2, s1, s2))</span><br><span class="line"><span class="comment"># [2, 6, 12, 20]</span></span><br><span class="line"></span><br><span class="line">print(map(function3, zip(s1, s2, s3)))</span><br><span class="line"><span class="comment"># [6, 9, 12, 15]</span></span><br><span class="line"></span><br><span class="line">print(map(function4, s1))</span><br><span class="line"><span class="comment"># [(1, 1), (2, 4), (3, 9), (4, 16)]</span></span><br></pre></td></tr></table></figure><p>上面的四个函数，根据参数的个数，参数的类型，返回值的个数，返回值的类型来测试map函数。</p><h4 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce 函数"></a>reduce 函数</h4><p><span style="color:red">reduce 的作用是将一个列表归纳为一个输出。</span></p><p>有三个参数分别是 fucntion 、 sequence 、 startValue 。function 必须是带有两个参数的函数。startValue 可以不设置，初始化值，如果不设置那么初始化运算使用 sequence 的 s[0] 和 s[1] 进行运算，设置则是startValue 和 s[0] 运算，然后依次计算 fucntion(s[1], s[2]) ……</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reduce(function, sequence, startValue)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>] + t[<span class="number">1</span>] + t[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x, x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">s2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s3 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(reduce(function2, s1))</span><br><span class="line"><span class="comment"># 24</span></span><br><span class="line"></span><br><span class="line">print(reduce(function2, s1, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 48</span></span><br></pre></td></tr></table></figure><h4 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter 函数"></a>filter 函数</h4><p><span style="color:red">filter 函数是过滤掉列表中的一些元素。</span></p><p>这里要注意的是 filter 通过函数的返回的 bool 值来判断是否过滤，最好设置为 true or false。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function5</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">print(filter(function5, s1))</span><br><span class="line"><span class="comment"># [1, 3]</span></span><br></pre></td></tr></table></figure><h4 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted 函数"></a>sorted 函数</h4><p><span style="color:red">接收一个 key 函数来实现自定义的排序。</span></p><h5 id="普通排序"><a href="#普通排序" class="headerlink" title="普通排序"></a>普通排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sorted(iterable, key=None, reverse=False)  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><h5 id="绝对值排序"><a href="#绝对值排序" class="headerlink" title="绝对值排序"></a>绝对值排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400</a></li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Rundeck 简介</title>
    <url>/2019/05/21/ops/Rundeck%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Rundeck 是一个基于 Java 和 Grails 的开源的运维自动化工具，提供了 Web 管理界面进行操作，同时提供命令行工具和 WebAPI 的访问控制方式。Rundeck 能够帮助开发和运维人员更好地管理各个节点。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装方式比较多，这里使用 war 包来简单介绍安装的步骤。<br>官方下载地址： <a href="https://docs.rundeck.com/downloads.html" target="_blank" rel="noopener">https://docs.rundeck.com/downloads.html</a><br>官方文档地址： <a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/</a></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>官方下载地址下载： rundeck-3.0.7-20181008.war</p><h5 id="检查依赖"><a href="#检查依赖" class="headerlink" title="检查依赖"></a>检查依赖</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择版本</span></span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>启动时会在当前路径初始化一些 rundeck 目录。如果报错可能是 java 版本的问题，可以重新选择 java 版本。</p><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:$HOME/bin:/root/rundeck/server/sbin</span><br><span class="line">export RDECK_BASE=/root/rundeck</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>修改 linux 服务器的环境变量，将 rundeckd 的路径添加到 PATH 里。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rundeckd status</span><br></pre></td></tr></table></figure><h5 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h5><p>修改登陆密码：<br>server/config/realm.properties</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># The format is</span></span><br><span class="line"><span class="meta">#  &lt;username&gt;: &lt;password&gt;[,&lt;rolename&gt; ...]</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># Passwords may be clear text, obfuscated or checksummed.  The class</span></span><br><span class="line"><span class="meta"># org.mortbay.util.Password should be used to generate obfuscated</span></span><br><span class="line"><span class="meta"># passwords or password checksums</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># This sets the temporary user accounts for the Rundeck app</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">admin:admin,user,admin</span><br></pre></td></tr></table></figure><p>修改默认端口和访问地址：<br>server/config/rundeck-config.properties</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">server.address=<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">grails.serverURL=http:<span class="comment">//192.168.1.2</span></span><br></pre></td></tr></table></figure><p>etc/framework.properties</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Server connection information</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">framework.server.name</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.hostname</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.port</span>=<span class="number">80</span></span><br><span class="line"><span class="attr">framework.server.url</span>=http://<span class="number">192.168</span>.<span class="number">1.2</span></span><br></pre></td></tr></table></figure><p>修改 dataSource 为 mysql：<br>server/config/rundeck-config.properties</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSource.dbCreate</span>=update</span><br><span class="line"><span class="attr">dataSource.url</span>=jdbc:mysql://<span class="number">192.168</span>.<span class="number">1.2</span>/rundeck?autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">dataSource.username</span>=root</span><br><span class="line"><span class="attr">dataSource.password</span>=password</span><br><span class="line"><span class="attr">dataSource.driverClassName</span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>修改邮件配置：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">grails.mail.default.from</span>=viease@foxmail.com</span><br><span class="line"><span class="attr">grails.mail.host</span>=</span><br><span class="line"><span class="attr">grails.mail.port</span>=<span class="number">25</span></span><br><span class="line"><span class="attr">grails.mail.username</span>=</span><br><span class="line"><span class="attr">grails.mail.password</span>=</span><br></pre></td></tr></table></figure><p>修改 Project Nodes 配置：<br>projects/<project>/etc</project></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.name</span>=</span><br><span class="line"><span class="attr">project.description</span>=</span><br><span class="line"><span class="attr">project.jobs.gui.groupExpandLevel</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">project.ssh-authentication</span>=privateKey</span><br><span class="line"><span class="attr">project.ssh-keypath</span>=/root/.ssh/id_rsa</span><br><span class="line"><span class="attr">project.ssh-command-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.ssh-connect-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.nodeCache.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">project.nodeCache.delay</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">service.NodeExecutor.default.provider</span>=jsch-ssh</span><br><span class="line"><span class="attr">service.FileCopier.default.provider</span>=jsch-scp</span><br><span class="line"><span class="comment"># node 配置文件为本地文件</span></span><br><span class="line"><span class="attr">resources.source.1.type</span>=file</span><br><span class="line"><span class="attr">resources.source.1.config.includeServerNode</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.requireFileExists</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">resources.source.1.config.generateFileAutomatically</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.format</span>=resourcexml</span><br><span class="line"><span class="attr">resources.source.1.config.file</span>=/root/rundeck/projects/&lt;project&gt;/etc/resources.xml</span><br><span class="line"><span class="comment"># node 配置文件为 url</span></span><br><span class="line"><span class="attr">resources.source.2.type</span>=url</span><br><span class="line"><span class="attr">resources.source.2.config.url</span>=http\://localhost\:<span class="number">9998</span>/rundeck_nodes</span><br></pre></td></tr></table></figure><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p>新建一个新的目录 rundeck，将 war 包放在目录内然后运行如下命令启动服务。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">java -jar rundeck<span class="number">-3.0</span><span class="number">.7</span><span class="number">-20181008.</span>war</span><br></pre></td></tr></table></figure><p>也可以使用提供的 rundeckd 来管理</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment"># rundeckd -h</span></span><br><span class="line">Usage: /root/rundeck/server/sbin/rundeckd &#123;start|<span class="string">stop</span>|<span class="string">restart</span>|<span class="string">condrestart</span>|<span class="string">status&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h4><p>Rundeck 可以很方便的备份项目的配置信息，在 Project Settings 里提供导入（Import Archive）导出（Export Archive）项目配置的能力。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方文档提供详细的文档：<a href="https://docs.rundeck.com/docs/manual/03-getting-started.html" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/03-getting-started.html</a></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/</a></li></ul>]]></content>
      <tags>
        <tag>Rundeck</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible 学习笔记（1.9）</title>
    <url>/2016/10/10/ops/ansible/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Ansible 是基于python开发的，对于客户端的要求是需要有SSH和Python(如果python版本过低则 需要安装python-simplejson module)。</p><a id="more"></a><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>定义配置⽂件，配置⽂文件可以从多个地⽅方加载，其优先级顺序为:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>ANSIBLE_CONFIG (环境变量量) </span><br><span class="line"><span class="bullet">- </span>ansible.cfg (当前⽬目录)</span><br><span class="line"><span class="bullet">- </span>.ansible.cfg (home⽬目录)</span><br><span class="line"><span class="bullet">- </span>/etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p>参考: <a href="http://docs.ansible.com/ansible/intro_configuration.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/intro_configuration.html</a></p><h4 id="ansible命令"><a href="#ansible命令" class="headerlink" title="ansible命令"></a>ansible命令</h4><p>ansible 执⾏行行简单的临时命令 (ad-hoc命令)<br>ansible-playbook 执⾏行行playbook，playbook是yaml⽂文件<br>ansible-doc 查询ansible module ⽂文档</p><h5 id="ad-hoc命令"><a href="#ad-hoc命令" class="headerlink" title="ad-hoc命令"></a>ad-hoc命令</h5><p><img src="/2016/10/10/ops/ansible/ansible_1.png" alt></p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">参数:</span><br><span class="line">-i 指定hosts⽂文件的位置，hosts是yaml⽂文件，all表示hosts⽂文件中的所有的组</span><br><span class="line">-m 指定ansible的<span class="keyword">module</span>，这⾥里里的<span class="keyword">command</span>表示ansible的<span class="keyword">command</span>模块，还有很多其他的模块例例如shell -a 指定args参数</span><br><span class="line">-u 指定⽤用户(因为这⾥里里是基于<span class="type">SSH</span>认证的)</span><br></pre></td></tr></table></figure><h5 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h5><p><img src="/2016/10/10/ops/ansible/ansible_2.png" alt></p><p><strong>执行结果如下：</strong></p><p><img src="/2016/10/10/ops/ansible/ansible_3.png" alt></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># test.yml 文件中 </span></span><br><span class="line"><span class="symbol">hosts:</span> 指定设备组 </span><br><span class="line"><span class="symbol">user:</span> 指定ssh⽤用户 </span><br><span class="line"><span class="symbol">tasks:</span> 关键词指明执⾏行行动作 </span><br><span class="line"><span class="symbol">name:</span> 给动作命名 </span><br><span class="line"><span class="symbol">yum:</span> ansible指定模块</span><br></pre></td></tr></table></figure><h5 id="role"><a href="#role" class="headerlink" title="role"></a>role</h5><p>使⽤用roles可以更更好的组织框架，如下:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">roles</span></span><br><span class="line">│   ├── <span class="selector-tag">copy</span></span><br><span class="line">│   │   └── <span class="selector-tag">tasks</span></span><br><span class="line">│   │       └── <span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br><span class="line">│   └── <span class="selector-tag">dmcrypt</span></span><br><span class="line">│       └── <span class="selector-tag">tasks</span></span><br><span class="line">│           └── <span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br><span class="line">└── <span class="selector-tag">site</span><span class="selector-class">.yml</span></span><br><span class="line"></span><br><span class="line">5 <span class="selector-tag">directories</span>, 3 <span class="selector-tag">files</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">site</span><span class="selector-class">.yml</span>⽂件是⼊口 </span><br><span class="line"><span class="selector-tag">tasks</span>下⽂件名必须为<span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><p>role下有很多结构，ansible会⾃自动按照⽂文件结构进⾏行行加载解析。具体⽬目录结构如下:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── defaults</span><br><span class="line">├── files</span><br><span class="line">├── handlers</span><br><span class="line">├── meta</span><br><span class="line">├── tasks</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br></pre></td></tr></table></figure><p><img src="/2016/10/10/ops/ansible/ansible_4.png" alt></p><h5 id="python调用ansible模块"><a href="#python调用ansible模块" class="headerlink" title="python调用ansible模块"></a>python调用ansible模块</h5><h6 id="ansible-runner模块"><a href="#ansible-runner模块" class="headerlink" title="ansible.runner模块"></a>ansible.runner模块</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ansible.runner</span><br><span class="line"></span><br><span class="line">r = ansible.runner.Runner(</span><br><span class="line">    host_list=<span class="string">"/etc/ansible/hosts"</span>,</span><br><span class="line">    module_name=<span class="string">"command"</span>,</span><br><span class="line">    module_args=<span class="string">"ls"</span>,</span><br><span class="line">    forks=<span class="number">10</span>,</span><br><span class="line">    pattern=<span class="string">"cmdb"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res = r.run()</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h6 id="ansible-playbook模块"><a href="#ansible-playbook模块" class="headerlink" title="ansible.playbook模块"></a>ansible.playbook模块</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ansible.playbook</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">example_host = ansible.inventory.host.Host(name=<span class="string">'10.204.186.92'</span>, port=<span class="number">22</span>)</span><br><span class="line">example_group = ansible.inventory.group.Group(name=<span class="string">'simple_group_name'</span>)</span><br><span class="line">example_group.add_host(example_host)</span><br><span class="line">example_inventory = ansible.inventory.Inventory()</span><br><span class="line">example_inventory.add_group(example_group)</span><br><span class="line"></span><br><span class="line">stats = callbacks.AggregateStats()</span><br><span class="line">playbook_cb = = callbacks.PlaybookCallbacks(verbose=<span class="number">1</span>)</span><br><span class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=<span class="number">1</span>)</span><br><span class="line">vars = &#123;<span class="string">'ID'</span>: <span class="number">39</span>&#125;</span><br><span class="line"></span><br><span class="line">pb = ansible.playbook.PlayBook(</span><br><span class="line">    playbook=<span class="string">'playbook.yml'</span>,</span><br><span class="line">    stats=stats,</span><br><span class="line">    callbacks=playbook_cb,</span><br><span class="line">    runner_callbacks=runner_cb,</span><br><span class="line">    inventory=example_inventory,</span><br><span class="line">    subset=<span class="string">'simple_group_name'</span>,</span><br><span class="line">    extra_vars=vars</span><br><span class="line">)</span><br><span class="line">res = pb.run()</span><br></pre></td></tr></table></figure><p>具体可以查看ansible的源码</p><h6 id="yaml模块"><a href="#yaml模块" class="headerlink" title="yaml模块"></a>yaml模块</h6><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import yaml</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">'C:/Users/sks/Desktop/project/test/1.yml'</span>, <span class="string">'r'</span>)</span><br><span class="line">str_1 = f.<span class="built_in">read</span>()</span><br><span class="line">str_2 = yaml.<span class="built_in">load</span>(str_1)</span><br><span class="line">f.<span class="built_in">close</span>()</span><br><span class="line">str_3 = yaml.<span class="built_in">dump</span>(str_2)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">'C:/Users/sks/Desktop/project/test/2.yml'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.<span class="built_in">write</span>(str_3)</span><br><span class="line">f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ctrl+z、d、c的区别</title>
    <url>/2015/06/19/ops/linux_learn_1/</url>
    <content><![CDATA[<h4 id="ctrl-z、d、c的区别"><a href="#ctrl-z、d、c的区别" class="headerlink" title="ctrl+z、d、c的区别"></a>ctrl+z、d、c的区别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。</span><br><span class="line">ctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程。</span><br><span class="line">ctrl<span class="_">-d</span> 不是发送信号，而是表示一个特殊的二进制值，表示 EOF。</span><br><span class="line">ctrl-\ 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Key-Function"><a href="#Key-Function" class="headerlink" title="Key Function"></a>Key Function</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Ctrl-c <span class="keyword">Kill</span> foreground process</span><br><span class="line">Ctrl-z <span class="keyword">Suspend</span> foreground process</span><br><span class="line">Ctrl-d Terminate <span class="keyword">input</span>, <span class="keyword">or</span> <span class="keyword">exit</span> shell</span><br><span class="line">Ctrl-s <span class="keyword">Suspend</span> <span class="keyword">output</span></span><br><span class="line">Ctrl-q <span class="keyword">Resume</span> <span class="keyword">output</span></span><br><span class="line">Ctrl-o Discard <span class="keyword">output</span> </span><br><span class="line">Ctrl-l <span class="keyword">Clear</span> screen  ( <span class="keyword">clear</span>命令 ) 清屏</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>进入 python ctrl+z 挂起 python<br><img src="/2015/06/19/ops/linux_learn_1/1.png" alt></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bg</span> 查看后台挂起的服务  </span><br><span class="line"><span class="built_in">fg</span> 回复挂起的服务</span><br></pre></td></tr></table></figure><p><img src="/2015/06/19/ops/linux_learn_1/2.png" alt></p><p>ctrl+d 输入EOF退出 python<br><img src="/2015/06/19/ops/linux_learn_1/3.png" alt></p>]]></content>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘加密（dm-crypt）</title>
    <url>/2015/08/10/ops/dm-crypt/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>　　dm-crypt是建立在2.6版本内核的device-mapper特性之上的。 device-mapper是设计用来为在实际的块设备之上添加虚拟层提供一种通用灵活的方法，以方便开发人员实现镜像、快照、级联和加密等处理。dm-crypt使用了内核密码应用编程接口实现了透明的加密，并且兼容cryptloop系统。</p><a id="more"></a><h4 id="初始化安装脚本"><a href="#初始化安装脚本" class="headerlink" title="初始化安装脚本"></a>初始化安装脚本</h4><p><span style="color:red">(注： 初始化加密磁盘的时候需要建立回送磁盘映像，在这里我们自己分配我们所需的大小下脚本是100M)</span><br><img src="/2015/08/10/ops/dm-crypt/jiami1.png" alt></p><h4 id="重新挂载脚本"><a href="#重新挂载脚本" class="headerlink" title="重新挂载脚本"></a>重新挂载脚本</h4><p><span style="color:red">（注：这里需要注意的是如果重新创建逻辑卷的时候密码输入不正确的话，那么生成的逻辑卷将是新的逻辑卷需要重新建立文件系统，加密映像内文件不可见）</span><br><img src="/2015/08/10/ops/dm-crypt/jiami2.png" alt></p><h4 id="磁盘卸载脚本"><a href="#磁盘卸载脚本" class="headerlink" title="磁盘卸载脚本"></a>磁盘卸载脚本</h4><p><img src="/2015/08/10/ops/dm-crypt/jiami3.png" alt></p><h4 id="脚本指令的详解"><a href="#脚本指令的详解" class="headerlink" title="脚本指令的详解"></a>脚本指令的详解</h4><p><img src="/2015/08/10/ops/dm-crypt/jiami4.png" alt><br><img src="/2015/08/10/ops/dm-crypt/jiami5.png" alt></p><h4 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h4><p>由于使用cryptsetup 创建的逻辑卷重启之后就会消失，所以在/etc/fstab下添加自动挂载没有用。我们在/etc/fstab 文件中添加<span style="color:red"> /dev/mapper/deploy /home/prod/deploy ext3 defaults 1 2 </span>（系统启动时将会自动的挂载 /etc/fstab 下的所有分区）<br><img src="/2015/08/10/ops/dm-crypt/jiami6.png" alt><br><span style="color:red">添加完成后执行命令：mount -a ，系统将会挂载fstab文件下的所有选项</span></p><h4 id="编写脚本自动挂载"><a href="#编写脚本自动挂载" class="headerlink" title="编写脚本自动挂载"></a>编写脚本自动挂载</h4><p>修改remount脚本 ，添加自动输入密码，密文存放在.cry文件中，经过openssl解密之后 传给 创建逻辑卷的命令<br><img src="/2015/08/10/ops/dm-crypt/jiami7.png" alt><br>完成之后，对shell脚本进行加密，使用SHC 将shell脚本转化为二进制文件，<span style="color:red">但是使用SHC加密shell脚本的缺点是可以在ps上看到进程。</span></p>]]></content>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>shell中的反引号，单引号，双引号</title>
    <url>/2015/06/21/ops/linux_learn_2/</url>
    <content><![CDATA[<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">反引号位 (`) 位于键盘的Tab键的上方、<span class="number">1</span>键的左方。</span><br><span class="line">反引号在Linux中起着<span class="string">"命令替换"</span>的作用。</span><br><span class="line">命令替换是指<span class="keyword">shell</span><span class="bash">能够将一个命令的标准输出插在一个命令行中任何位置。</span></span><br><span class="line">如下，<span class="keyword">shell</span><span class="bash">会执行反引号中的date命令，把结果插入到<span class="built_in">echo</span>命令显示的内容中。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/2015/06/21/ops/linux_learn_2/1.png" alt></p><h4 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h4><p>单引号、双引号用于<span style="color:red">用户把带有空格的字符串赋值给变量事的分界符。</span><br><img src="/2015/06/21/ops/linux_learn_2/2.png" alt></p><p><img src="/2015/06/21/ops/linux_learn_2/3.png" alt></p><p>如果没有单引号或双引号，shell会把空格后的字符串解释为命令。<br><img src="/2015/06/21/ops/linux_learn_2/4.png" alt></p><h4 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h4><p>单引号告诉shell忽略所有特殊字符<br><img src="/2015/06/21/ops/linux_learn_2/5.png" alt></p><p>双引号忽略大多数，但不包括<span style="color:red"> $、\、`</span><br><img src="/2015/06/21/ops/linux_learn_2/6.png" alt></p>]]></content>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘挂载（aws）</title>
    <url>/2015/08/15/ops/mount_disk/</url>
    <content><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>在AWS上新建一块磁盘，需要选择分区，大小等，然后关联在相关的机器上面；创建完成后远程登陆到该机器上进行一系列的挂载操作。</p><a id="more"></a><h4 id="创建磁盘"><a href="#创建磁盘" class="headerlink" title="创建磁盘"></a>创建磁盘</h4><p><img src="/2015/08/15/ops/mount_disk/disk1.png" alt></p><p><img src="/2015/08/15/ops/mount_disk/disk2.png" alt></p><p>一般使用通用（SSD），注意对应服务器的区域</p><h4 id="远程连接上服务器"><a href="#远程连接上服务器" class="headerlink" title="远程连接上服务器"></a>远程连接上服务器</h4><p>fdisk -l 查看磁盘的信息 （可以看到磁盘的信息）</p><h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">fdisk  /dev/XXX</span><br><span class="line">选择 <span class="built_in">add</span> <span class="keyword">a</span> now partition</span><br><span class="line">然后 w <span class="built_in">write</span>（保存）</span><br></pre></td></tr></table></figure><p>当硬盘大于2T的时候，用parted命令</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">parted</span> <span class="string">/dev/xxx                 （ 用parted命令对/dev/xxx进行分区 ）</span></span><br><span class="line"><span class="attr">mklabel</span> <span class="string">gpt                     （ 用gpt格式将硬盘弄到一个分区里 ）</span></span><br><span class="line"><span class="attr">unit</span> <span class="string">TB                         （ 设置单位为TB ）</span></span><br><span class="line"><span class="attr">mkpart</span>  <span class="string">primary  0  3           （ 设置一个主分区，大小为3TB，开始为0，结束威3 ）</span></span><br><span class="line"><span class="attr">print</span>                           <span class="string">（ 显示设置的分区大小 ）</span></span><br><span class="line"><span class="attr">quit</span>                            <span class="string">（ 退出parted程序 ）</span></span><br></pre></td></tr></table></figure><h4 id="新建文件系统"><a href="#新建文件系统" class="headerlink" title="新建文件系统"></a>新建文件系统</h4><p>分好区之后需要新建文件系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4   /dev/xxx</span><br></pre></td></tr></table></figure><h4 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h4><p>新建文件系统之后需要 mount 该磁盘到一个目录下，我们需要新建一个目录，然后执行挂载命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount  /dev/xxx   /xxxxxxxx（我们需要的目录）</span><br></pre></td></tr></table></figure><p>查看磁盘是否挂载成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h4 id="自动挂载设置"><a href="#自动挂载设置" class="headerlink" title="自动挂载设置"></a>自动挂载设置</h4><p>然后我们需要在 /etc/fstab 下添加重启自动挂载信息（这里比较重要的是，如果这里出错，机器重启时将启动不成功，所以配置完成之后我们需要测试看我们的配置是否正确，mount -a 加载所有的磁盘）。</p>]]></content>
      <tags>
        <tag>ops</tag>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 学习笔记（一）</title>
    <url>/2018/08/14/cloudnative/docker_introduction/</url>
    <content><![CDATA[<h4 id="容器技术发展历史"><a href="#容器技术发展历史" class="headerlink" title="容器技术发展历史"></a>容器技术发展历史</h4><h5 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h5><p>容器是一种操作系统虚拟化技术，内核功能的集合，提供给应用独立的运行环境，并实现资源的控制和隔离。Docker 不等同于容器，容器历史要比Docker 长得多</p><a id="more"></a><h5 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h5><p><img src="/2018/08/14/cloudnative/docker_introduction/docker_1.png" alt></p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1972 </span>  UNIX发布了Chroot(Change Root)工具 </span><br><span class="line"><span class="symbol">2000 </span>  FreeBSD发布了Jails，它可以将服务器划分成多个称为Jail的虚拟分区，为⽤用户提供 ⼲干净独立的运⾏行行时环境 </span><br><span class="line"><span class="symbol">2005 </span>  SWsoft基于Linux <span class="number">2.6.15</span> 内核发布了OpenVZ，实现了操作系统层面的虚拟化 </span><br><span class="line"><span class="symbol">2006 </span>  Google发布了Process containers进程容器内核补丁，可以隔离进程 的CPU，内存， 磁盘IO，网络IO等资源; <span class="number">2008</span>更更名为 Cgroup(Control Groups )，Cgroup可以对进 程分组配置，从⽽而可以以组为单位来隔离资源</span><br><span class="line"><span class="symbol">2008 </span>  Linux社区合作开发了LXC (Linux Containers)容器器，利用Namespace来为容器提供 独立的名字空间，包括进程树、网络、用户组及文件系统等，再利用Capabilities限 制容器器内敏敏感系统调⽤用。 </span><br><span class="line"><span class="symbol">2011 </span>  CloudFoundry基于LXC构建了Warden容器器(后放弃LXC⾃自自研) </span><br><span class="line"><span class="symbol">2013 </span>  Google开源了了其鼎鼎有名的Borg平台使用的容器技术lmctfy (<span class="keyword">Let</span> me contain that <span class="keyword">for</span> you) </span><br><span class="line"><span class="symbol">2013 </span>  DotCloud开源了Docker容器，最初基于LXC构建，定义了Docker分层镜像格式</span><br><span class="line"><span class="symbol">2014 </span>  CoreOS推出了了了RKT(Rocket)容器 </span><br><span class="line"><span class="symbol">2015 </span>  OCI (<span class="keyword">Open</span> Container Initiative)组织成立，旨在推进容器技术的标准化工作</span><br><span class="line"><span class="symbol">2015 </span>  Docker的libcontainer演化出了RunC项目 </span><br><span class="line"><span class="symbol">2016 </span>  Docker在架构上分离出了容器器运⾏行行时环境Containered，原数据管理和运行时环境分离</span><br><span class="line"><span class="symbol">2017 </span>  Docker社区开源项目重命名为Moby，基于Moby开源项⽬目构建Docker社区版，在社 区版基础上构建 Docker企业版。从此Docker成为商业产品名字，而原Docker项目化 身Moby继续发展</span><br></pre></td></tr></table></figure><br><h5 id="容器与传统虚拟机的区别"><a href="#容器与传统虚拟机的区别" class="headerlink" title="容器与传统虚拟机的区别"></a>容器与传统虚拟机的区别</h5><ul><li>更高效的利用系统资源</li><li>一致的运行环境</li><li>持续交付和部署</li><li>更轻松的迁移</li><li>更轻松的维护和扩展<br><img src="/2018/08/14/cloudnative/docker_introduction/docker_2.png" alt></li></ul><p><strong>容器相比传统的虚拟机有如下几点优势：</strong></p><ol><li>是容器比虚拟机要小的多，镜像小，传统的一个虚拟机的镜像小的几G，大的上百G，而容器的镜像往往都是几十MB，轻量级的容器镜像意味着可以更方便的进行传输。</li><li>是可以更细粒度的划分CPU和内存等计算资源，虚拟机最小的也是1C1G，而容器可以划分成更小的单位比如 0.1核，128 MiB，非常适用于平时资源使用率不高的业务。因为容器做好了资源的隔离，通过容器在一台机器上混布，可以极大的提高资源利用率，降低成本。</li><li>是容器启动时间比虚拟机要快，虚拟机的启动时间是分钟级的，而容器理论上在1秒之内能启动成百上千个。非常适用于业务量动态变化快的业务。</li></ol><p>容器技术改变应用交付，在以前应用程序的交付是通过源码或可执行文件交付，同时必须包含一个如何部署应用程序的说明文档。往往部署一个稍复杂点的程序，都需要两到三天的时间。容器可以将应用程序和依赖环境打包起来，只要应用程序的容器在一个环境运行起来，在其他任何环境下也能运行，从交付代码变成交付容器，<span style="color:red">从两到三天的时间缩短到5分钟，</span>极大提高交付效率。</p><h5 id="Why-Docker？Build-Once-Run-Anywhere"><a href="#Why-Docker？Build-Once-Run-Anywhere" class="headerlink" title="Why Docker？Build Once, Run Anywhere"></a>Why Docker？Build Once, Run Anywhere</h5><p>创新性地解决了应用打包和分发技术难题。通过友好的设计和封装，大大降低了容器技术的使用门槛。</p><br>]]></content>
      <categories>
        <category>CloudNative</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 学习笔记（二）</title>
    <url>/2018/08/18/cloudnative/docker_base/</url>
    <content><![CDATA[<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p><strong><span style="color:red">Build, Ship, and Run Any App, Anywhere.</span><strong><br></strong></strong></p><a id="more"></a><p><img src="/2018/08/18/cloudnative/docker_base/docker_1.png" alt></p><h4 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h4><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像为Debian</span></span><br><span class="line"><span class="keyword">FROM</span> debian</span><br><span class="line"><span class="comment"># 将软件包emacs.tgz解压到/usr/local/目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> emacs.tgz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="comment"># 将软件包apache.tgz解压到/usr/local/目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache.tgz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="comment"># 设置匿名卷目录/data</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"><span class="comment"># 设置容器的启动命令，该配置可用运行时参数覆盖</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/local/start.sh"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像<br><img src="/2018/08/18/cloudnative/docker_base/docker_2.png" alt></p><ul><li>Dockerfile中的每一条指令都会生成一层新的镜像层</li><li>从一个父镜像开始构建，docker build 的时候会去检查下一条命令的hash值是否于现有镜像层相等，如果相等，则不执行这条命令，而直接基于现有镜像层来执行接下来的语句。</li><li>对于ADD或者COPY指令来说，docker 会检查每个文件的校验和（元数据和数据），最后修改时间和最后访问时间不作考虑。</li><li>对于RUN yum install 来说，docker 不会去检查文件的校验和，只检查指令是否变化。如果需要强制更新镜像，那么需要docker build –no-cache</li><li>一旦从某一层开始不使用cache，接下来的每一层都不会再检查是否有cache</li></ul><h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5><h6 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h6><p>尽可能使用当前官方仓库作为你构建镜像的基础。如果公司内部使用，可下载官方仓库镜像，再推送至私有 registry。推荐使用 Alpine 镜像（Alpine Linux 是一个完整的操作系统），因为其被严格控制并保持在最小尺寸（目前大小 5.52M）。基于此基础镜像，再去构建自己的基础镜像，可以有效控制镜像的大小。</p><h6 id="2-LABEL"><a href="#2-LABEL" class="headerlink" title="2. LABEL"></a>2. LABEL</h6><p>通过给镜像添加标签可以帮助组织镜像、记录许可信息、辅助自动化构建等。<br><img src="/2018/08/18/cloudnative/docker_base/docker_4_1.png" alt></p><h6 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. RUN</h6><p>为了保持 Dockerfile 文件的可读性，可理解性，以及可维护性，过长的或复杂的 RUN 指令使用反斜杠 \ 分行。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">RUN yum install -y pip \</span><br><span class="line">  git<span class="number">-1.9</span><span class="number">.3</span><span class="number">.1</span> \</span><br><span class="line">  wget<span class="number">-1.14</span> &amp;&amp; \</span><br><span class="line">  yum clean all</span><br></pre></td></tr></table></figure><p>如果将 RUN apt-get update 和 apt-get install 拆解为两条命令，会导致缓存问题记忆后续的 install 失败。下图从左边修改最后一行再次构建镜像是时，Docker 发现 RUN apt-get update 指令一样。这样会导致 apt-get update 不再执行，使用缓存镜像。后面使用 apt-get install 安装的是过时的 curl 和 nginx 版本。<br><img src="/2018/08/18/cloudnative/docker_base/docker_4_2.png" alt><br><br><img src="/2018/08/18/cloudnative/docker_base/docker_4_3.png" alt></p><h6 id="4-EXPOSE"><a href="#4-EXPOSE" class="headerlink" title="4. EXPOSE"></a>4. EXPOSE</h6><p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P时，会自动随机映射 EXPOSE 的端口。<br><img src="/2018/08/18/cloudnative/docker_base/docker_4_4.png" alt></p><h6 id="5-ENV"><a href="#5-ENV" class="headerlink" title="5. ENV"></a>5. ENV</h6><p>为容器化服务提供必要的环境变量。</p><h6 id="6-ADD-和-COPY"><a href="#6-ADD-和-COPY" class="headerlink" title="6. ADD 和 COPY"></a>6. ADD 和 COPY</h6><p><strong>优先使用 COPY，COPY 语义更明确。</strong>ADD 能够将本地 tar 文件自动提取到镜像中，这种场景用 ADD 更合适。如果 Dockerfile 中需要 COPY 多个上下文中的文件，不要一次性 COPY 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。最好的做法是按文件组织结构以及功能去 COPY 文件。</p><h6 id="7-VOLUME"><a href="#7-VOLUME" class="headerlink" title="7. VOLUME"></a>7. VOLUME</h6><p>建议使用 VOLUME 来管理镜像中的可变部分和用户可以改变的部分，如数据库存储文件、配置文件、容器创建的文件和目录等。</p><h6 id="8-WORKDIR"><a href="#8-WORKDIR" class="headerlink" title="8. WORKDIR"></a>8. WORKDIR</h6><p>用于指定容器的一个目录， 容器启动时执行的命令会在该目录下执行。为了清晰性和可靠性，应该总是在 WORKDIR 中使用绝对路径。</p><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">使用 .dockerignore</span><br><span class="line">使用多阶段构建</span><br><span class="line">避免安装不必要的包</span><br><span class="line">一个容器只运行一个进程</span><br><span class="line">镜像层数尽可能少</span><br><span class="line">清除缓存的包 （apt-<span class="builtin-name">get</span> clean）</span><br><span class="line">充分利用构建缓存</span><br></pre></td></tr></table></figure><h5 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h5><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br><img src="/2018/08/18/cloudnative/docker_base/docker_3.png" alt></p><h4 id="多阶段构建（Docker-17-05-or-higher）"><a href="#多阶段构建（Docker-17-05-or-higher）" class="headerlink" title="多阶段构建（Docker 17.05 or higher）"></a>多阶段构建（Docker 17.05 or higher）</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一阶段构建生成可执行文件</span></span><br><span class="line"><span class="comment"># builder</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span> AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.mod /src/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.sum /src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go mod download</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go build -ldflags <span class="string">'-linkmode "external" --extldflags "-static"'</span> cmd/ipasd/ipasd.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段构建，使用第一阶段的构建产物</span></span><br><span class="line"><span class="comment"># runtime</span></span><br><span class="line"><span class="keyword">FROM</span> ineva/alpine:<span class="number">3.10</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"Steven &lt;s@ineva.cn&gt;"</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /src/ipasd /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /docker-entrypoint.sh</span></span><br></pre></td></tr></table></figure><h4 id="镜像的存储和传输"><a href="#镜像的存储和传输" class="headerlink" title="镜像的存储和传输"></a>镜像的存储和传输</h4><p>docker pull<br>docker push</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker镜像完整路径</span></span><br><span class="line"><span class="params">&lt;registry&gt;</span>/<span class="params">&lt;repository&gt;</span>/<span class="params">&lt;image&gt;</span>:<span class="params">&lt;tag&gt;</span></span><br><span class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span><span class="meta-keyword">/blazehu/</span>myapache:v1</span><br><span class="line"></span><br><span class="line"><span class="meta"># docker默认registry</span></span><br><span class="line">docker.io(<span class="string">"dockerhub"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># Insecure-registry配置</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>docker/daemon.json</span><br><span class="line"><span class="string">"insecure-registries"</span>: [<span class="string">"10.0.0.0/8"</span>],</span><br><span class="line"></span><br><span class="line"><span class="meta">#无法访问 registry? </span></span><br><span class="line">docker save –o xxx.tgz $&#123;imageId&#125;   将镜像打包成文件</span><br><span class="line">docker load -i xxx.tgz              将镜像从文件中加到本地的docker存储</span><br></pre></td></tr></table></figure><h4 id="docker-run-做了什么？"><a href="#docker-run-做了什么？" class="headerlink" title="docker run 做了什么？"></a>docker run 做了什么？</h4><p><img src="/2018/08/18/cloudnative/docker_base/docker_5.png" alt></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker               客户端命令行工具</span><br><span class="line">dockerd              守护进程，容器的元数据管理、镜像管理、容器运行时及网络、存储等插件</span><br><span class="line">containerd           负责容器的生命周期管理，向上为Docker守护进程提供gRPC接口，屏蔽底层细节，向下通过containerd-shim操控RunC，使得上层Docker守护进程和底层容器运行时可独立升级发展</span><br><span class="line">containerd-shim      处理 <span class="keyword">exit</span> code，wait4() 等问题，实现daemonless容器</span><br><span class="line">runc                 专注于容器实现，包括环境隔离、资源限制、容器安全等</span><br></pre></td></tr></table></figure><h4 id="Docker-Client基础命令总览"><a href="#Docker-Client基础命令总览" class="headerlink" title="Docker Client基础命令总览"></a>Docker Client基础命令总览</h4><h5 id="Docker仓库相关"><a href="#Docker仓库相关" class="headerlink" title="Docker仓库相关"></a>Docker仓库相关</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search</span><br><span class="line">docker pull</span><br><span class="line">docker push</span><br><span class="line">docker login</span><br></pre></td></tr></table></figure><h5 id="查看镜像和容器信息"><a href="#查看镜像和容器信息" class="headerlink" title="查看镜像和容器信息"></a>查看镜像和容器信息</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker images</span><br><span class="line">docker history</span><br><span class="line">docker logs</span><br><span class="line">docker port</span><br><span class="line">docker diff</span><br></pre></td></tr></table></figure><h5 id="操作容器和镜像"><a href="#操作容器和镜像" class="headerlink" title="操作容器和镜像"></a>操作容器和镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run</span><br><span class="line">docker attach</span><br><span class="line">docker start</span><br><span class="line">docker stop</span><br><span class="line">docker rm</span><br><span class="line">docker rmi</span><br><span class="line">docker tag</span><br><span class="line">docker exec</span><br><span class="line">docker commit</span><br><span class="line">docker save</span><br><span class="line">docker build</span><br><span class="line">docker load</span><br></pre></td></tr></table></figure><br>]]></content>
      <categories>
        <category>CloudNative</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
