<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArgoCD 使用 GitLab 和 Dex 实现单点登录</title>
      <link href="/2025/09/03/cloudnative/argocd_sso_gitlab/"/>
      <url>/2025/09/03/cloudnative/argocd_sso_gitlab/</url>
      
        <content type="html"><![CDATA[<p>ArgoCD 初始仅提供 admin 账号，用于首次部署和配置；为安全与协作，后续应启用本地用户或接入 SSO，避免长期使用超级管理员账号。</p><a id="more"></a><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>ArgoCD 以“开箱即用”的方式内置了 <a href="https://dexidp.io/docs/" target="_blank" rel="noopener">Dex</a>（一个轻量级 OIDC 代理）。Dex 的职责只有一个：把企业里各式各样的身份源（SAML、LDAP、GitHub、GitLab …）统一翻译成 ArgoCD 能消费的 OIDC 令牌，从而把 <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso" target="_blank" rel="noopener">ArgoCD SSO</a> 落地成两行配置。下文以 GitLab OAuth2 为样本，演示如何修改 <code>argocd-cm</code> ConfigMap 完成连接器编排，并给出可直接粘贴的 <a href="https://dexidp.io/docs/connectors/gitlab/" target="_blank" rel="noopener">GitLab-Dex</a> 最小 YAML 模板。</p><h3 id="2-整体流程"><a href="#2-整体流程" class="headerlink" title="2. 整体流程"></a>2. 整体流程</h3><ol><li>GitLab: 注册 OAuth2 Application → 获取 Client ID/Secret</li><li>ArgoCD: 修改 argocd-cm 注入 dex gitlab 连接器</li><li>ArgoCD: 修改 argocd-rbac-cm 把 GitLab Group 映射成 ArgoCD 角色</li></ol><h3 id="3-GitLab-配置"><a href="#3-GitLab-配置" class="headerlink" title="3. GitLab 配置"></a>3. GitLab 配置</h3><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_gitlab_sso.jpg" alt="argocd_gitlab_sso"></p><ol><li>打开 Admin Area → Applications → New Application</li><li>填写关键点<ul><li>Name：argocd-dex</li><li>Redirect URI：<a href="https://argocd.blazehu.com/api/dex/callback" target="_blank" rel="noopener">https://argocd.blazehu.com/api/dex/callback</a></li><li>Scopes：勾选 read_user openid profile email</li></ul></li><li>保存后记录 ClientID 和 ClientSecret</li></ol><h3 id="4-ArgoCD-接入-Dex（GitLab-连接器）"><a href="#4-ArgoCD-接入-Dex（GitLab-连接器）" class="headerlink" title="4. ArgoCD 接入 Dex（GitLab 连接器）"></a>4. ArgoCD 接入 Dex（GitLab 连接器）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl edit cm argocd-cm -n argocd</span><br></pre></td></tr></table></figure><p>新增以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://argocd.blazehu.com</span>          <span class="comment"># 对外访问地址</span></span><br><span class="line">  <span class="attr">dex.config:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">connectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gitlab</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">gitlab</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">GitLab</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">baseURL:</span> <span class="string">https://gitlab.example.com</span>   <span class="comment"># 自建 GitLab 填域名</span></span><br><span class="line">        <span class="attr">clientID:</span> <span class="string">XXXX...</span></span><br><span class="line">        <span class="attr">clientSecret:</span> <span class="string">XXXX...</span></span><br><span class="line">        <span class="attr">redirectURI:</span> <span class="string">https://argocd.blazehu.com/api/dex/callback</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://argocd.blazehu.com</span></span><br><span class="line">        <span class="attr">users.anonymous.enabled:</span> <span class="string">"false"</span></span><br></pre></td></tr></table></figure><blockquote><p>如果登录提示：Failed to query provider “<a href="https://argocd.blazehu.com/api/dex" target="_blank" rel="noopener">https://argocd.blazehu.com/api/dex</a> “: Get “<a href="https://argocd-dex-server:5556/api/dex/.well-known/openid-configuration&quot;" target="_blank" rel="noopener">https://argocd-dex-server:5556/api/dex/.well-known/openid-configuration&quot;</a>: http: server gave HTTP response to HTTPS client。这是由于协议对不上，首先检查证书是否合法，另外检查 <code>argocd-cmd-params-cm</code> 配置文件的 dex server 相关参数。</p></blockquote><h3 id="5-RBAC：GitLab-Group-映射成角色"><a href="#5-RBAC：GitLab-Group-映射成角色" class="headerlink" title="5. RBAC：GitLab Group 映射成角色"></a>5. RBAC：GitLab Group 映射成角色</h3><p>编辑 argocd-rbac-cm：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">policy.default:</span> <span class="string">role:readonly</span></span><br><span class="line">  <span class="attr">policy.csv:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">p,</span> <span class="string">role:devops,</span> <span class="string">applications,</span> <span class="string">*,</span> <span class="string">*/*,</span> <span class="string">allow</span></span><br><span class="line">    <span class="string">p,</span> <span class="string">role:devops,</span> <span class="string">clusters,</span> <span class="string">get,</span> <span class="string">*,</span> <span class="string">allow</span></span><br><span class="line">    <span class="string">g,</span> <span class="string">devops,</span> <span class="string">role:devops</span></span><br></pre></td></tr></table></figure><h3 id="6-重启与验证"><a href="#6-重启与验证" class="headerlink" title="6. 重启与验证"></a>6. 重启与验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout restart deployment/argocd-dex-server -n argocd</span><br></pre></td></tr></table></figure><p>重启后点击快速登录：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_gitlab_sso_login.png" alt="argocd_gitlab_sso_login"></p><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><ul><li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso</a></li><li><a href="https://dexidp.io/docs/connectors/gitlab/" target="_blank" rel="noopener">https://dexidp.io/docs/connectors/gitlab/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argocd </tag>
            
            <tag> dex </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾流水线中的 Kubernetes 调度优化</title>
      <link href="/2025/07/30/devops/landun_dispatch_scheduler/"/>
      <url>/2025/07/30/devops/landun_dispatch_scheduler/</url>
      
        <content type="html"><![CDATA[<p>在大量使用蓝盾「Docker公共构建机」来跑构建任务后，我们发现拉起的构建 Pod 通过 hostPath 挂载工作目录做缓存，当同一流水线任务重复执行时能够加速，本文介绍蓝盾调度器如何进行调度到有缓存的节点。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>在前文<a href="http://localhost:4000/2025/07/17/devops/landun_dind_cleaner/#2-%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B" target="_blank" rel="noopener">蓝盾「Docker公共构建机」缓存清理</a>中我们通过分析源码，知道拉起的构建 Pod 通过 hostPath 挂载工作目录做缓存。我们接下来进一步分析创建 Pod 的流程。</p><h3 id="2-部署配置"><a href="#2-部署配置" class="headerlink" title="2. 部署配置"></a>2. 部署配置</h3><p><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/resources/config.yaml" target="_blank" rel="noopener">dispatch-k8s-manager/resources/config.yaml</a></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dispatch:</span></span><br><span class="line">  <span class="comment"># 调度需要使用到的label，确定构建机唯一性</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">bkci.dispatch.kubenetes/core</span></span><br><span class="line">  <span class="comment"># 通过k8s watch来观察构建机状态</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="attr">task:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">bkci.dispatch.kubenetes/watch-task</span></span><br><span class="line">  <span class="attr">builder:</span></span><br><span class="line">    <span class="comment"># 将构建机调度到指定标签节点的配置，不填写则在集群内都可以调度，优先级小于专机和特殊机器</span></span><br><span class="line">    <span class="attr">nodeSelector:</span></span><br><span class="line">      <span class="attr">label:</span></span><br><span class="line">      <span class="attr">value:</span></span><br><span class="line">    <span class="comment"># 构建机曾经调度过的节点名称列表</span></span><br><span class="line">    <span class="attr">nodesAnnotation:</span> <span class="string">bkci.dispatch.kubenetes/builder-history-nodes</span></span><br><span class="line">    <span class="comment"># 容器历史资源使用相关</span></span><br><span class="line">    <span class="attr">realResource:</span></span><br><span class="line">      <span class="comment"># 监控构建机容器资源使用的 prometheus api地址， 字段为空则不开启realResource优化</span></span><br><span class="line">      <span class="comment"># 注：集群内为 集群内为 &lt;service&gt;.&lt;namespace&gt;.svc.cluster.local:&lt;port&gt;</span></span><br><span class="line">      <span class="attr">prometheusUrl:</span> </span><br><span class="line">      <span class="attr">realResourceAnnotation:</span> <span class="string">bkci.dispatch.kubenetes/builder-real-resources</span></span><br><span class="line">  <span class="comment"># 一些具有特定属性的机器，例如独特的网络策略</span></span><br><span class="line">  <span class="attr">specialMachine:</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">bkci.dispatch.kubenetes/special-builder</span></span><br><span class="line">  <span class="comment"># 只给特定用户使用的专机</span></span><br><span class="line">  <span class="attr">privateMachine:</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">bkci.dispatch.kubenetes/private-builder</span></span><br></pre></td></tr></table></figure><p>通过 <code>dispatch-k8s-manager</code> 模块的配置文件，我们发现可以通过 <code>nodeSelector</code>、 <code>nodesAnnotation</code> 、<code>realResource</code> 等配置来设置调度策略。</p><h3 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h3><h4 id="3-1-亲和性和污点容忍"><a href="#3-1-亲和性和污点容忍" class="headerlink" title="3.1 亲和性和污点容忍"></a>3.1 亲和性和污点容忍</h4><p><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/pkg/apiserver/service/builder_start.go" target="_blank" rel="noopener">dispatch-k8s-manager/pkg/apiserver/service/builder_start.go</a></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateBuilder</span><span class="params">(builder *Builder)</span> <span class="params">(taskId <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">volumes, volumeMounts := getBuilderVolumeAndMount(builder.Name, builder.NFSs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replicas <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tolers, nodeMatches := buildDedicatedBuilder(builder)</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  annotations, err := getBuilderAnnotations(builder.Name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> task.DoCreateBuilder(</span><br><span class="line">taskId,</span><br><span class="line">&amp;kubeclient.Deployment&#123;</span><br><span class="line">Name:        builder.Name,</span><br><span class="line">Labels:      labels,</span><br><span class="line">MatchLabels: matchlabels,</span><br><span class="line">Replicas:    &amp;replicas,</span><br><span class="line">Pod: kubeclient.Pod&#123;</span><br><span class="line">Labels:      labels,</span><br><span class="line">Annotations: annotations,</span><br><span class="line">Volumes:     volumes,</span><br><span class="line">Containers: []kubeclient.Container&#123;</span><br><span class="line">&#123;</span><br><span class="line">Image:        builder.Image,</span><br><span class="line">Resources:    *resources,</span><br><span class="line">Env:          getEnvs(builder.Env),</span><br><span class="line">Command:      builder.Command,</span><br><span class="line">VolumeMounts: volumeMounts,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">NodeMatches:     nodeMatches,</span><br><span class="line">Tolerations:     tolers,</span><br><span class="line">PullImageSecret: pullImageSecret,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> taskId, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// buildDedicatedBuilder 获取污点和节点亲和度配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildDedicatedBuilder</span><span class="params">(builder *Builder)</span> <span class="params">([]corev1.Toleration, []kubeclient.NodeMatch)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 优先读取专机配置</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 读取具有特殊配置的机器</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 如果配置中配置了节点选择器则使用节点选择器</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBuilderAnnotations 获取构建机注释配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBuilderAnnotations</span><span class="params">(builderName <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 获取节点记录，用来把构建机分配到已有的节点</span></span><br><span class="line">  ...</span><br><span class="line"><span class="comment">// 获取RealResource记录</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/pkg/kubeclient/deployment.go" target="_blank" rel="noopener">dispatch-k8s-manager/pkg/kubeclient/deployment.go</a></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateDeployment</span><span class="params">(dep *Deployment)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 将 NodeMatches 转为 nodeAffinity</span></span><br><span class="line"><span class="keyword">var</span> affinity *corev1.Affinity</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(dep.Pod.NodeMatches) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> matches []corev1.NodeSelectorRequirement</span><br><span class="line"><span class="keyword">for</span> _, mat := <span class="keyword">range</span> dep.Pod.NodeMatches &#123;</span><br><span class="line">matches = <span class="built_in">append</span>(matches, corev1.NodeSelectorRequirement&#123;</span><br><span class="line">Key:      mat.Key,</span><br><span class="line">Operator: mat.Operator,</span><br><span class="line">Values:   mat.Values,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">affinity = &amp;corev1.Affinity&#123;</span><br><span class="line">NodeAffinity: &amp;corev1.NodeAffinity&#123;</span><br><span class="line">RequiredDuringSchedulingIgnoredDuringExecution: &amp;corev1.NodeSelector&#123;</span><br><span class="line">NodeSelectorTerms: []corev1.NodeSelectorTerm&#123;</span><br><span class="line">&#123;</span><br><span class="line">MatchExpressions: matches,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 CreateBuilder 里，调度相关的两个核心参数 tolers 和 nodeMatches 都是通过 buildDedicatedBuilder(builder) 返回的，这两个参数会一起传递给 kubeclient 层，在 kubeclient 的 CreateDeployment 方法中：</p><ul><li>NodeMatches 会被转换为 affinity.nodeAffinity，用于节点亲和调度。</li><li>Tolerations 会直接下发到 Pod 的 spec.tolerations 字段，用于污点容忍。</li></ul><h4 id="3-2-历史节点调度"><a href="#3-2-历史节点调度" class="headerlink" title="3.2 历史节点调度"></a>3.2 历史节点调度</h4><p>蓝盾源码里我们找到了有关亲和性以及污点容忍的实现，但是有关历史节点调度的实现只有通过 getBuilderAnnotations 给 Pod 设置注解。至于如何通过注解影响调度在蓝盾源码里并没有找到相关内容。我们进一步分析发现，历史节点调度需要通过<a href="https://github.com/TencentBlueKing/ci-dispatch-k8s-manager-plugin" target="_blank" rel="noopener">蓝盾基于K8S调度插件</a>实现。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">bkci.dispatch.kubenetes/builder-history-nodes:</span> <span class="string">'["10.x.x.1","10.x.x.2","10.x.x.3"]'</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">bkci.dispatch.kubenetes/core:</span> <span class="string">build1753761077695-ivcpmoxg</span></span><br><span class="line">    <span class="attr">bkci.dispatch.kubenetes/watch-task:</span> <span class="string">t-1753785688231121886-iInjpMUr-builder-start</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">build1753761077695-ivcpmoxg-c9d8fc6c9-mqhkk</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bkdevopsschedulerplugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"k8s.io/api/core/v1"</span></span><br><span class="line">    <span class="string">"k8s.io/kubernetes/pkg/scheduler/framework"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nodesAnnotation = <span class="string">"bkci.dispatch.kubenetes/builder-history-nodes"</span></span><br><span class="line"><span class="keyword">const</span> readResourceAnnotation = <span class="string">"bkci.dispatch.kubenetes/builder-real-resources"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> realResourceUsage <span class="keyword">struct</span> &#123;</span><br><span class="line">    Cpu    <span class="keyword">string</span> <span class="string">`json:"cpu"`</span></span><br><span class="line">    Memory <span class="keyword">string</span> <span class="string">`json:"memory"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SchedulerPlugin)</span> <span class="title">Score</span><span class="params">(_ context.Context, _ *framework.CycleState, pod *v1.Pod, nodeName <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int64</span>, *framework.Status)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取历史节点信息</span></span><br><span class="line">    <span class="keyword">var</span> nodeHis []<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">if</span> nodesS, ok := pod.ObjectMeta.Annotations[nodesAnnotation]; ok &#123;</span><br><span class="line">        _ = json.Unmarshal([]<span class="keyword">byte</span>(nodesS), &amp;nodeHis)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取资源信息</span></span><br><span class="line">    <span class="keyword">var</span> realResources []realResourceUsage</span><br><span class="line">    <span class="keyword">if</span> realS, ok := pod.ObjectMeta.Annotations[readResourceAnnotation]; ok &#123;</span><br><span class="line">        _ = json.Unmarshal([]<span class="keyword">byte</span>(realS), &amp;realResources)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算历史节点分数</span></span><br><span class="line">    nodeScore := calculateNodeHisScore(nodeHis, nodeName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算资源分数</span></span><br><span class="line">    <span class="comment">// ...省略资源分数计算逻辑...</span></span><br><span class="line">    realResourceScore := ... <span class="comment">// 通过 realResources 和节点资源情况计算</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回总分</span></span><br><span class="line">    <span class="keyword">return</span> nodeScore + realResourceScore, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodeHisScores = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int64</span>&#123;<span class="number">0</span>: <span class="number">30</span>, <span class="number">1</span>: <span class="number">20</span>, <span class="number">2</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculateNodeHisScore 计算历史节点分数，将3个历史节点从最近到最远依次打分 30 - 10分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateNodeHisScore</span><span class="params">(nodeHis []<span class="keyword">string</span>, nodeName <span class="keyword">string</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nodeHis) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> framework.MinNodeScore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, name := <span class="keyword">range</span> nodeHis &#123;</span><br><span class="line"><span class="keyword">if</span> name != nodeName &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">score := framework.MinNodeScore</span><br><span class="line"><span class="keyword">if</span> indexS, ok := nodeHisScores[index]; ok &#123;</span><br><span class="line">score = indexS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> framework.MinNodeScore</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在插件的 Score 阶段，会读取 Pod 的 <code>bkci.dispatch.kubenetes/builder-history-nodes</code> 注解内容，并将其反序列化为历史节点名称数组，即提供历史节点信息。</li><li>插件通过 calculateNodeHisScore 方法，根据当前调度节点是否在历史节点列表中，以及其在列表中的顺序，给予不同的分数（最近的历史节点分数最高）。</li><li>该分数会与资源分数（通过 <code>bkci.dispatch.kubenetes/builder-real-resources</code> 注解和节点资源情况计算得出）相加，作为最终调度优先级，影响调度器选择节点的排序。</li></ul><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>在蓝盾流水线中，通过以下方式实现了 Kubernetes 的调度优化：</p><ul><li>历史节点调度：通过注解记录历史节点信息，调度插件优先选择这些节点，减少初始化时间。</li><li>亲和性（Affinity）：根据配置文件中的 nodeSelector 和代码中的 NodeMatches 转换为 nodeAffinity，确保 Pod 调度到特定节点。</li><li>污点容忍（Tolerations）：仅在配置文件中指定了专机（privateMachine）时，生成污点容忍配置，允许 Pod 调度到带特定污点的节点。</li></ul><p>这些机制协同提升了调度效率和资源利用率。</p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/" target="_blank" rel="noopener">https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/</a></li><li><a href="https://github.com/TencentBlueKing/ci-dispatch-k8s-manager-plugin" target="_blank" rel="noopener">https://github.com/TencentBlueKing/ci-dispatch-k8s-manager-plugin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾「Docker公共构建机」全链路源码解析</title>
      <link href="/2025/07/18/devops/landun_dispatch/"/>
      <url>/2025/07/18/devops/landun_dispatch/</url>
      
        <content type="html"><![CDATA[<p>蓝鲸持续集成平台（蓝盾）是一个免费并开源的 CI 服务。日常 CI 场景中，开发者点击 「执行流水线」 后，如果 Job 的构建类型选择 「容器构建机」，最终会在 Kubernetes 中启动一个 Deployment 作为构建 Pod。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>本文以蓝盾社区版7.1为例，结合实际源码和配置，详细梳理从前端点击「执行」到最终在 Kubernetes 集群拉起 Deployment 的全链路调用过程，</p><h3 id="2-工程鸟瞰"><a href="#2-工程鸟瞰" class="headerlink" title="2. 工程鸟瞰"></a>2. 工程鸟瞰</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bk-ci/src</span></span><br><span class="line"><span class="keyword">├── </span>gateway          <span class="comment"># OpenResty 网关（Lua）</span></span><br><span class="line">├── frontend         <span class="comment"># Vue 前端，模块级微前端</span></span><br><span class="line">├── <span class="keyword">backend </span>         <span class="comment"># Kotlin + SpringCloud 微服务</span></span><br><span class="line">│   ├── process      <span class="comment"># 流水线引擎</span></span><br><span class="line">│   ├── <span class="keyword">dispatch </span>    <span class="comment"># 构建调度（Docker &amp; K8s）</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── agent            <span class="comment"># Go 语言 Agent</span></span><br><span class="line">└── pipeline-plugin  <span class="comment"># Java 插件 SDK</span></span><br></pre></td></tr></table></figure><h3 id="3-源码拆解"><a href="#3-源码拆解" class="headerlink" title="3. 源码拆解"></a>3. 源码拆解</h3><h4 id="3-1-前端触发"><a href="#3-1-前端触发" class="headerlink" title="3.1 前端触发"></a>3.1 前端触发</h4><p>页面地址：<a href="https://devops.bk.tencent.com/console/pipeline/{projectId}/{pipelineId}/preview" target="_blank" rel="noopener">https://devops.bk.tencent.com/console/pipeline/{projectId}/{pipelineId}/preview</a></p><table><thead><tr><th>事件/方法</th><th>对应后端接口</th><th>作用</th></tr></thead><tbody><tr><td><code>requestStartupInfo</code></td><td><code>GET /ms/process/api/user/builds/{p}/{pl}/manualStartupInfo</code></td><td>获取流水线启动所需参数</td></tr><tr><td><code>executePipeline()</code></td><td><code>POST /ms/process/api/user/builds/{p}/{pl}</code></td><td>真正触发流水线执行</td></tr></tbody></table><p>相关文件路径：</p><ul><li><code>src/frontend/devops-pipeline/src/views/subpages/preview.vue</code>： 获取流水线启动所需参数</li><li><code>src/frontend/devops-pipeline/src/components/PipelineHeader/PreviewHeader.vue</code>： 点击执行按钮，触发流水线执行</li></ul><blockquote><p>通过全局事件总线 bus 通信，以及具名视图（named views）机制实现页面拆分和组合。在 <code>preview.vue</code> 页面监听 <code>executePipeline</code> 事件，然后在 <code>PreviewHeader.vue</code> 中通过事件总线触发执行。</p></blockquote><h4 id="3-2-网关转发"><a href="#3-2-网关转发" class="headerlink" title="3.2 网关转发"></a>3.2 网关转发</h4><p>/ms/process/api/user/builds/… 统一转发到 process 微服务。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /ms/process/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://process/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-Process-服务：流水线启动主链路"><a href="#3-3-Process-服务：流水线启动主链路" class="headerlink" title="3.3 Process 服务：流水线启动主链路"></a>3.3 Process 服务：流水线启动主链路</h4><p>主要方法调用链如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">UserBuildResource</span>.</span></span>manual<span class="constructor">Startup()</span>                <span class="comment">// 接收启动流水线的请求</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ServiceBuildResourceImpl</span>.</span></span>manual<span class="constructor">Startup()</span>         <span class="comment">// 具体实现，做参数校验、权限校验等</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineBuildFacadeService</span>.</span></span>build<span class="constructor">ManualStartup()</span>  <span class="comment">// 负责组装启动参数、调用核心服务</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineBuildService</span>.</span></span>start<span class="constructor">Pipeline()</span>             <span class="comment">// 启动流水线主流程，负责流水线状态流转、记录等</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineRuntimeService</span>.</span></span>start<span class="constructor">Build()</span>              <span class="comment">// 流水线引擎，解析模型，调度 Stage/Job/Container，准备构建任务</span></span><br></pre></td></tr></table></figure><p>这一阶段主要负责接收前端的启动请求，经过参数校验、权限校验后，组装启动参数，最终进入流水线引擎。流水线引擎会解析流水线的模型（YAML/DSL），为后续的调度和任务准备做铺垫。</p><h4 id="3-4-生成并下发构建任务"><a href="#3-4-生成并下发构建任务" class="headerlink" title="3.4. 生成并下发构建任务"></a>3.4. 生成并下发构建任务</h4><p>主要方法调用链如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineContainerService</span>.</span></span>prepare<span class="constructor">BuildContainerTasks()</span>      <span class="comment">// 遍历流水线模型，为每个 Job/Container 生成任务，判断分发类型</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">VmOperateTaskGenerator</span>.</span></span>make<span class="constructor">StartVMContainerTask()</span>          <span class="comment">// 针对容器构建机，生成 VM 启动任务（taskAtom = "dispatchVMStartupTaskAtom"）</span></span><br><span class="line">    ↓</span><br><span class="line">pipelineEventDispatcher.dispatch(<span class="constructor">PipelineBuildStartEvent()</span>) <span class="comment">// 下发流水线启动事件</span></span><br></pre></td></tr></table></figure><p>此阶段会遍历流水线模型中的每个 Job/Container，根据其类型（如容器构建机）生成对应的任务。对于容器构建机，会生成 VM 启动任务，并通过事件分发器下发流水线启动事件，为后续的事件驱动调度做准备。</p><h4 id="3-5-事件驱动：Stage-Container-Task-调度"><a href="#3-5-事件驱动：Stage-Container-Task-调度" class="headerlink" title="3.5. 事件驱动：Stage/Container/Task 调度"></a>3.5. 事件驱动：Stage/Container/Task 调度</h4><p>主要方法调用链如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineBuildStartListener</span>.</span></span>run(event)                      <span class="comment">// 消费 PipelineBuildStartEvent，驱动流水线调度</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">BuildStartControl</span>.</span></span>handle(event)</span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineBuildStartEvent</span>.</span></span>execute(watcher)</span><br><span class="line">    ↓</span><br><span class="line">build<span class="constructor">Model()</span></span><br><span class="line">    ↓</span><br><span class="line">pipelineEventDispatcher.dispatch(<span class="constructor">PipelineBuildStageEvent()</span>) <span class="comment">// 下发 Stage 事件</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineStageBuildListener</span>.</span></span>run(event)                      <span class="comment">// 消费 PipelineBuildStageEvent</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">StageControl</span>.</span></span>handle(event)</span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineBuildStageEvent</span>.</span></span>execute(watcher)</span><br><span class="line">    ↓</span><br><span class="line">pipelineContainerService.<span class="built_in">list</span><span class="constructor">Containers(<span class="operator">...</span>)</span>               <span class="comment">// 遍历当前 Stage 下所有 Container（Job）</span></span><br><span class="line">    ↓</span><br><span class="line">pipelineEventDispatcher.dispatch(<span class="constructor">PipelineBuildContainerEvent()</span>) <span class="comment">// 为每个 Job 下发事件</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineContainerBuildListener</span>.</span></span>run(event)                  <span class="comment">// 消费 PipelineBuildContainerEvent</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ContainerControl</span>.</span></span>handle(event)</span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ContainerCmdChain</span>.</span></span><span class="keyword">do</span><span class="constructor">Command(<span class="params">context</span>)</span>                       <span class="comment">// 命令链执行，关键命令 StartActionTaskContainerCmd</span></span><br><span class="line">    ↓</span><br><span class="line">pipelineEventDispatcher.dispatch(<span class="constructor">PipelineBuildAtomTaskEvent()</span>) <span class="comment">// 下发插件任务事件</span></span><br></pre></td></tr></table></figure><p>蓝盾采用事件驱动架构，每个阶段（Stage）、每个 Job（Container）、每个插件（Task）都通过事件进行调度。每个事件都有对应的 Listener 消费，逐步推进流水线的执行流程，保证了系统的高解耦和可扩展性。</p><h4 id="3-6-插件任务调度与-VM-启动"><a href="#3-6-插件任务调度与-VM-启动" class="headerlink" title="3.6. 插件任务调度与 VM 启动"></a>3.6. 插件任务调度与 VM 启动</h4><p>主要方法调用链如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">PipelineAtomTaskBuildListener</span>.</span></span>run(event)                   <span class="comment">// 消费 PipelineBuildAtomTaskEvent</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">TaskControl</span>.</span></span>handle(event)</span><br><span class="line">    ↓</span><br><span class="line">taskAtomService.start(buildTask)</span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">SpringContextUtil</span>.</span></span>get<span class="constructor">Bean(IAtomTask::<span class="params">class</span>.<span class="params">java</span>, <span class="params">task</span>.<span class="params">taskAtom</span>)</span>.execute(task, runVariables)</span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">DispatchVMStartupTaskAtom</span>.</span></span>execute<span class="literal">()</span>                        <span class="comment">// 对于 VM 启动任务，加载并执行</span></span><br><span class="line">    ↓</span><br><span class="line">dispatch<span class="literal">()</span></span><br><span class="line">    ↓</span><br><span class="line">get<span class="constructor">DispatchType()</span>                                          <span class="comment">// 返回 DockerDispatchType（社区版容器构建机默认）</span></span><br><span class="line">    ↓</span><br><span class="line">pipelineEventDispatcher.dispatch(<span class="constructor">PipelineAgentStartupEvent()</span>) <span class="comment">// 下发分发事件</span></span><br></pre></td></tr></table></figure><p>每个插件任务（Atom）都会被动态加载并执行。对于 VM 启动任务，会加载 DispatchVMStartupTaskAtom 插件，判断分发类型（如 Docker），并下发 PipelineAgentStartupEvent，为后续的构建机分发做准备。</p><h4 id="3-7-dispatch-docker-服务：分发到-k8s"><a href="#3-7-dispatch-docker-服务：分发到-k8s" class="headerlink" title="3.7. dispatch-docker 服务：分发到 k8s"></a>3.7. dispatch-docker 服务：分发到 k8s</h4><p>主要方法调用链如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DockerVMListener</span>.</span></span>on<span class="constructor">Startup(<span class="params">dispatchMessage</span>)</span>                <span class="comment">// 消费 PipelineAgentStartupEvent</span></span><br><span class="line">    ↓</span><br><span class="line">get<span class="constructor">DockerRoutingType(<span class="params">projectId</span>)</span>                            <span class="comment">// 判断路由类型（如 configmap 配置为 "KUBERNETES"）</span></span><br><span class="line">    ↓</span><br><span class="line">start<span class="constructor">KubernetesDocker(<span class="operator">...</span>)</span>                                 <span class="comment">// 路由类型为 KUBERNETES 时，走 k8s 资源池</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">DispatchBuildService</span>.</span></span>start<span class="constructor">Up()</span></span><br><span class="line">    ↓</span><br><span class="line">create<span class="constructor">AndStartNewBuilder()</span></span><br><span class="line">    ↓</span><br><span class="line">containerServiceFactory.load(projectId).create<span class="constructor">AndStartBuilder()</span></span><br><span class="line">    ↓</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">KubernetesContainerService</span>.</span></span>create<span class="constructor">AndStartBuilder()</span></span><br><span class="line">    ↓</span><br><span class="line">kubernetesBuilderClient.create<span class="constructor">Builder()</span>                    <span class="comment">// HTTP POST /api/builders 调用 dispatch-k8s-manager</span></span><br></pre></td></tr></table></figure><p>dispatch-docker 服务会根据项目的路由配置，决定是走本地 Docker 还是 k8s 资源池。若配置为 KUBERNETES，则会通过 HTTP 请求调用 dispatch-k8s-manager 服务，准备在 k8s 集群中拉起构建容器。</p><blockquote><p>查看 bk-ci-bk-ci-dispatch-docker 这个 configmap，可以发现配置文件里的 defaultDockerRoutingType 是 “KUBERNETES”。</p></blockquote><h4 id="3-8-dispatch-k8s-manager-服务：拉起-k8s-Deployment"><a href="#3-8-dispatch-k8s-manager-服务：拉起-k8s-Deployment" class="headerlink" title="3.8. dispatch-k8s-manager 服务：拉起 k8s Deployment"></a>3.8. dispatch-k8s-manager 服务：拉起 k8s Deployment</h4><p>主要方法调用链如下：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/api/</span>builders                                         <span class="comment">// 路由</span></span><br><span class="line">    ↓</span><br><span class="line">createBuilder handler</span><br><span class="line">    ↓</span><br><span class="line">service.CreateBuilder</span><br><span class="line">    ↓</span><br><span class="line"><span class="keyword">task</span>.DoCreateBuilder</span><br><span class="line">    ↓</span><br><span class="line">kubeclient.CreateDeployment(dep)                           <span class="comment">// 通过 k8s API 创建 Deployment，拉起实际的构建容器</span></span><br></pre></td></tr></table></figure><p>dispatch-k8s-manager 服务负责与 Kubernetes API 交互，接收来自 dispatch-docker 的 HTTP 请求后，组装 Deployment 对象并调用 k8s API，最终在集群中拉起实际的构建容器，完成流水线的环境准备。</p><h4 id="3-9-总结时序图"><a href="#3-9-总结时序图" class="headerlink" title="3.9 总结时序图"></a>3.9 总结时序图</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_dispatch_chain.png" alt="landun_dispatch_chain"></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><table><thead><tr><th>阶段</th><th>关键技术点</th><th>一句话描述</th></tr></thead><tbody><tr><td>前端</td><td>Vue + Event Bus</td><td>点击按钮 → 事件总线 → 请求发出</td></tr><tr><td>网关</td><td>OpenResty 前缀转发</td><td>统一入口，/ms/process/** 直接透传至 process 服务。</td></tr><tr><td>流程引擎</td><td>自研事件-命令链框架</td><td>PipelineBuildStart → Stage → Container → Task → AgentStartup，层层事件推进，高内聚低耦合。</td></tr><tr><td>插件</td><td><code>IAtomTask</code> SPI 机制</td><td>运行时动态加载 <code>DispatchVMStartupTaskAtom</code>，扩展即插即用。</td></tr><tr><td>调度</td><td>dispatch-docker → dispatch-kubernetes</td><td>根据 <code>defaultDockerRoutingType=KUBERNETES</code> 路由到对应资源池。</td></tr><tr><td>K8s 交付</td><td>dispatch-k8s-manager 与 kube-apiserver 交互</td><td>一条 HTTP 请求即可在集群内拉起 Deployment，数秒完成环境就绪。</td></tr></tbody></table><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="https://github.com/TencentBlueKing/bk-ci/tree/v2.0.0" target="_blank" rel="noopener">https://github.com/TencentBlueKing/bk-ci/tree/v2.0.0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾「Docker公共构建机」缓存清理</title>
      <link href="/2025/07/17/devops/landun_dind_cleaner/"/>
      <url>/2025/07/17/devops/landun_dind_cleaner/</url>
      
        <content type="html"><![CDATA[<p>在使用蓝盾「Docker公共构建机」一段时间后，我们发现构建镜像偶发性超时。排查后发现是由于集群的 Node 节点的磁盘满了，本文会介绍如何清理构建缓存。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>我们发现构建镜像偶发性超时，排查发现是上了 Docker-in-Docker 构建镜像之后发生的，而且发生频率越来越高，进一步排查发现是由于 Pod 会通过 hostPath 挂载工作目录和日志目录，由于构建任务过多导致 Node 节点磁盘打满。</p><h3 id="2-排查过程"><a href="#2-排查过程" class="headerlink" title="2. 排查过程"></a>2. 排查过程</h3><h4 id="2-1-事件分析"><a href="#2-1-事件分析" class="headerlink" title="2.1 事件分析"></a>2.1 事件分析</h4><p>通过 Pod 事件可以发现是由于 Node 节点磁盘打满，导致 Pod 被驱逐，构建任务失败。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Events:</span><br><span class="line">  Type     Reason                 Age                 From     Message</span><br><span class="line">  ----     ------                 ----                ----     -------</span><br><span class="line">  Warning  Evicted                20m                 kubelet  The node was low on resource: ephemeral-storage. Container build1753761077695-ivcpmoxg was using 1580320Ki, which exceeds its request of 0.</span><br><span class="line">  Normal   NodeHasNoDiskPressure  3m (x32 over 6d5h)  kubelet  Node 10.10.32.2 status is now: NodeHasNoDiskPressure</span><br></pre></td></tr></table></figure><p><strong>pod yaml</strong><br>是由于 Pod 通过 hostPath 挂载工作目录和日志目录，通过 hostPath 挂载目录是为了做缓存，当同一流水线任务重复执行时能够加速。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/landun/workspace/build1753761077695-ivcpmoxg</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-volume</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/landun/logs/build1753761077695-ivcpmoxg</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">logs-volume</span></span><br></pre></td></tr></table></figure><p><strong>dispatch-k8s-manager 模块的配置文件</strong><br><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/resources/config.yaml" target="_blank" rel="noopener">dispatch-k8s-manager/resources/config.yaml</a></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dispatch:</span></span><br><span class="line">  <span class="attr">volume:</span></span><br><span class="line">    <span class="comment"># 构建机脚本</span></span><br><span class="line">    <span class="attr">builderConfigMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dispatch-kubernetes-builder</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">        <span class="comment"># 初始化脚本</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">initsh.properties</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">init.sh</span></span><br><span class="line">        <span class="comment"># 登录调试需要的sleep脚本</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">sleepsh.properties</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">sleep.sh</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># 数据盘</span></span><br><span class="line">      <span class="attr">dataHostDir:</span> <span class="string">/data/landun/workspace</span></span><br><span class="line">      <span class="comment"># 日志盘</span></span><br><span class="line">      <span class="attr">logsHostDir:</span> <span class="string">/data/landun/logs</span></span><br><span class="line">    <span class="comment"># 应用数据使用cfs</span></span><br><span class="line">    <span class="attr">cfs:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data/cfs</span></span><br><span class="line">  <span class="attr">volumeMount:</span></span><br><span class="line">    <span class="attr">dataPath:</span> <span class="string">/data/landun/workspace</span></span><br><span class="line">    <span class="attr">logPath:</span> <span class="string">/data/logs</span></span><br><span class="line">    <span class="attr">builderConfigMapPath:</span> <span class="string">/data/landun/config</span></span><br><span class="line">    <span class="attr">cfs:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data/bkdevops/apps</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-2-源码分析"><a href="#2-2-源码分析" class="headerlink" title="2.2 源码分析"></a>2.2 源码分析</h4><p><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/pkg/apiserver/service/builder_start.go" target="_blank" rel="noopener">dispatch-k8s-manager/pkg/apiserver/service/builder_start.go</a></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getBuilderVolumeAndMount 获取一些构建机的常规的被挂载到pod上的volume和mount</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBuilderVolumeAndMount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">workloadName <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">nFSs []types.NFS,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(volumes []corev1.Volume, volumeMounts []corev1.VolumeMount)</span></span> &#123;</span><br><span class="line">volumes = getBuilderPodVolume(workloadName)</span><br><span class="line">volumeMounts = getBuilderPodVolumeMount()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> volumes, volumeMounts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBuilderPodVolume 获取一些构建机的常规的被挂载到pod上的volume，包括配置configmap和data目录hostpath</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBuilderPodVolume</span><span class="params">(workloadName <span class="keyword">string</span>)</span> []<span class="title">corev1</span>.<span class="title">Volume</span></span> &#123;</span><br><span class="line">dataHostPath := filepath.Join(config.Config.Dispatch.Volume.HostPath.DataHostDir, workloadName)</span><br><span class="line">logHostPath := filepath.Join(config.Config.Dispatch.Volume.HostPath.LogsHostDir, workloadName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items []corev1.KeyToPath</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> config.Config.Dispatch.Volume.BuilderConfigMap.Items &#123;</span><br><span class="line">items = <span class="built_in">append</span>(items, corev1.KeyToPath&#123;</span><br><span class="line">Key:  v.Key,</span><br><span class="line">Path: v.Path,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码分析可以发现 hostPath 是通过 <a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/dispatch-k8s-manager/resources/config.yaml" target="_blank" rel="noopener">dispatch-k8s-manager/resources/config.yaml</a> 加上 workloadName 拼接而成的，所以没办法通过配置文件控制不使用 hostPath，于是我们通过定时任务来清理该缓存。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>参考 bk-applog-bkapp-filebeat 的日志清理方案，通过 DaemonSet 实现蓝盾挂载工作目录实施定时清理操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                                   DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">bk-applog-bkapp-filebeat-ingress       18        18        18      18           18          &lt;none&gt;          424d</span><br><span class="line">bk-applog-bkapp-filebeat-json          18        18        18      18           18          &lt;none&gt;          424d</span><br><span class="line">bk-applog-bkapp-filebeat-log-cleaner   18        18        18      18           18          &lt;none&gt;          424d</span><br><span class="line">bk-applog-bkapp-filebeat-stdout        18        18        18      18           18          &lt;none&gt;          424d</span><br><span class="line">bk-ci-builder-cleaner                  18        18        18      18           18          &lt;none&gt;          13d</span><br></pre></td></tr></table></figure><p><strong>编写 daemonSet.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bk-ci-builder-cleaner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">bk-ci-builder</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">bk-ci-builder</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">bk-ci-builder</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">bk-ci-builder-cleaner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">bk-applog-bkapp-filebeat</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">batch-delete-files</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx.xxx.com/bk-ci-builder-cleaner:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span> <span class="string">./delete_files.sh;</span> <span class="string">sleep</span> <span class="number">21600</span><span class="string">;</span> <span class="string">done;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">25m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">32Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">2560m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">256Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/devops/workspace</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">data-volume</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/devops/logs</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data-volume</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/landun/workspace</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/landun/logs</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br></pre></td></tr></table></figure><p><strong>缓存清理脚本 delete_files.sh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># delete_files.sh  —— 正式删除版</span></span><br><span class="line"><span class="comment"># 同时扫描 /data/devops/workspace 和 /data/devops/logs</span></span><br><span class="line"><span class="built_in">set</span> -euo pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------- 可配置参数 ---------</span></span><br><span class="line">ROOT_DIRS=(<span class="string">"/data/devops/workspace"</span> <span class="string">"/data/devops/logs"</span>)</span><br><span class="line">RETENTION_DAYS=7</span><br><span class="line">LOG_FILE=<span class="string">"/tmp/delete_build_dirs.log"</span></span><br><span class="line"><span class="comment"># -----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">log</span></span>() &#123;</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">'%s [%s] %s\n'</span> <span class="string">"<span class="variable">$(date '+%F %T')</span>"</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span> | tee -a <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cutoff_date=$(date -d <span class="string">"<span class="variable">$RETENTION_DAYS</span> days ago"</span> +%F)</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> INFO <span class="string">"==== 开始检查并删除 <span class="variable">$RETENTION_DAYS</span> 天未更新的 build* 目录 ===="</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;ROOT_DIRS[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  [[ -d <span class="variable">$root</span> ]] || &#123; <span class="built_in">log</span> WARN <span class="string">"目录不存在: <span class="variable">$root</span>"</span>; <span class="built_in">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> dir <span class="keyword">in</span> <span class="string">"<span class="variable">$root</span>"</span>/build*; <span class="keyword">do</span></span><br><span class="line">    [[ -d <span class="variable">$dir</span> ]] || <span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二次确认：目录内是否仍无任何 7 天内更新的文件</span></span><br><span class="line">    <span class="keyword">if</span> ! find <span class="string">"<span class="variable">$dir</span>"</span> -<span class="built_in">type</span> f -newermt <span class="string">"<span class="variable">$cutoff_date</span>"</span> -<span class="built_in">print</span> -quit | grep -q .; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">log</span> DELETE <span class="string">"<span class="variable">$dir</span>"</span></span><br><span class="line">        rm -rf <span class="string">"<span class="variable">$dir</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">log</span> SKIP <span class="string">"<span class="variable">$dir</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> INFO <span class="string">"==== 清理完成，日志: <span class="variable">$LOG_FILE</span> ===="</span></span><br></pre></td></tr></table></figure><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h3><ul><li><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/" target="_blank" rel="noopener">https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾从单机到 DinD 的实践</title>
      <link href="/2025/06/27/devops/landun_dind/"/>
      <url>/2025/06/27/devops/landun_dind/</url>
      
        <content type="html"><![CDATA[<p>传统的单机构建环境在项目变大、任务变多时，容易出问题，比如容易崩溃、资源不够用、任务排队，以及成本和资源利用的矛盾。本文会介绍用容器化技术Docker-in-Docker（DinD）来解决这些问题，打造一个灵活、高效的CI/CD系统。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>当前构建环境因依赖单台机器，面临诸多挑战：</p><ul><li>单点故障风险，硬件或网络故障易致构建流程中断；</li><li>资源瓶颈，频繁的构建任务使机器负载过高，频繁触发告警，影响系统稳定性；</li><li>任务堆积，大量任务积压致后续任务延迟甚至超时失败，降低构建效率；</li><li>成本与资源利用问题，增加机器虽可缓解资源紧张，但会增加运维和硬件成本，且任务非持续高峰，部分时间资源闲置浪费。</li></ul><h3 id="2-技术选型方案"><a href="#2-技术选型方案" class="headerlink" title="2. 技术选型方案"></a>2. 技术选型方案</h3><h4 id="2-1-Kaniko"><a href="#2-1-Kaniko" class="headerlink" title="2.1 Kaniko"></a>2.1 Kaniko</h4><p>Kaniko 是谷歌开源的一款构建容器镜像的工具。Kaniko 并不依赖于 Docker 守护进程，完全在用户空间根据 Dockerfile 的内容逐行执行命令来构建镜像，这就使得在一些无法获取 docker 守护 进程的环境下也能够构建镜像。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_workflow.png" alt="landun_workflow"></p><p>Kaniko 通过提取基础镜像的文件系统，按顺序执行 Dockerfile 中的指令，每执行一条指令后在用户空间创建文件系统的快照并与上一状态对比，若有变化则生成新镜像层并更新元数据，最终将构建好的镜像推送到镜像仓库。</p><h5 id="2-1-1-简单例子"><a href="#2-1-1-简单例子" class="headerlink" title="2.1.1 简单例子"></a>2.1.1 简单例子</h5><p>下面是一个使用kaniko的构建的简单例子</p><p><strong>创建密钥</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic -n blazehu kaniko-secret-common --from-file=config.json</span><br></pre></td></tr></table></figure><p><strong>构建测试</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kaniko</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kaniko</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">m.daocloud.io/gcr.io/kaniko-project/executor:latest</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--dockerfile=Dockerfile"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--context=git://user:password@github.com:blazehu/go-examples.git#master"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--destination=blazehu1122/example:latest"</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kaniko-secret</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/kaniko/.docker/</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kaniko-secret</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">kaniko-secret-common</span></span><br></pre></td></tr></table></figure><ul><li>使用 kaniko-project/executor:latest 镜像执行构建任务</li><li>构建参数 –context: 上下文指定 Git Repository（仅支持 git://[repository url][#reference][#commit-id] 格式）</li><li>构建参数 –destination: 指定配置的推送镜像的地址</li><li>镜像推送挂载了 kaniko-secret 密钥</li></ul><h5 id="2-1-2-构建新的CI镜像"><a href="#2-1-2-构建新的CI镜像" class="headerlink" title="2.1.2 构建新的CI镜像"></a>2.1.2 构建新的CI镜像</h5><p>那我们如何结合蓝盾来实现Dind呢？我们需要重新制作一个新的蓝盾CI镜像，参考《<a href="https://bk.tencent.com/docs/markdown/ZH/Devops/3.0/UserGuide/Services/Store/ci-images/docker-build.md" target="_blank" rel="noopener">构建并托管一个 CI 镜像 </a>》，该CI镜像需要包括 kaniko 执行器。这里通过多阶段构建来制作新的CI镜像。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> m.daocloud.io/gcr.io/kaniko-project/executor:latest as kaniko</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> bkci/ci:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制必要文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=kaniko /kaniko /kaniko</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /kaniko/executor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt install -y git python-pip python3-pip \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip config <span class="built_in">set</span> install.trusted-host mirrors.aliyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/kaniko</span><br><span class="line"><span class="keyword">ENV</span> DOCKER_CONFIG /kaniko/.docker</span><br><span class="line"><span class="keyword">ENV</span> SSL_CERT_DIR /kaniko/ssl/certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 kaniko 可执行文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> /kaniko/executor version</span></span><br></pre></td></tr></table></figure><h5 id="2-1-3-蓝盾流水线"><a href="#2-1-3-蓝盾流水线" class="headerlink" title="2.1.3 蓝盾流水线"></a>2.1.3 蓝盾流水线</h5><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_pipeline.png" alt="landun_pipeline"></p><ol><li>第一步使用蓝盾 Checkout 插件拉取代码</li><li>第二步使用蓝盾 Shell Script 插件执行 kaniko 构建命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kaniko/executor --context=/data/devops/workspace --dockerfile=Dockerfile --destination=blazehu1122/example:latest --ignore-path=/ <span class="string">"</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-Dind-Unix-Socket"><a href="#2-2-Dind-Unix-Socket" class="headerlink" title="2.2 Dind Unix Socket"></a>2.2 Dind Unix Socket</h4><p>使用 DaemonSet 来启动 Dind Pod，将 Docker socket 文件 /var/run/docker.sock 挂载到 Pod 中。在要使用Docker服务的 Pod 中都需要挂载 socket文件。</p><h5 id="2-2-1-简单例子"><a href="#2-2-1-简单例子" class="headerlink" title="2.2.1 简单例子"></a>2.2.1 简单例子</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dinp-daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dinp-daemonset</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">dinp-daemonset</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dind</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker:dind</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">Socket</span></span><br></pre></td></tr></table></figure><p>在这个配置中，/var/run/docker.sock 被挂载到 Pod 中，允许 Pod 直接与宿主机上的 Docker 守护进程通信。这种方式不需要设置 DOCKER_HOST 环境变量，因为 Docker 客户端和守护进程直接通过 socket 文件通信。</p><h4 id="2-3-Dind-TCP"><a href="#2-3-Dind-TCP" class="headerlink" title="2.3 Dind TCP"></a>2.3 Dind TCP</h4><p>定义一个 Deployment 和一个 Service，用于启动一个包含 Dind 的 Pod，并通过 Service 对外提供 Docker 服务。在要使用Docker服务的 Pod 中设置 DOCKER_HOST 环境变量，使得 Docker 客户端知道如何连接到 Docker 守护进程（比如在bkci的基础镜像中注入该环境变量）。</p><h5 id="2-3-1-简单例子"><a href="#2-3-1-简单例子" class="headerlink" title="2.3.1 简单例子"></a>2.3.1 简单例子</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dinp-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dinp-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dinp-deployment</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">dinp-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dind</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker:dind</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"4Gi"</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"2"</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"8Gi"</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"4"</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DOCKER_TLS_CERTDIR</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">""</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DOCKER_HOST</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">tcp://localhost:2375</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/run</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> <span class="string">["docker",</span> <span class="string">"info"</span><span class="string">]</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">6</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> <span class="string">["docker",</span> <span class="string">"info"</span><span class="string">]</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment">## 污点配置</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">"svc"</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"bk"</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">"Equal"</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">"NoSchedule"</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">"app.kubernetes.io/name"</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">"In"</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">dockerhost</span></span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">"kubernetes.io/hostname"</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-storage</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/docker_in_pod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/blueking/run</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bk-ci-docker-dinp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blueking</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dinp-deployment</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">2375</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">2375</span></span><br></pre></td></tr></table></figure><p>在需要使用 Docker 的 Pod 中设置 DOCKER_HOST 环境变量为 bk-ci-docker-dinp.blueking.svc.cluster.local，通过 Kubernetes Service 的域名解析和端口转发机制，使 Pod 内的 Docker 客户端能够连接到后端的 Docker 守护进程。</p><h5 id="2-3-2-蓝盾流水线"><a href="#2-3-2-蓝盾流水线" class="headerlink" title="2.3.2 蓝盾流水线"></a>2.3.2 蓝盾流水线</h5><ol><li>第一步使用蓝盾 Checkout 插件拉取代码</li><li>第二步使用蓝盾 Shell Script 插件执行 docker 构建命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker context create dind --docker <span class="string">"host=tcp://bk-ci-docker-dinp.blueking.svc.cluster.local:2375,ca=/root/.docker/certs/ca.pem,cert=/root/.docker/certs/cert.pem,key=/root/.docker/certs/key.pem"</span> </span><br><span class="line">docker context use dind</span><br><span class="line"></span><br><span class="line">docker build --platform=linux/amd64 -t <span class="variable">$&#123;IMAGE_REPO&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span> -f Dockerfile . --push</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-技术选型对比"><a href="#3-技术选型对比" class="headerlink" title="3. 技术选型对比"></a>3. 技术选型对比</h3><table><thead><tr><th>特性/方案</th><th>Kaniko</th><th>Dind Unix Socket</th><th>Dind TCP</th></tr></thead><tbody><tr><td><strong>依赖环境</strong></td><td>不依赖 Docker 守护进程</td><td>依赖宿主机 Docker Socket</td><td>依赖宿主机 Docker 守护进程（TCP）</td></tr><tr><td><strong>部署复杂度</strong></td><td>简单，只需部署 Pod</td><td>中等，需要配置 DaemonSet</td><td>较复杂，需要配置 Deployment 和 Service</td></tr><tr><td><strong>资源消耗</strong></td><td>低</td><td>中等</td><td>较高</td></tr><tr><td><strong>安全性</strong></td><td>高</td><td>中等</td><td>中等</td></tr><tr><td><strong>适用场景</strong></td><td>Kubernetes 环境</td><td>单机或多节点集群</td><td>跨节点或 Kubernetes 集群</td></tr><tr><td><strong>蓝盾集成难度</strong></td><td>中等</td><td>低</td><td>中等</td></tr></tbody></table><p>虽然我们最终选择了 Kaniko 方案，但在实际应用中发现，基于 m.daocloud.io/gcr.io/kaniko-project/executor:latest 制作的蓝盾 CI 镜像存在一些兼容性问题。根据 Kaniko 的<a href="https://github.com/GoogleContainerTools/kaniko?tab=readme-ov-file#known-issues" target="_blank" rel="noopener">官方文档</a>，这种做法并不被推荐，可能会导致一些不可预见的问题。后续将根据蓝盾的官方文档和 Kaniko 的最佳实践，建议重新制作 CI 镜像。</p><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h3><ul><li><a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/kaniko</a></li><li><a href="https://juejin.cn/post/7217665415710081081" target="_blank" rel="noopener">https://juejin.cn/post/7217665415710081081</a></li><li><a href="https://bk.tencent.com/docs/markdown/ZH/Devops/3.0/UserGuide/Services/Store/ci-images/docker-build.md" target="_blank" rel="noopener">https://bk.tencent.com/docs/markdown/ZH/Devops/3.0/UserGuide/Services/Store/ci-images/docker-build.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
            <tag> dind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Argo Rollout 金丝雀发布实践</title>
      <link href="/2025/05/14/cloudnative/argo_rollout_practices/"/>
      <url>/2025/05/14/cloudnative/argo_rollout_practices/</url>
      
        <content type="html"><![CDATA[<p>Argo Rollout 是 Kubernetes 生态中的渐进式交付工具之一，它提供了金丝雀发布、蓝绿部署等多种部署策略。本文将基于实际项目经验，介绍如何使用 Argo Rollout 实现金丝雀发布。</p><a id="more"></a><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Argo Rollout 是 Argo 项目的一部分，专门用于 Kubernetes 应用的渐进式交付。它支持多种部署策略，包括：</p><ul><li><strong>金丝雀发布（Canary）</strong>：逐步将流量从旧版本转移到新版本</li><li><strong>蓝绿部署（Blue-Green）</strong>：同时运行两个版本，快速切换</li><li><strong>A/B 测试</strong>：基于用户特征进行流量分割</li></ul><p>本文重点介绍金丝雀发布策略，并结合 Istio 和 Nginx Ingress 两种流量管理方式，展示完整的配置。</p><h3 id="2-整体架构"><a href="#2-整体架构" class="headerlink" title="2. 整体架构"></a>2. 整体架构</h3><p>根据<a href="https://argoproj.github.io/argo-rollouts/architecture/" target="_blank" rel="noopener">Argo Rollouts官方架构文档</a>，Argo Rollouts由以下核心组件构成：</p><p><img src="https://argoproj.github.io/argo-rollouts/architecture-assets/argo-rollout-architecture.png" alt="argo-rollout"></p><h4 id="2-1-组件详解"><a href="#2-1-组件详解" class="headerlink" title="2.1 组件详解"></a>2.1 组件详解</h4><p><strong>Argo Rollouts Controller</strong></p><ul><li>监控集群中的Rollout资源变化</li><li>读取Rollout定义并确保集群状态与定义一致</li><li>不会干扰普通的Deployment资源</li></ul><p><strong>Rollout Resource</strong></p><ul><li>自定义Kubernetes资源，与原生Deployment兼容</li><li>包含额外的字段控制金丝雀和蓝绿部署的阶段、阈值和方法</li><li>需要将Deployment迁移为Rollout才能被Argo Rollouts管理</li></ul><p><strong>Replica Sets</strong></p><ul><li>标准Kubernetes ReplicaSet资源实例</li><li>Argo Rollouts添加额外元数据来跟踪不同版本</li><li>完全由控制器自动管理，不应手动干预</li></ul><p><strong>Ingress/Service</strong></p><ul><li>流量从用户进入集群并重定向到适当版本的机制</li><li>支持多个服务：仅新版本、仅旧版本或两者兼有</li><li>支持多种服务网格和Ingress解决方案进行流量分割</li></ul><p><strong>AnalysisTemplate 和 AnalysisRun</strong></p><ul><li>连接Rollout到指标提供者的能力</li><li>定义特定指标的阈值来决定更新是否成功</li><li>支持自动推进、回滚或暂停Rollout</li></ul><h4 id="2-3-金丝雀发布流程"><a href="#2-3-金丝雀发布流程" class="headerlink" title="2.3 金丝雀发布流程"></a>2.3 金丝雀发布流程</h4><ol><li><strong>创建 Rollout 资源</strong>：定义部署策略和步骤</li><li><strong>流量分割</strong>：通过 Istio 或 Nginx Ingress 控制流量分配</li><li><strong>渐进式发布</strong>：按照预定义步骤逐步增加新版本流量</li><li><strong>自动分析</strong>：基于指标自动判断是否继续或回滚</li><li><strong>自动回滚</strong>：基于指标自动回滚到稳定版本</li></ol><h3 id="3-配置实践"><a href="#3-配置实践" class="headerlink" title="3. 配置实践"></a>3. 配置实践</h3><p>本文基于一个Helm Chart例子，展示了如何将Argo Rollout集成到部署流程中。</p><h4 id="3-1-项目结构"><a href="#3-1-项目结构" class="headerlink" title="3.1 项目结构"></a>3.1 项目结构</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">argocd-demo/</span><br><span class="line">├── charts/</span><br><span class="line">│   └── rollout/                    <span class="meta"># 统一的rollout Chart</span></span><br><span class="line">│       ├── templates/</span><br><span class="line">│       │   ├── _helpers.tpl        <span class="meta"># 模板辅助函数</span></span><br><span class="line">│       │   ├── app/                <span class="meta"># 应用相关资源</span></span><br><span class="line">│       │   │   ├── deployment.yaml</span><br><span class="line">│       │   │   ├── rollout.yaml    <span class="meta"># Argo Rollout配置</span></span><br><span class="line">│       │   │   └── registry-secret.yaml</span><br><span class="line">│       │   └── traffic/            <span class="meta"># 流量管理资源</span></span><br><span class="line">│       │       ├── tls-secret.yaml</span><br><span class="line">│       │       ├── istio/</span><br><span class="line">│       │       │   ├── gateway.yaml</span><br><span class="line">│       │       │   ├── services.yaml</span><br><span class="line">│       │       │   └── virtualservice.yaml</span><br><span class="line">│       │       ├── nginx-ingress/</span><br><span class="line">│       │       │   ├── ingress.yaml</span><br><span class="line">│       │       │   └── services.yaml</span><br><span class="line">│       │       └── service/</span><br><span class="line">│       │           └── loadbalancer.yaml</span><br><span class="line">│       └── values.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><h4 id="3-2-Rollout-资源定义"><a href="#3-2-Rollout-资源定义" class="headerlink" title="3.2 Rollout 资源定义"></a>3.2 Rollout 资源定义</h4><p>基于我们的Helm模板，Rollout资源支持动态配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Rollout</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.fullname"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.labels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.replicaCount</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">canary:</span></span><br><span class="line">      <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.traffic.nginxIngress.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">canaryService:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">stableService:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">trafficRouting:</span></span><br><span class="line">        <span class="attr">nginx:</span></span><br><span class="line">          <span class="attr">stableIngress:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.nginxIngressName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">additionalIngressAnnotations:</span></span><br><span class="line">            <span class="attr">canary-by-header:</span> <span class="string">"X-Canary"</span></span><br><span class="line">            <span class="attr">canary-by-header-value:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.traffic.istio.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">canaryService:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">stableService:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">trafficRouting:</span></span><br><span class="line">        <span class="attr">istio:</span></span><br><span class="line">          <span class="attr">virtualService:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.virtualServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">routes:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">primary</span></span><br><span class="line">      <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">20</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">or</span> <span class="string">.Values.traffic.nginxIngress.enabled</span> <span class="string">.Values.traffic.istio.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">setCanaryScale:</span></span><br><span class="line">            <span class="attr">weight:</span> <span class="number">50</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">50</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">setCanaryScale:</span></span><br><span class="line">            <span class="attr">matchTrafficWeight:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.selectorLabels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">6</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">workloadRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.fullname"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-配置管理"><a href="#3-3-配置管理" class="headerlink" title="3.3 配置管理"></a>3.3 配置管理</h4><p><strong>values.yaml 配置示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rollout:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.example.com/demo/app</span></span><br><span class="line">  <span class="attr">imageTag:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 应用名称配置</span></span><br><span class="line">  <span class="attr">nameOverride:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">fullnameOverride:</span> <span class="string">""</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"demo-app"</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="attr">registry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">registry-secret</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 流量管理配置</span></span><br><span class="line">  <span class="attr">traffic:</span></span><br><span class="line">    <span class="comment"># Istio 流量管理</span></span><br><span class="line">    <span class="attr">istio:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span> </span><br><span class="line">      <span class="attr">host:</span> <span class="string">demo-app.example.com</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">gateway:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">common-inbound-gateway</span></span><br><span class="line">      <span class="attr">tlsName:</span> <span class="string">tls-secret</span></span><br><span class="line">      <span class="attr">tlsNamespace:</span> <span class="string">istio-system</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Nginx Ingress 流量管理</span></span><br><span class="line">    <span class="attr">nginxIngress:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">demo-app.example.com</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">tlsName:</span> <span class="string">tls-secret</span></span><br><span class="line">      <span class="attr">tlsNamespace:</span> <span class="string">""</span>  <span class="comment"># 使用 release namespace</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4层 Service 流量管理</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">lbId:</span> <span class="string">lb-xxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure><h4 id="3-4-流量管理配置"><a href="#3-4-流量管理配置" class="headerlink" title="3.4 流量管理配置"></a>3.4 流量管理配置</h4><p>基于我们的Helm模板，支持三种流量管理方式：Istio、Nginx Ingress和4层Service。</p><blockquote><p><a href="https://istio.io/latest/zh/docs/tasks/traffic-management/ingress/kubernetes-ingress/#tls" target="_blank" rel="noopener">Kubernetes Ingress</a> 支持指定 TLS 设置。 Istio 支持此功能，但是引用的 Secret 必须存在于 istio-ingressgateway 部署的命名空间（通常是 istio-system）中。</p></blockquote><h5 id="3-4-1-Istio-流量管理"><a href="#3-4-1-Istio-流量管理" class="headerlink" title="3.4.1 Istio 流量管理"></a>3.4.1 Istio 流量管理</h5><p><strong>VirtualService 配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.Values.enabled</span> <span class="string">.Values.traffic.istio.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.virtualServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.labels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">virtualservice</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.gateway.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.host</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">X-Canary:</span></span><br><span class="line">              <span class="attr">exact:</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">canary</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">X-Canary:</span></span><br><span class="line">              <span class="attr">exact:</span> <span class="string">'false'</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">stable</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">primary</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">request:</span></span><br><span class="line">              <span class="attr">set:</span></span><br><span class="line">                <span class="attr">X-Canary:</span> <span class="string">'false'</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">request:</span></span><br><span class="line">              <span class="attr">set:</span></span><br><span class="line">                <span class="attr">X-Canary:</span> <span class="string">'true'</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-2-Nginx-Ingress-流量管理"><a href="#3-4-2-Nginx-Ingress-流量管理" class="headerlink" title="3.4.2 Nginx Ingress 流量管理"></a>3.4.2 Nginx Ingress 流量管理</h5><p><strong>Ingress 配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.Values.enabled</span> <span class="string">.Values.traffic.nginxIngress.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.nginxIngressName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.labels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.nginxIngress.host</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.nginxIngress.tlsName</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.nginxIngress.host</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.nginxIngress.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-3-服务配置"><a href="#3-4-3-服务配置" class="headerlink" title="3.4.3 服务配置"></a>3.4.3 服务配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.Values.enabled</span> <span class="string">.Values.traffic.istio.enabled</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.labels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">canary</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.selectorLabels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.labels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.traffic.istio.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">include</span> <span class="string">"rollout.selectorLabels"</span> <span class="string">.</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-模板辅助函数"><a href="#3-5-模板辅助函数" class="headerlink" title="3.5 模板辅助函数"></a>3.5 模板辅助函数</h4><p>我们的Helm Chart使用<code>_helpers.tpl</code>来统一管理命名规则：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;/*</span></span><br><span class="line"><span class="string">Canary</span> <span class="string">Service</span> <span class="string">Name</span></span><br><span class="line"><span class="string">*/&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">define</span> <span class="string">"rollout.canaryServiceName"</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">printf</span> <span class="string">"%s-canary"</span> <span class="string">(include</span> <span class="string">"rollout.appName"</span> <span class="string">.)</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;/*</span></span><br><span class="line"><span class="string">Stable</span> <span class="string">Service</span> <span class="string">Name</span></span><br><span class="line"><span class="string">*/&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">define</span> <span class="string">"rollout.stableServiceName"</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">printf</span> <span class="string">"%s-stable"</span> <span class="string">(include</span> <span class="string">"rollout.appName"</span> <span class="string">.)</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;/*</span></span><br><span class="line"><span class="string">Virtual</span> <span class="string">Service</span> <span class="string">Name</span></span><br><span class="line"><span class="string">*/&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">define</span> <span class="string">"rollout.virtualServiceName"</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">printf</span> <span class="string">"%s-vs"</span> <span class="string">(include</span> <span class="string">"rollout.appName"</span> <span class="string">.)</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;/*</span></span><br><span class="line"><span class="string">Application</span> <span class="string">Name</span></span><br><span class="line"><span class="string">*/&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">define</span> <span class="string">"rollout.appName"</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">.Values.app.name</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">-&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-基于Helm的部署实践"><a href="#4-基于Helm的部署实践" class="headerlink" title="4. 基于Helm的部署实践"></a>4. 基于Helm的部署实践</h3><h4 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h4><p><strong>安装Argo Rollouts</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Argo Rollouts Controller</span></span><br><span class="line">kubectl create namespace argo-rollouts</span><br><span class="line">kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Argo Rollouts CLI</span></span><br><span class="line">curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64</span><br><span class="line">chmod +x ./kubectl-argo-rollouts-linux-amd64</span><br><span class="line">sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/<span class="built_in">local</span>/bin/kubectl-argo-rollouts</span><br></pre></td></tr></table></figure><h4 id="4-2-Helm部署流程"><a href="#4-2-Helm部署流程" class="headerlink" title="4.2 Helm部署流程"></a>4.2 Helm部署流程</h4><p>使用Helm部署或者结合ArgoCD部署，下列步骤是Helm部署和验证流程。</p><h5 id="步骤一：使用Helm部署"><a href="#步骤一：使用Helm部署" class="headerlink" title="步骤一：使用Helm部署"></a>步骤一：使用Helm部署</h5><p><strong>部署Istio模式</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Helm部署Istio模式的金丝雀发布</span></span><br><span class="line">helm install demo-app . \</span><br><span class="line">  --namespace demo \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> rollout.enabled=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.istio.enabled=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.nginxIngress.enabled=<span class="literal">false</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.service.enabled=<span class="literal">false</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.app.name=demo-app \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.istio.host=demo-app.example.com</span><br></pre></td></tr></table></figure><p><strong>部署Nginx Ingress模式</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Helm部署Nginx Ingress模式的金丝雀发布</span></span><br><span class="line">helm install demo-app . \</span><br><span class="line">  --namespace demo \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> rollout.enabled=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.istio.enabled=<span class="literal">false</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.nginxIngress.enabled=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.service.enabled=<span class="literal">false</span> \</span><br><span class="line">  --<span class="built_in">set</span> rollout.app.name=demo-app \</span><br><span class="line">  --<span class="built_in">set</span> rollout.traffic.nginxIngress.host=demo-app.example.com</span><br></pre></td></tr></table></figure><h5 id="步骤二：验证部署状态"><a href="#步骤二：验证部署状态" class="headerlink" title="步骤二：验证部署状态"></a>步骤二：验证部署状态</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看Rollout状态</span></span><br><span class="line">kubectl get rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Pod状态</span></span><br><span class="line">kubectl get pods -n demo -l app=demo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">kubectl get svc -n demo -l app=demo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看流量管理资源</span></span><br><span class="line">kubectl get virtualservice -n demo  <span class="comment"># Istio模式</span></span><br><span class="line">kubectl get ingress -n demo         <span class="comment"># Nginx模式</span></span><br></pre></td></tr></table></figure><h5 id="步骤三：触发金丝雀发布"><a href="#步骤三：触发金丝雀发布" class="headerlink" title="步骤三：触发金丝雀发布"></a>步骤三：触发金丝雀发布</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：通过Helm更新镜像版本</span></span><br><span class="line">helm upgrade demo-app . \</span><br><span class="line">  --namespace demo \</span><br><span class="line">  --<span class="built_in">set</span> rollout.imageTag=v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：直接更新Rollout资源</span></span><br><span class="line">kubectl patch rollout demo-app-rollout -n demo \</span><br><span class="line">  --<span class="built_in">type</span>=<span class="string">'merge'</span> -p=<span class="string">'&#123;"spec":&#123;"template":&#123;"spec":&#123;"containers":[&#123;"name":"demo-app","image":"registry.example.com/demo/app:v2"&#125;]&#125;&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="步骤四：监控发布进度"><a href="#步骤四：监控发布进度" class="headerlink" title="步骤四：监控发布进度"></a>步骤四：监控发布进度</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看Rollout详细状态</span></span><br><span class="line">kubectl describe rollout demo-app-rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Argo Rollouts CLI查看发布历史</span></span><br><span class="line">kubectl argo rollouts get rollout demo-app-rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看流量分配（Istio模式）</span></span><br><span class="line">kubectl get virtualservice demo-app-vs -n demo -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Ingress配置（Nginx模式）</span></span><br><span class="line">kubectl get ingress demo-app-stable -n demo -o yaml</span><br></pre></td></tr></table></figure><h5 id="步骤五：手动控制发布"><a href="#步骤五：手动控制发布" class="headerlink" title="步骤五：手动控制发布"></a>步骤五：手动控制发布</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推进到下一步</span></span><br><span class="line">kubectl argo rollouts promote demo-app-rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停发布</span></span><br><span class="line">kubectl argo rollouts pause demo-app-rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复发布</span></span><br><span class="line">kubectl argo rollouts resume demo-app-rollout -n demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到稳定版本</span></span><br><span class="line">kubectl argo rollouts abort demo-app-rollout -n demo</span><br></pre></td></tr></table></figure><h4 id="4-3-ArgoCD部署"><a href="#4-3-ArgoCD部署" class="headerlink" title="4.3 ArgoCD部署"></a>4.3 ArgoCD部署</h4><p>如果使用ArgoCD，灰度发布中流量拓扑图如下：</p><h5 id="Nginx-Ingress-流量管理"><a href="#Nginx-Ingress-流量管理" class="headerlink" title="Nginx Ingress 流量管理"></a>Nginx Ingress 流量管理</h5><p><strong>灰度前</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_ingress_1.png" alt="argo_rollout_ingress_1"><br><strong>灰度中</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_ingress_2.png" alt="argo_rollout_ingress_2"><br><strong>灰度结束</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_ingress_3.png" alt="argo_rollout_ingress_3"></p><h5 id="Istio-流量管理"><a href="#Istio-流量管理" class="headerlink" title="Istio 流量管理"></a>Istio 流量管理</h5><p><strong>灰度前</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_istio_1.png" alt="argo_rollout_istio_1"><br><strong>灰度中</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_istio_2.png" alt="argo_rollout_istio_2"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_istio_3.png" alt="argo_rollout_istio_3"><br><strong>灰度结束</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argo_rollout_istio_4.png" alt="argo_rollout_istio_4"></p><h4 id="4-4-流量测试"><a href="#4-4-流量测试" class="headerlink" title="4.4 流量测试"></a>4.4 流量测试</h4><h5 id="测试稳定版本"><a href="#测试稳定版本" class="headerlink" title="测试稳定版本"></a>测试稳定版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不带特殊头部的请求（默认走稳定版本）</span></span><br><span class="line">curl http://demo-app.example.com/api/health</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明确指定稳定版本</span></span><br><span class="line">curl http://demo-app.example.com/api/health \</span><br><span class="line">  -H <span class="string">"X-Canary: false"</span></span><br></pre></td></tr></table></figure><h5 id="测试金丝雀版本"><a href="#测试金丝雀版本" class="headerlink" title="测试金丝雀版本"></a>测试金丝雀版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 明确指定金丝雀版本</span></span><br><span class="line">curl http://demo-app.example.com/api/health \</span><br><span class="line">  -H <span class="string">"X-Canary: true"</span></span><br></pre></td></tr></table></figure><h5 id="验证流量分配"><a href="#验证流量分配" class="headerlink" title="验证流量分配"></a>验证流量分配</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续发送请求，观察流量分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span> curl -s http://demo-app.example.com/api/health; sleep 1; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5-高级特性"><a href="#5-高级特性" class="headerlink" title="5. 高级特性"></a>5. 高级特性</h3><h4 id="5-1-自动分析"><a href="#5-1-自动分析" class="headerlink" title="5.1 自动分析"></a>5.1 自动分析</h4><p>Argo Rollouts支持通过AnalysisTemplate和AnalysisRun实现自动化的指标分析，这是实现智能金丝雀发布的关键特性。</p><p><strong>AnalysisTemplate 定义</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">AnalysisTemplate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">success-rate</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">success-rate</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">successCondition:</span> <span class="string">result[0]</span> <span class="string">&gt;=</span> <span class="number">0.95</span></span><br><span class="line">    <span class="attr">failureCondition:</span> <span class="string">result[0]</span> <span class="string">&lt;</span> <span class="number">0.90</span></span><br><span class="line">    <span class="attr">provider:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">address:</span> <span class="string">http://prometheus:9090</span></span><br><span class="line">        <span class="attr">query:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sum(rate(http_requests_total&#123;job="&#123;&#123;args.service-name&#125;&#125;",status!~"5.."&#125;[5m]))</span> <span class="string">/</span></span><br><span class="line">          <span class="string">sum(rate(http_requests_total&#123;job="&#123;&#123;args.service-name&#125;&#125;"&#125;[5m]))</span></span><br></pre></td></tr></table></figure><p><strong>Rollout 中的分析配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">canary:</span></span><br><span class="line">      <span class="attr">analysis:</span></span><br><span class="line">        <span class="attr">templates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">templateName:</span> <span class="string">success-rate</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">demo-app-stable</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name-canary</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">demo-app-canary</span></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">20</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">10m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">analysis:</span></span><br><span class="line">          <span class="attr">templates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">templateName:</span> <span class="string">success-rate</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">demo-app-stable</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name-canary</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">demo-app-canary</span></span><br></pre></td></tr></table></figure><h4 id="5-2-渐进式发布"><a href="#5-2-渐进式发布" class="headerlink" title="5.2 渐进式发布"></a>5.2 渐进式发布</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">canary:</span></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">10</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">5m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">20</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">5m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">40</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">5m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">60</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">5m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pause:</span> <span class="string">&#123;duration:</span> <span class="string">5m&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">setWeight:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="5-3-自动回滚"><a href="#5-3-自动回滚" class="headerlink" title="5.3 自动回滚"></a>5.3 自动回滚</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">canary:</span></span><br><span class="line">      <span class="attr">rollbackWindow:</span></span><br><span class="line">        <span class="attr">deployments:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">analysis:</span></span><br><span class="line">        <span class="attr">templates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">templateName:</span> <span class="string">error-rate</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">demo-app-stable</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-name-canary</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">demo-app-canary</span></span><br></pre></td></tr></table></figure><h3 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h3><ul><li><a href="https://argo-rollouts.readthedocs.io/" target="_blank" rel="noopener">Argo Rollouts 官方文档</a></li><li><a href="https://argoproj.github.io/argo-rollouts/architecture/" target="_blank" rel="noopener">Argo Rollouts 架构文档</a></li><li><a href="https://istio.io/latest/docs/concepts/traffic-management/" target="_blank" rel="noopener">Istio 流量管理</a></li><li><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#canary" target="_blank" rel="noopener">Nginx Ingress 金丝雀发布</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argocd </tag>
            
            <tag> rollout </tag>
            
            <tag> canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArgoCD 扩展：实现 Pod 离群</title>
      <link href="/2025/04/21/cloudnative/argocd_outofcluster/"/>
      <url>/2025/04/21/cloudnative/argocd_outofcluster/</url>
      
        <content type="html"><![CDATA[<p>线上异常 Pod 既要留现场，又得立刻摘流量，还要在 ArgoCD 资源拓扑图里一眼被看到。本文会介绍如何让 Pod 秒“离群”，既摘流量与同步循环，又在拓扑图高亮标注。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>排查线上问题时，我们既想保留现场，又要快速恢复服务，不想让异常的 Pod 被 ArgoCD 自动回收。只需贴上两行标签和注解，就能让异常 Pod 立刻从 Service Endpoints 下线并被 ArgoCD 标为“离群”，现场保留、流量无损，排障后删除即可秒级复原。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>把 Pod 的 Service selector 标签（如 app=xxx）摘掉，再给它打上 ArgoCD 「忽略差异」和「禁止回收」的注解，ArgoCD 就会把它标成“离群 Pod”而不参与同步。</p><p><strong>步骤如下：</strong></p><table><thead><tr><th>步骤</th><th>目的</th><th>命令</th></tr></thead><tbody><tr><td>1</td><td>下线流量</td><td><code>kubectl label pod app-xxx-abcde app-</code></td></tr><tr><td>2</td><td>脱离控制器</td><td><code>kubectl label pod app-xxx-abcde pod-template-hash-</code></td></tr><tr><td>3</td><td>忽略差异</td><td><code>kubectl annotate pod app-xxx-abcde argocd.argoproj.io/compare-options=IgnoreExtraneous</code></td></tr><tr><td>4</td><td>禁止回收</td><td><code>kubectl annotate pod app-xxx-abcde argocd.argoproj.io/sync-options=Prune=false</code></td></tr><tr><td>5</td><td>不影响拓扑图展示</td><td><code>kubectl label pod app-xxx-abcde argocd.argoproj.io/instance=your-app-name</code></td></tr></tbody></table><h3 id="3-实现效果"><a href="#3-实现效果" class="headerlink" title="3. 实现效果"></a>3. 实现效果</h3><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_outofcluster1.png" alt="argocd_outofcluster1"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_outofcluster2.png" alt="argocd_outofcluster2"></p><blockquote><p>前端实现参考：<a href="https://blazehu.com/2023/01/30/frontend/g6_tree_demo/" target="_blank" rel="noopener">AntV G6 实现 k8s 资源拓扑图展示</a></p></blockquote><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td>零配置修改</td><td>无需改 Git 仓库，不触发同步</td></tr><tr><td>秒级生效</td><td>纯标签/注解操作，1 秒完</td></tr><tr><td>风险可控</td><td>离群 Pod 不参与流量，随时删</td></tr><tr><td>可视化</td><td>ArgoCD UI 高亮提示，一眼识别</td></tr></tbody></table><p>下次线上再出 Bug，不妨先“离群”再排查！</p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ul><li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/</a></li><li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argocd </tag>
            
            <tag> gitops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建FTP服务</title>
      <link href="/2024/09/22/ops/linux/vsftpd/"/>
      <url>/2024/09/22/ops/linux/vsftpd/</url>
      
        <content type="html"><![CDATA[<p>10 分钟搭好 FTP：装包、添用户、拷脚本、开防火墙，本地验证登录。</p><a id="more"></a><h4 id="1-安装-vsftpd"><a href="#1-安装-vsftpd" class="headerlink" title="1. 安装 vsftpd"></a>1. 安装 vsftpd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install vsftpd   <span class="comment"># CentOS 7/8</span></span><br><span class="line"><span class="comment"># Ubuntu/Debian 用  sudo apt -y install vsftpd</span></span><br></pre></td></tr></table></figure><h4 id="2-建系统用户"><a href="#2-建系统用户" class="headerlink" title="2. 建系统用户"></a>2. 建系统用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser blazehu</span><br><span class="line">sudo passwd blazehu</span><br></pre></td></tr></table></figure><h4 id="3-目录准备"><a href="#3-目录准备" class="headerlink" title="3. 目录准备"></a>3. 目录准备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/client</span><br><span class="line">sudo chown -R blazehu:blazehu /data/client</span><br><span class="line">sudo chmod 755 /data/client</span><br></pre></td></tr></table></figure><h4 id="4-配置-vsftpd"><a href="#4-配置-vsftpd" class="headerlink" title="4. 配置 vsftpd"></a>4. 配置 vsftpd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line">sudo tee /etc/vsftpd/vsftpd.conf &gt;/dev/null &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="comment"># vsftpd 最小可用模板（系统账号 + 被动模式）</span></span><br><span class="line"><span class="comment"># 适用：CentOS 7/8 | Rocky | Alma | RHEL</span></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭匿名登录</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许系统账号登录</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="comment"># 上传/删除/重命名总开关</span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="comment"># 新建文件 644，目录 755</span></span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录时显示 .message 文件（如有）</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"><span class="comment"># 记录上传/下载日志</span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line"><span class="comment"># 使用标准 xferlog 格式</span></span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"><span class="comment"># PORT 模式数据端口 20</span></span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"><span class="comment"># 独立守护进程（IPv4）</span></span><br><span class="line">listen=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 /etc/pam.d/vsftpd 认证</span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"><span class="comment"># 启用白名单</span></span><br><span class="line">userlist_enable=YES</span><br><span class="line"><span class="comment"># NO=仅允许 user_list 内用户登录</span></span><br><span class="line">userlist_deny=NO</span><br><span class="line"><span class="comment"># 支持 /etc/hosts.allow|deny 访问控制</span></span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制登录后落在 /data/client，不再进系统家目录</span></span><br><span class="line">local_root=/data/client</span><br><span class="line"><span class="comment"># 所有用户被锁在家目录</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="comment"># 家目录可写时也接受（必加，否则 530）</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="comment"># 启用“例外名单”</span></span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="comment"># 文件内用户不被禁锢（留空=全员禁锢）</span></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启被动模式</span></span><br><span class="line">pasv_enable=YES</span><br><span class="line"><span class="comment"># 数据端口下限</span></span><br><span class="line">pasv_min_port=20000</span><br><span class="line"><span class="comment"># 数据端口上限（共 11 个端口够用）</span></span><br><span class="line">pasv_max_port=20010</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="5-白名单-amp-空例外文件"><a href="#5-白名单-amp-空例外文件" class="headerlink" title="5. 白名单 &amp; 空例外文件"></a>5. 白名单 &amp; 空例外文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> blazehu &gt; /etc/vsftpd/user_list</span><br><span class="line">sudo touch /etc/vsftpd/chroot_list   <span class="comment"># 留空 = 全部用户都被 chroot</span></span><br></pre></td></tr></table></figure><h4 id="6-防火墙"><a href="#6-防火墙" class="headerlink" title="6. 防火墙"></a>6. 防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service=ftp           <span class="comment"># 放行 21</span></span><br><span class="line">sudo firewall-cmd --permanent --add-port=20000-20010/tcp  <span class="comment"># 被动端口段</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="7-重载"><a href="#7-重载" class="headerlink" title="7. 重载"></a>7. 重载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart vsftpd</span><br><span class="line">systemctl status vsftpd</span><br></pre></td></tr></table></figure><h4 id="8-验证"><a href="#8-验证" class="headerlink" title="8. 验证"></a>8. 验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@centos7 ~]$ ftp 127.0.0.1</span><br><span class="line">Connected to 127.0.0.1 (127.0.0.1).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (127.0.0.1:blazehu): blazehu</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br></pre></td></tr></table></figure><h4 id="9-匿名下载"><a href="#9-匿名下载" class="headerlink" title="9.匿名下载"></a>9.匿名下载</h4><p>后续如果希望开启匿名下载需要添加以下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#======== 匿名只读下载（与系统用户同目录） ========</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">no_anon_password=YES</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line"><span class="comment"># 把匿名根目录强行指到系统用户目录</span></span><br><span class="line">anon_root=/data/client</span><br><span class="line"><span class="comment"># 以下两行显式关闭匿名写权限，覆盖全局 write_enable=YES</span></span><br><span class="line">anon_upload_enable=NO</span><br><span class="line">anon_mkdir_write_enable=NO</span><br></pre></td></tr></table></figure><p>更新名单：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ftp &gt;&gt; /etc/vsftpd/user_list</span><br><span class="line"><span class="built_in">echo</span> ftp &gt;&gt; /etc/vsftpd/chroot_list</span><br><span class="line"><span class="comment"># 同时兼容 macOS 的 anonymous</span></span><br><span class="line"><span class="built_in">echo</span> anonymous &gt;&gt; /etc/vsftpd/user_list</span><br><span class="line"><span class="built_in">echo</span> anonymous &gt;&gt; /etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Istio 实现服务的泳道发布</title>
      <link href="/2024/08/31/cloudnative/lanes/"/>
      <url>/2024/08/31/cloudnative/lanes/</url>
      
        <content type="html"><![CDATA[<p>基于 Istio 的泳道发布，让多条需求在同一套共享测试环境里并行测试互不干扰，既省资源又提效。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>随着公司业务规模迅速扩张，同一微服务往往需要并行承载多个功能需求的同时开发与测试。当前一套测试环境出现了分支抢占、配置串扰、缓存冲突等问题，导致整体交付效率下滑。</p><h3 id="2-什么是泳道"><a href="#2-什么是泳道" class="headerlink" title="2. 什么是泳道"></a>2. 什么是泳道</h3><p>泳道可以理解为多个并行隔离的调用链，调用互不干扰，类似泳池中的泳道。其中一条基线泳道作为主干道常备所有服务的默认实例，其他泳道的缺失服务会自动回退到这条基线泳道。</p><p>使用流量泳道实现应用版本隔离，将链路透传请求头指定为引流请求头，使用链路透传请求头的内容向不同泳道引流。泳道中服务相互调用时，若目标服务不存在当前泳道则转发至基线泳道，保障链路完整性，简化流量管理。如下图：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/istio_lane.png" alt="istio_lane"></p><p>图中基于 svcA、svcB、svcC 构建 v1、v2、v3 三条泳道，分别对应服务调用链的三个版本。其中 v1 为基线泳道，包含完整的三个服务，v2 仅包含 svcA、svcC 两个服务，v3 仅包含 svcB 一个服务。同时，链路透传请求头与引流请求头都指定为 X-Lane。</p><h3 id="3-方案探索"><a href="#3-方案探索" class="headerlink" title="3. 方案探索"></a>3. 方案探索</h3><p>以下资源的 YAML 按流量进入集群→路由→后端实例的顺序编排，依次对应泳道发布的 5 个关键环节。</p><h4 id="3-1-Gateway"><a href="#3-1-Gateway" class="headerlink" title="3.1 Gateway"></a>3.1 Gateway</h4><p>作用：定义统一入口，声明域名、端口及 TLS 终止方式，让外部流量能够打到集群内部。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">common-inbound-gateway</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span>  </span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">      <span class="attr">port:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">      <span class="attr">port:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">        <span class="attr">number:</span> <span class="number">443</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">HTTPS</span></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line">        <span class="attr">credentialName:</span> <span class="string">blazehu.com</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">SIMPLE</span></span><br></pre></td></tr></table></figure><h4 id="3-2-VirtualService"><a href="#3-2-VirtualService" class="headerlink" title="3.2 VirtualService"></a>3.2 VirtualService</h4><p>作用：定义基于 HTTP 头部信息的路由规则，包括基线泳道。按 HTTP 头 X-Lane 的值把请求精准地导到 v1/v2/v3 三个泳道；若无该头，则默认落到基线泳道 v1。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-vs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common-inbound-gateway</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">argocd-demo.blazehu.com</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span>                       <span class="comment"># 定义基于 header 的路由规则</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">X-Lane:</span></span><br><span class="line">              <span class="attr">exact:</span> <span class="string">v2</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">7777</span></span><br><span class="line">            <span class="attr">subset:</span> <span class="string">v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">X-Lane:</span></span><br><span class="line">              <span class="attr">exact:</span> <span class="string">v3</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">v3</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">7777</span></span><br><span class="line">            <span class="attr">subset:</span> <span class="string">v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span>                     <span class="comment"># 基线泳道 v1，没有 match 条件，作为默认路由</span></span><br><span class="line">      <span class="attr">route:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">            <span class="attr">host:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">7777</span></span><br><span class="line">            <span class="attr">subset:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><h4 id="3-3-DestinationRule"><a href="#3-3-DestinationRule" class="headerlink" title="3.3 DestinationRule"></a>3.3 DestinationRule</h4><p>作用：定义服务的子集和选择器，即给每个泳道打“版本标签”，让 VirtualService 在路由时能准确找到后端实例；同时定义负载均衡策略。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-dr</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">  <span class="attr">subsets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v3</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><h4 id="3-4-Service"><a href="#3-4-Service" class="headerlink" title="3.4 Service"></a>3.4 Service</h4><p>作用：把标有 app: argocd-demo 的 Pod 暴露为 argocd-demo-lanes:7777，供 VS/DR 路由。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">7777</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br></pre></td></tr></table></figure><h4 id="3-5-Deployment"><a href="#3-5-Deployment" class="headerlink" title="3.5. Deployment"></a>3.5. Deployment</h4><p>作用：定义工作负载，每个工作负载具有不同的标签。通过 version 标签把镜像 v1/v2/v3 部署成三套独立实例，对应三条泳道；缺失组件会自动回退到基线 v1，实现“按需部署”。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># v1（基线）</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-v1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">'true'</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">'xxx/blazehu-demo:v1'</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">argocd-demo</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># v2（仅改 version 与镜像）</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-v2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">'true'</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">'xxx/blazehu-demo:v2'</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">argocd-demo</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># v3（仅改 version 与镜像）</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">argocd-demo-v3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">'true'</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v3</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">'xxx/blazehu-demo:v3'</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">argocd-demo</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>通过 Gateway 入口、VirtualService 路由规则、DestinationRule 后端分组的组合，再辅以按版本标签区分的 Deployment。</p><h4 id="3-6-测试验证"><a href="#3-6-测试验证" class="headerlink" title="3.6. 测试验证"></a>3.6. 测试验证</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/istio_lane_argocd.png" alt="istio_lane_argocd"><br>本地配置 hosts即可访问测试（修改 etc/hosts）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blazehu@MACBOOK ~ % curl http://argocd-demo.blazehu.com/api/check</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"v1"</span>&#125; </span><br><span class="line"></span><br><span class="line">blazehu@MACBOOK ~ % curl http://argocd-demo.blazehu.com/api/check -H <span class="string">"X-Lane: v1"</span></span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"v1"</span>&#125;                                                                                                    </span><br><span class="line"></span><br><span class="line">blazehu@MACBOOK ~ % curl http://argocd-demo.blazehu.com/api/check -H <span class="string">"X-Lane: v2"</span></span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"v2"</span>&#125;                                                                                                    </span><br><span class="line"></span><br><span class="line">blazehu@MACBOOK ~ % curl http://argocd-demo.blazehu.com/api/check -H <span class="string">"X-Lane: v3"</span></span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"v3"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-响应头添加泳道信息"><a href="#3-7-响应头添加泳道信息" class="headerlink" title="3.7 响应头添加泳道信息"></a>3.7 响应头添加泳道信息</h4><p>为了确保前后端泳道信息的一致性和可追踪性，并使前端能够识别请求所属的泳道，我们可以在响应中添加泳道的header头。仅当泳道有效时，才将其添加至响应头，以避免向前端传递无效或错误的泳道信息。这样，前端可以通过浏览器插件自动设置请求头，实现泳道信息的准确传递和验证。<br><strong>方案一：VirtualService</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">          <span class="attr">X-Lane:</span></span><br><span class="line">            <span class="attr">exact:</span> <span class="string">'v2'</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">argocd-demo-lanes</span></span><br><span class="line">          <span class="attr">subset:</span> <span class="string">v2</span></span><br><span class="line">          <span class="attr">port:</span></span><br><span class="line">            <span class="attr">number:</span> <span class="number">7777</span></span><br><span class="line">        <span class="attr">headers:</span></span><br><span class="line">          <span class="attr">response:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">              <span class="attr">X-Lane:</span> <span class="string">"v2"</span>  <span class="comment"># 将请求头 x-lane 传递到响应头</span></span><br></pre></td></tr></table></figure><p><strong>方案二：EnvoyFilter</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EnvoyFilter</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lane-response-header</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span>                   </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">configPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">applyTo:</span> <span class="string">HTTP_FILTER</span></span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">SIDECAR_INBOUND</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">operation:</span> <span class="string">INSERT_BEFORE</span></span><br><span class="line">      <span class="attr">value:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">envoy.filters.http.lua</span></span><br><span class="line">        <span class="attr">typed_config:</span></span><br><span class="line">          <span class="string">'@type'</span><span class="string">:</span> <span class="string">type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua</span></span><br><span class="line">          <span class="attr">inlineCode:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">function</span> <span class="string">envoy_on_request(request_handle)</span></span><br><span class="line">                <span class="string">local</span> <span class="string">headers</span> <span class="string">=</span> <span class="string">request_handle:headers()</span></span><br><span class="line">                <span class="string">local</span> <span class="string">lane</span> <span class="string">=</span> <span class="string">headers:get("x-lane")</span> <span class="string">or</span> <span class="string">"nil"</span></span><br><span class="line">                <span class="string">request_handle:logWarn("==</span> <span class="attr">envoy_on_request X-Lane:</span> <span class="string">" .. lane)</span></span><br><span class="line"><span class="string">                request_handle:streamInfo():dynamicMetadata():set("</span><span class="string">envoy.filters.http.lua",</span> <span class="string">"lane"</span><span class="string">,</span> <span class="string">lane)</span></span><br><span class="line">            <span class="string">end</span></span><br><span class="line"></span><br><span class="line">            <span class="string">function</span> <span class="string">envoy_on_response(response_handle)</span></span><br><span class="line">                <span class="string">local</span> <span class="string">headers</span> <span class="string">=</span> <span class="string">response_handle:headers()</span></span><br><span class="line">                <span class="string">response_handle:logWarn("start</span> <span class="string">add</span> <span class="string">headers")</span></span><br><span class="line">                <span class="string">local</span> <span class="string">metadata</span> <span class="string">=</span> <span class="string">response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")</span></span><br><span class="line">                <span class="string">local</span> <span class="string">lane</span> <span class="string">=</span> <span class="string">metadata</span> <span class="string">and</span> <span class="string">metadata["lane"]</span> <span class="string">or</span> <span class="string">"nil"</span></span><br><span class="line">                <span class="string">if</span> <span class="string">lane</span> <span class="string">==</span> <span class="string">"nil"</span> <span class="string">then</span></span><br><span class="line">                    <span class="string">response_handle:logWarn("X-Lane</span> <span class="string">header</span> <span class="string">not</span> <span class="string">found</span> <span class="string">in</span> <span class="string">request")</span></span><br><span class="line">                <span class="string">else</span></span><br><span class="line">                    <span class="string">headers:add("x-lane",</span> <span class="string">lane)</span></span><br><span class="line">                    <span class="string">response_handle:logWarn("set</span> <span class="string">x-lane,</span> <span class="string">lane:"..</span> <span class="string">lane)</span></span><br><span class="line">                <span class="string">end</span></span><br><span class="line">            <span class="string">end</span></span><br><span class="line">  <span class="attr">workloadSelector:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">argocd-demo</span></span><br></pre></td></tr></table></figure><p>两种方案均可，方案一通过 VirtualService 直接在路由层面处理请求和响应头，简单易用；方案二利用 EnvoyFilter 的 Lua 脚本在代理层面灵活操作请求和响应头，提供更高的灵活性和控制能力。</p><h3 id="4-落地实践"><a href="#4-落地实践" class="headerlink" title="4. 落地实践"></a>4. 落地实践</h3><h4 id="4-1-模板渲染"><a href="#4-1-模板渲染" class="headerlink" title="4.1. 模板渲染"></a>4.1. 模板渲染</h4><ul><li>基础资源：在 base/ 目录下管理，包括 Gateway 和 Service 等基础资源。</li><li>差异补丁：在 patch/ 目录下管理，包括 Deployment 和 VirtualService 的差异补丁。</li><li>渲染管线：前端表单 → 后端生成全局唯一泳道名 → 模版渲染 → 推送到 Git → Argo CD 同步</li></ul><h4 id="4-2-元数据原理"><a href="#4-2-元数据原理" class="headerlink" title="4.2. 元数据原理"></a>4.2. 元数据原理</h4><p>使用一个泳道 Lane CR（Custom Resource）或数据库作为唯一的数据来源。</p><blockquote><p>补充说明：我们可以通过 CR + Controller 的方式实现上述的模版渲染以及元数据管理。即将泳道定义为 XLane 类型的 CRD，并实现对应的 Controller 来管理要实现泳道功能的 Istio VirtualService 和 DestinationRule (实现路由功能) 和 K8S deployment (实现部署功能)。</p></blockquote><h4 id="4-3-功能清单"><a href="#4-3-功能清单" class="headerlink" title="4.3. 功能清单"></a>4.3. 功能清单</h4><ul><li>创建：选应用 → 选分支（版本） → 填写 TTL → 一键生成</li><li>查看：列表展示泳道、剩余 TTL、Pod 数等</li><li>更新：仅允许改镜像或副本数，提交后滚动升级</li><li>删除：二次确认后软删除并级联回收资源</li><li>清理：TTL 到期自动删除；可一键续期，最多续 3 次</li></ul><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="https://help.aliyun.com/zh/asm/sidecar/flow-lane-overview" target="_blank" rel="noopener">https://help.aliyun.com/zh/asm/sidecar/flow-lane-overview</a></li><li><a href="https://istio.io/latest/zh/docs/concepts/traffic-management" target="_blank" rel="noopener">https://istio.io/latest/zh/docs/concepts/traffic-management</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾「Docker公共构建机」超时问题排查</title>
      <link href="/2024/08/20/devops/landun_clb/"/>
      <url>/2024/08/20/devops/landun_clb/</url>
      
        <content type="html"><![CDATA[<p>在使用蓝盾「Docker公共构建机」时，我们发现构建机偶尔无法就绪。排查后发现问题出在拉起的 Pod 在安装蓝盾 Agent 时卡住。经进一步分析，这是由于该 Pod 与 Nginx Ingress Pod 被调度到了同一节点，而同节点访问异常。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在阿里云ACK集群中，出现同节点访问异常的网络现象：</p><table><thead><tr><th>场景</th><th>流量路径</th><th>结果</th></tr></thead><tbody><tr><td>同节点</td><td>Pod → CLB VIP → 同节点 NodePort → 被 CLB 丢弃（回环限制）</td><td>❌ 超时</td></tr><tr><td>跨节点</td><td>Pod → CLB VIP → 其他节点 NodePort → Ingress Pod</td><td>✅ 正常</td></tr></tbody></table><ul><li><strong>跨节点访问正常</strong>：业务 Pod 与 Nginx Ingress Controller 部署在不同节点时，通过 CLB 访问服务完全正常。</li><li><strong>同节点访问超时</strong>：当业务 Pod 与 Ingress Controller 调度到同一节点时，TCP 连接超时：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Pod内测试</span></span><br><span class="line">curl http://devops.bk.xxx.xxx/static/<span class="built_in">local</span>/files/docker_init.sh</span><br><span class="line"><span class="comment"># 返回错误</span></span><br><span class="line">curl: (28) Failed to connect to devops.bk.xxx.xxx port 80: Connection timed out</span><br></pre></td></tr></table></figure></li></ul><h3 id="关键组件"><a href="#关键组件" class="headerlink" title="关键组件"></a>关键组件</h3><ul><li>Kubernetes 1.20.11 + Terway网络插件（非ENITrunking模式）</li><li>Nginx Ingress 0.44.0（externalTrafficPolicy: Local）</li><li>CLB 类型：四层TCP监听（端口80）</li><li>服务转发模式：IPVS</li></ul><h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><h4 id="基础检查"><a href="#基础检查" class="headerlink" title="基础检查"></a>基础检查</h4><p><strong>网络连通性测试：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DNS解析正常</span></span><br><span class="line">ping devops.bk.xxx.xxx  <span class="comment"># 返回CLB VIP 10.200.x.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP连接失败（同节点）</span></span><br><span class="line">telnet 10.200.x.x 80    <span class="comment"># Connection timed out</span></span><br></pre></td></tr></table></figure><p><strong>安全组验证：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">已确认放行VPC内网段（10.200.0.0/16, 100.100.0.0/16），排除ACL拦截。</span><br></pre></td></tr></table></figure><h4 id="流量路径分析"><a href="#流量路径分析" class="headerlink" title="流量路径分析"></a>流量路径分析</h4><p><strong>CLB后端健康状态：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get endpoints -n kube-system nginx-ingress-controller</span><br><span class="line">ENDPOINTS: 10.212.x.x:80,10.212.x.x:443  <span class="comment"># 正常</span></span><br></pre></td></tr></table></figure><p><strong>Ingress Controller配置：</strong><br><code>externalTrafficPolicy: Local</code>导致 CLB 只会将流量转发到有 Ingress Pod 的节点。</p><p><strong>节点网络抓包：</strong><br>在Ingress节点执行抓包后，发现 CLB 的请求包能到达节点，但未转发到 Ingress Pod。</p><h4 id="根因定位"><a href="#根因定位" class="headerlink" title="根因定位"></a>根因定位</h4><p>阿里云 CLB 对四层TCP监听器默认禁止回环流量（即后端服务器通过 CLB VIP访问自身服务），相关<a href="https://help.aliyun.com/zh/slb/why-am-i-unable-to-access-an-slb-instance" target="_blank" rel="noopener">阿里云文档</a>。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>当前使用修改CoreDNS配置的临时方案，其他方案待评估后实施。</p><h4 id="修改CoreDNS配置（临时）"><a href="#修改CoreDNS配置（临时）" class="headerlink" title="修改CoreDNS配置（临时）"></a>修改CoreDNS配置（临时）</h4><p>将相关域名解析到 Ingress Service 的内网IP（如ClusterIP），绕过 CLB。</p><h4 id="更新集群组件"><a href="#更新集群组件" class="headerlink" title="更新集群组件"></a>更新集群组件</h4><ul><li>升级 Nginx Ingress ：使用新版本，已修复兼容性问题。</li><li>升级 Terway 插件：使用最新版本，优化节点内流量路由。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://help.aliyun.com/zh/slb/why-am-i-unable-to-access-an-slb-instance" target="_blank" rel="noopener">为什么无法访问负载均衡</a></li><li><a href="https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/work-with-terway?spm=a2c4g.11186623.0.i13" target="_blank" rel="noopener">使用Terway网络插件</a></li><li><a href="https://www.tencentcloud.com/zh/document/product/457/42976" target="_blank" rel="noopener">CLB 回环问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
            <tag> clb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾存储服务梳理和数据迁移(v7.1)</title>
      <link href="/2024/06/04/devops/landun_storage/"/>
      <url>/2024/06/04/devops/landun_storage/</url>
      
        <content type="html"><![CDATA[<p>蓝鲸持续集成平台（蓝盾）是一个免费并开源的 CI 服务。本文档旨在提供蓝鲸智云 7.1 版本蓝盾的存储服务梳理及数据迁移方案。</p><a id="more"></a><h3 id="1-存储服务梳理"><a href="#1-存储服务梳理" class="headerlink" title="1. 存储服务梳理"></a>1. 存储服务梳理</h3><table><thead><tr><th>存储服务</th><th>CPU/内存/磁盘</th><th>部署方式</th><th>实际资源配置</th><th>所需版本</th><th>连接串配置</th></tr></thead><tbody><tr><td>mysql</td><td>1C/2G/50Gi</td><td>云服务</td><td>2core4G 100G</td><td>5.7.26 (utf8字符集)</td><td>values文件中配置</td></tr><tr><td>redis</td><td>1C/1G/20Gi</td><td>云服务</td><td>2分片4G</td><td>6.2.5-debian-10-r63</td><td></td></tr><tr><td>redis-cluster</td><td>-/-/20Gi</td><td>云服务</td><td>-</td><td>6.2.6-debian-10-r178</td><td></td></tr><tr><td>mongodb</td><td>-/-/20Gi</td><td>云服务</td><td>4C8G</td><td>4.4.x</td><td></td></tr><tr><td>elastic</td><td>2C/4G</td><td>云服务</td><td>2c4g 20GiB</td><td>7.16.2-debian-10-r0</td><td></td></tr><tr><td>rabbitmq</td><td>-/-/20Gi</td><td>自建</td><td></td><td>3.8.21-debian-10-r0</td><td></td></tr><tr><td>zookeeper</td><td>-/-/20Gi</td><td>自建</td><td></td><td>bitnami/zookeeper:3.8.0-debian-10-r20</td><td></td></tr><tr><td>etcd</td><td>-/-/20Gi</td><td>自建</td><td></td><td>bitnami/etcd:3.5.4-debian-11-r31</td><td></td></tr><tr><td>influxdb</td><td>-/-/20Gi</td><td>自建</td><td></td><td>influxdb:1.8.6-alpine</td><td></td></tr></tbody></table><p>基础存储服务包含：mysql、redis、mongodb、rabbitmq、elastic、zookeeper、etcd。<br>蓝盾存储服务包含：mysql、redis、mongodb、rabbitmq、elastic、influxdb。<br>其中 mysql、redis、mongodb、rabbitmq、elastic 可以复用。</p><h3 id="2-基础存储服务"><a href="#2-基础存储服务" class="headerlink" title="2. 基础存储服务"></a>2. 基础存储服务</h3><p>包含：mysql、redis、mongodb、rabbitmq、elastic、zookeeper、etcd。</p><h4 id="2-1-mysql"><a href="#2-1-mysql" class="headerlink" title="2.1 mysql"></a>2.1 mysql</h4><p>镜像： hub.bktencent.com/bitnami/mysql:5.7.26</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">"1"</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="comment"># 处于同一集群可以使用k8s service 名</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">"bk-mysql-mysql"</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">rootPassword:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="comment"># 默认平台和saas都复用该mysql示例时，请分配大一点的磁盘空间给数据盘。</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">50Gi</span></span><br></pre></td></tr></table></figure><h4 id="2-2-rabbitmq"><a href="#2-2-rabbitmq" class="headerlink" title="2.2 rabbitmq"></a>2.2 rabbitmq</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">"bk-rabbitmq"</span></span><br><span class="line">  <span class="comment"># AMQP协议端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="attr">erlangCookie:</span> <span class="string">bluekingcookie</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">20Gi</span></span><br></pre></td></tr></table></figure><h4 id="2-3-redis"><a href="#2-3-redis" class="headerlink" title="2.3 redis"></a>2.3 redis</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">64Mi</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">bk-redis-master</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">"blueking"</span></span><br></pre></td></tr></table></figure><h4 id="2-4-redis-cluster"><a href="#2-4-redis-cluster" class="headerlink" title="2.4 redis-cluster"></a>2.4 redis-cluster</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redisCluster:</span></span><br><span class="line">  <span class="attr">persistence:</span> </span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">bk-redis-cluster</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">"blueking"</span></span><br></pre></td></tr></table></figure><h4 id="2-5-mongodb"><a href="#2-5-mongodb" class="headerlink" title="2.5 mongodb"></a>2.5 mongodb</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mongodb:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">bk-mongodb-headless</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">host_port:</span> <span class="string">bk-mongodb-headless:27017</span></span><br><span class="line">  <span class="attr">rootUsername:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">rootPassword:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="attr">rsName:</span> <span class="string">rs0</span></span><br><span class="line">  <span class="comment"># 以下变量对部署bitnamiMongodb生效，外部mongodb服务不需要</span></span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">replicaSetKey:</span> <span class="string">xEfhjshh3APP0arf</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">20Gi</span></span><br></pre></td></tr></table></figure><h4 id="2-6-elastic"><a href="#2-6-elastic" class="headerlink" title="2.6 elastic"></a>2.6 elastic</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">master:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">heapSize:</span> <span class="string">512m</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">2000m</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">256Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">10Gi</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">2000m</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">4096Mi</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">256Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">40Gi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">coordinating:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">2000m</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">256Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line"></span><br><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="comment"># 集群内访问的k8s service</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">bk-elastic-elasticsearch-master.blueking.svc.cluster.local</span></span><br><span class="line">  <span class="comment"># http协议的REST端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">elastic</span> </span><br><span class="line">  <span class="comment"># 以下变量对部署bitnamiElasticsearch生效，外部elasticsearch服务不需要</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">blueking</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">40Gi</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span></span><br></pre></td></tr></table></figure><h4 id="2-7-zookeeper"><a href="#2-7-zookeeper" class="headerlink" title="2.7 zookeeper"></a>2.7 zookeeper</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">250m</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">256Mi</span></span><br></pre></td></tr></table></figure><h4 id="2-8-etcd"><a href="#2-8-etcd" class="headerlink" title="2.8 etcd"></a>2.8 etcd</h4><h3 id="3-蓝盾存储服务"><a href="#3-蓝盾存储服务" class="headerlink" title="3. 蓝盾存储服务"></a>3. 蓝盾存储服务</h3><p>包含：mysql、redis、mongodb、rabbitmq、elastic、influxdb。</p><h4 id="3-1-自建存储服务"><a href="#3-1-自建存储服务" class="headerlink" title="3.1 自建存储服务"></a>3.1 自建存储服务</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">primary:</span></span><br><span class="line">    <span class="attr">persistence:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">replica:</span></span><br><span class="line">    <span class="attr">persistence:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">persistence:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">persistence:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">persistence:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line"><span class="attr">influxdb:</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span></span><br><span class="line"><span class="attr">mongodb:</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span></span><br></pre></td></tr></table></figure><h4 id="3-2-外部数据库"><a href="#3-2-外部数据库" class="headerlink" title="3.2 外部数据库"></a>3.2 外部数据库</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">externalMysql:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bkci</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bkci</span></span><br><span class="line"><span class="attr">externalRedis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bkci</span></span><br><span class="line"><span class="attr">externalElasticsearch:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bkci</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bkci</span></span><br><span class="line"><span class="attr">externalRabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bkci</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bkci</span></span><br><span class="line">  <span class="attr">vhost:</span> <span class="string">bkci</span></span><br><span class="line"><span class="attr">externalInfluxdb:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bkci</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bkci</span></span><br><span class="line"><span class="attr">externalMongodb:</span></span><br><span class="line">  <span class="attr">turbo:</span></span><br><span class="line">    <span class="attr">turboUrl:</span> <span class="string">mongodb://bkci:bkci@localhost:27017/db_turbo</span></span><br><span class="line">    <span class="attr">quartzUrl:</span> <span class="string">mongodb://bkci:bkci@localhost:27017/db_quart</span></span><br></pre></td></tr></table></figure><h3 id="4-数据迁移-Mysql"><a href="#4-数据迁移-Mysql" class="headerlink" title="4. 数据迁移(Mysql)"></a>4. 数据迁移(Mysql)</h3><h4 id="4-1-数据备份"><a href="#4-1-数据备份" class="headerlink" title="4.1 数据备份"></a>4.1 数据备份</h4><p><strong>1.备份脚本准备</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MYSQL_USER=root</span><br><span class="line">MYSQL_HOST=127.0.0.1</span><br><span class="line">MYSQL_PASSWD=</span><br><span class="line">ignoredblist=<span class="string">'information_schema|mysql|test|db_infobase|performance_schema|sys'</span></span><br><span class="line">dblist=<span class="string">"<span class="variable">$(mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWD -Nse"show databases;"|grep -Ewv "$ignoredblist" | xargs echo)</span>"</span></span><br><span class="line"></span><br><span class="line">mysqldump -h<span class="variable">$MYSQL_HOST</span> -u<span class="variable">$MYSQL_USER</span> -p<span class="variable">$MYSQL_PASSWD</span> --skip-opt --create-options --default-character-set=utf8mb4 -R  -E -q -e --single-transaction --no-autocommit --max-allowed-packet=1G  --hex-blob -B <span class="variable">$dblist</span> &gt; /tmp/bk_mysql_alldata.sql</span><br></pre></td></tr></table></figure><p>将其中的MYSQL_USER、MYSQL_HOST、MYSQL_PASSWORD更换成需要备份的数据库及用户名密码。存为 <code>dbbackup_mysql.sh</code> 文件。</p><p><strong>2.将脚本拷贝到容器内执行</strong><br>以自建的蓝盾mysql为例</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上面的数据备份脚本拷贝至自建的蓝盾mysql的pod中</span></span><br><span class="line">kubectl cp -n blueking /data/dbbackup_mysql.sh bk-ci-mysql-0:/tmp/dbbackup_mysql.sh</span><br><span class="line"><span class="comment"># 开始执行数据备份</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it -n blueking bk-mysql-mysql-master-0 -- bash /tmp/dbbackup_mysql.sh</span><br><span class="line"><span class="comment"># 将备份好的sql从pod拷贝到本机暂存</span></span><br><span class="line">kubectl cp -n blueking bk-ci-mysql-0:/tmp/bk_mysql_alldata.sql /data/bkmysql_bak/bk_mysql_alldata.sql</span><br></pre></td></tr></table></figure><p>最后一步数据拷贝可以不做，直接在这个pod里进行后续的数据导入操作。</p><h4 id="4-2-数据导入"><a href="#4-2-数据导入" class="headerlink" title="4.2 数据导入"></a>4.2 数据导入</h4><p>上一步的数据备份是用<code>root</code>用户进行操作，备份中涉及存储过程函数和赋权。</p><blockquote><p>注意：如果导入到阿里云mysql服务中需要处理导出的sql文件，因为阿里云提供的mysql服务，<code>root</code>作为保留字段，不能由用户自由创建，但允许创建拥有<code>root</code>权限的账户，所以需要修改备份数据中相关的内容，更换成实际使用的数据库用户，以替换成 <code>superuser</code> 为例执行如下命令：<br></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计"`root`@"字符串一共有多少个</span></span><br><span class="line">grep -o <span class="string">'`root`@'</span> bk_mysql_alldata.sql | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将"`root`@" 修改为 "`superuser`@"</span></span><br><span class="line">sed -i <span class="string">'s/`root`@/`superuser`@/g'</span> bk_mysql_alldata.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二次确认</span></span><br><span class="line">grep -o <span class="string">'`superuser`@'</span> bk_mysql_alldata.sql | wc -l</span><br></pre></td></tr></table></figure><p></p></blockquote><p><strong>导入</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">mysql -h <span class="variable">$NEW_MYSQL_HOST</span> -usuperuser -p<span class="variable">$YOUR_PASSWORD</span> --force &lt; bk_mysql_alldata.sql</span><br></pre></td></tr></table></figure><p><strong>检查</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -h$MYSQL_HOST -usuperuser -p$MYSQL_PASSWD -Nse"<span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'devops_ci%'</span>;"</span><br></pre></td></tr></table></figure><h4 id="4-3-Helmfile更新"><a href="#4-3-Helmfile更新" class="headerlink" title="4.3 Helmfile更新"></a>4.3 Helmfile更新</h4><p>变更 bkci\environments\default\bkci\bkci-custom-values.yaml.gotmpl 文件后执行 helmfile 相关命令更新服务。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾快速部署文档(v7.1)</title>
      <link href="/2024/05/24/devops/landun_install/"/>
      <url>/2024/05/24/devops/landun_install/</url>
      
        <content type="html"><![CDATA[<p>蓝鲸持续集成平台（蓝盾）是一个免费并开源的 CI 服务。本文档旨在提供蓝鲸智云 7.1 版本蓝盾的快速部署指南。通过详细的步骤说明和脚本示例，帮助用户在 Kubernetes 集群上快速搭建蓝鲸基础服务和蓝盾平台，并实现 HTTPS 安全访问。</p><a id="more"></a><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>需要先准备一台中控机，在中控机安装 kubectl、helm、helmfile 等工具，以及蓝鲸安装脚本。然后部署基础套餐，最后再部署持续集成套餐。简单来说就是三个步骤：1.准备环境 -&gt; 2.部署基础服务 -&gt; 3.部署蓝盾。</p><h3 id="2-准备中控机"><a href="#2-准备中控机" class="headerlink" title="2. 准备中控机"></a>2. 准备中控机</h3><p>按照<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/prepare-bkctrl.md" target="_blank" rel="noopener">官方文档</a>安装和配置即可。</p><h3 id="3-部署基础服务"><a href="#3-部署基础服务" class="headerlink" title="3. 部署基础服务"></a>3. 部署基础服务</h3><p>需要按照<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/custom-values.md" target="_blank" rel="noopener">官方文档</a>一步步部署。</p><h4 id="3-1-下载安装文件"><a href="#3-1-下载安装文件" class="headerlink" title="3.1 下载安装文件"></a>3.1 下载安装文件</h4><p>请在 <code>中控机</code> 使用下载脚本下载蓝鲸 helmfile 包及公共证书。（ helmfile相关value文件在git上维护）</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">bkdl-7.1-stable.sh -ur latest base demo</span><br></pre></td></tr></table></figure><p>这些文件默认放在了 <code>~/bkce7.1-install/</code> 目录。</p><h4 id="3-2-配置-Helm-Chart-仓库"><a href="#3-2-配置-Helm-Chart-仓库" class="headerlink" title="3.2 配置 Helm Chart 仓库"></a>3.2 配置 Helm Chart 仓库</h4><p>添加 <code>charts</code> 仓库</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helm repo add blueking https://hub.bktencent.com/chartrepo/blueking</span><br><span class="line">helm repo update</span><br><span class="line">helm repo list</span><br></pre></td></tr></table></figure><h4 id="3-3-配置全局-custom-values"><a href="#3-3-配置全局-custom-values" class="headerlink" title="3.3 配置全局 custom-values"></a>3.3 配置全局 custom-values</h4><p>相关文件已经修改，在git上维护，配置访问域名。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">BK_DOMAIN=bk.blazehu.com</span>  <span class="comment"># 请修改为你分配给蓝鲸平台的主域名 cd ~/bkce7.1-install/blueking/  # 进入工作目录# 可使用如下命令添加域名。如果文件已存在，请手动编辑。custom=environments/default/custom.yaml</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">"$custom"</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">imageRegistry:</span> <span class="string">$&#123;REGISTRY:-hub.bktencent.com&#125;</span></span><br><span class="line"><span class="attr">domain:</span></span><br><span class="line">  <span class="attr">bkDomain:</span> <span class="string">$BK_DOMAIN</span></span><br><span class="line">  <span class="attr">bkMainSiteDomain:</span> <span class="string">$BK_DOMAIN</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="3-4-生成-values-文件"><a href="#3-4-生成-values-文件" class="headerlink" title="3.4 生成 values 文件"></a>3.4 生成 values 文件</h4><p>还有一些 values 文件随着部署环境的不同而变化，所以我们提供了脚本快速生成。</p><p><strong>生成蓝鲸 app code 对应的 secret</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">./scripts/generate_app_secret.sh ./environments/default/app_secret.yaml</span><br></pre></td></tr></table></figure><p><strong>生成 apigw 所需的 keypair</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">./scripts/generate_rsa_keypair.sh ./environments/default/bkapigateway_builtin_keypair.yaml</span><br></pre></td></tr></table></figure><p><strong>生成 paas 所需的 clusterAdmin</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">./scripts/create_k8s_cluster_admin_for_paas3.sh</span><br></pre></td></tr></table></figure><h4 id="3-5-安装入口网关"><a href="#3-5-安装入口网关" class="headerlink" title="3.5 安装入口网关"></a>3.5 安装入口网关</h4><p><strong>3.5.1 安装 ingress controller</strong><br>先检查你的环境是否已经部署了 ingress controller:</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">kubectl get pods -A -l app.kubernetes.io/name=ingress-nginx</span><br></pre></td></tr></table></figure><p>如果没有，则使用如下命令创建：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helmfile -f 00-ingress-nginx.yaml.gotmpl sync</span><br><span class="line">kubectl get pods -A -l app.kubernetes.io/name=ingress-nginx  查看创建的pod</span><br></pre></td></tr></table></figure><p>pops集群相关标签如下：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">kubectl get pods -A -l app=ingress-nginx  <span class="comment"># 查看创建的pod</span></span><br><span class="line">IP1=$(kubectl get svc -A -l app=nginx-ingress-lb -o jsonpath=<span class="string">'&#123;.items[0].status.loadBalancer.ingress[0].ip&#125;'</span>)</span><br><span class="line"><span class="comment"># IP1=$(kubectl get svc -A -l app.kubernetes.io/name=ingress-nginx -o jsonpath='&#123;.items[0].status.loadBalancer.ingress[0].ip&#125;')</span></span><br></pre></td></tr></table></figure><p><strong>3.5.2 配置 coredns</strong><br>在部署过程中，会在容器内访问这些域名，所以需要提前配置 coredns，将蓝鲸域名解析到 service IP。</p><blockquote><p>注意：当 service 被删除，重建后 clusterIP 会变动，此时需刷新 hosts 文件。</p></blockquote><p>因此需要注入 hosts 配置项到 kube-system namespace 下的 coredns 系列 pod，步骤如下：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/  <span class="comment"># 进入工作目录</span></span><br><span class="line">BK_DOMAIN=$(yq e <span class="string">'.domain.bkDomain'</span> environments/default/custom.yaml)  <span class="comment"># 从自定义配置中提取, 也可自行赋值</span></span><br><span class="line"><span class="comment">#IP1=$(kubectl get svc -A -l app.kubernetes.io/instance=ingress-nginx -o jsonpath='&#123;.items[0].spec.clusterIP&#125;')</span></span><br><span class="line">IP1=$(kubectl get svc -A -l app=nginx-ingress-lb -o jsonpath=<span class="string">'&#123;.items[0].status.loadBalancer.ingress[0].ip&#125;'</span>)</span><br><span class="line">./scripts/control_coredns.sh update <span class="string">"<span class="variable">$IP1</span>"</span> <span class="variable">$BK_DOMAIN</span> bkrepo.<span class="variable">$BK_DOMAIN</span> docker.<span class="variable">$BK_DOMAIN</span> bkapi.<span class="variable">$BK_DOMAIN</span> bkpaas.<span class="variable">$BK_DOMAIN</span> bkiam-api.<span class="variable">$BK_DOMAIN</span> bkiam.<span class="variable">$BK_DOMAIN</span> apps.<span class="variable">$BK_DOMAIN</span> bknodeman.<span class="variable">$BK_DOMAIN</span> job.<span class="variable">$BK_DOMAIN</span> jobapi.<span class="variable">$BK_DOMAIN</span></span><br><span class="line">./scripts/control_coredns.sh update <span class="string">"<span class="variable">$IP1</span>"</span> devops.<span class="variable">$BK_DOMAIN</span></span><br><span class="line">./scripts/control_coredns.sh list  <span class="comment"># 检查添加的记录。</span></span><br></pre></td></tr></table></figure><p>确认注入结果，执行如下命令：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/  进入工作目录</span><br><span class="line">./scripts/control_coredns.sh list</span><br></pre></td></tr></table></figure><p>参考输出如下：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">10.241.0.9 bk.blazehu.com</span><br><span class="line">10.241.0.9 apps.bk.blazehu.com</span><br><span class="line">10.241.0.9 bkrepo.bk.blazehu.com</span><br><span class="line">10.241.0.9 docker.bk.blazehu.com</span><br><span class="line">10.241.0.9 bkapi.bk.blazehu.com</span><br><span class="line">10.241.0.9 bkpaas.bk.blazehu.com</span><br><span class="line">10.241.0.9 bkiam-api.bk.blazehu.com</span><br><span class="line">10.241.0.9 bkiam.bk.blazehu.com</span><br><span class="line">10.241.0.9 bcs.bk.blazehu.com</span><br><span class="line">10.241.0.9 bknodeman.bk.blazehu.com</span><br><span class="line">10.241.0.9 job.bk.blazehu.com</span><br><span class="line">10.241.0.9 jobapi.bk.blazehu.com</span><br></pre></td></tr></table></figure><h4 id="3-6-部署或对接存储服务"><a href="#3-6-部署或对接存储服务" class="headerlink" title="3.6 部署或对接存储服务"></a>3.6 部署或对接存储服务</h4><p><strong>3.6.1 部署蓝鲸预置的存储服务</strong><br>参考<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/storage-services.md" target="_blank" rel="noopener">官方文档</a>安装，相关helm配置已经放在git上维护，可以直接简单执行以下命令：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helmfile -f base-storage.yaml.gotmpl sync</span><br></pre></td></tr></table></figure><blockquote><p>注意：我当前使用阿里云盘，使用该存储类创建的存储盘最小容量为20Gi，目前git上已经都修改为20Gi.</p></blockquote><p><strong>3.6.2 对接已有的存储服务</strong><br>禁用蓝鲸内置服务，配置使用已有服务。请参考helmfile定义及values文件自行研究。参考官方文档的<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/storage-services.md" target="_blank" rel="noopener">例子</a>。</p><h4 id="3-7-部署基础套餐"><a href="#3-7-部署基础套餐" class="headerlink" title="3.7 部署基础套餐"></a>3.7 部署基础套餐</h4><p>通过helmfile安装 base-blueking.yaml.gotmpl ，按照顺序依次安装。具体每层安装的内容可以查看文件内容。</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=first sync</span><br><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=second sync</span><br><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=third sync</span><br><span class="line"><span class="comment">#helmfile -f base-blueking.yaml.gotmpl -l seq=fourth sync</span></span><br></pre></td></tr></table></figure><h4 id="3-8-访问蓝鲸桌面"><a href="#3-8-访问蓝鲸桌面" class="headerlink" title="3.8 访问蓝鲸桌面"></a>3.8 访问蓝鲸桌面</h4><p>在负载均衡器配置后端为 ingress-nginx pod 所在机器的内网 IP，端口为 80。详细信息参考<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/manual-install-bkce.md" target="_blank" rel="noopener">文档</a>。</p><h4 id="3-9-对接Ldap服务"><a href="#3-9-对接Ldap服务" class="headerlink" title="3.9 对接Ldap服务"></a>3.9 对接Ldap服务</h4><p>在用户中心里配置Ldap相关配置，然后更新 bk-user-api-web 服务的镜像。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_install_ldap0.png" alt="landun_install_ldap0"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_install_ldap1.png" alt="landun_install_ldap1"></p><h3 id="4-部署蓝盾"><a href="#4-部署蓝盾" class="headerlink" title="4. 部署蓝盾"></a>4. 部署蓝盾</h3><p>参考<a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/install-ci-suite.md" target="_blank" rel="noopener">官方文档</a>部署，配置 custom values 的内容提前修改完成，执行类似部署基础服务的以下命令：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/  <span class="comment"># 进入工作目录</span></span><br><span class="line">helmfile -f 03-bkci.yaml.gotmpl sync  <span class="comment"># 部署</span></span><br><span class="line">helmfile -f 03-bkci.yaml.gotmpl apply <span class="comment"># 更新</span></span><br></pre></td></tr></table></figure><p>剩下的步骤参考官方文档执行即可，主要步骤有以下三个，其他的步骤可以不做。</p><h4 id="4-1-注册默认构建镜像"><a href="#4-1-注册默认构建镜像" class="headerlink" title="4.1 注册默认构建镜像"></a>4.1 注册默认构建镜像</h4><p>我们提供了 bkci/ci 镜像用于提供构建环境。为了加速镜像下载过程，可以修改镜像地址为 hub.bktencent.com/bkci/ci，或者为你自己托管的内网 registry。<br>先检查数据库有没有历史数据：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it -n blueking bk-ci-mysql-0 -- /bin/bash -c <span class="string">'MYSQL_PWD="$MYSQL_ROOT_PASSWORD" mysql -u root -e "USE devops_ci_store; SELECT IMAGE_NAME,IMAGE_CODE,IMAGE_REPO_NAME FROM T_IMAGE WHERE IMAGE_CODE = \"bkci\" ;"'</span></span><br></pre></td></tr></table></figure><p>请根据结果进行操作：</p><ul><li>如果有显示镜像数据，可以修改镜像地址为蓝鲸国内仓库，也可改为你已经缓存在内网的镜像：<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">kubectl exec -it -n blueking bk-ci-mysql<span class="number">-0</span> -- /bin/bash -c 'MYSQL_PWD=<span class="string">"$MYSQL_ROOT_PASSWORD"</span> mysql -u root -e <span class="string">"USE devops_ci_store; UPDATE  T_IMAGE SET IMAGE_REPO_NAME=<span class="subst">\"</span>hub.bktencent.com/bkci/ci<span class="subst">\"</span> WHERE IMAGE_CODE = <span class="subst">\"</span>bkci<span class="subst">\"</span> ;"</span>'</span><br></pre></td></tr></table></figure></li><li>然后重新查询数据库，可以看到 <code>IMAGE_REPO_NAME</code> 列已经更新。</li><li>如果没有镜像，可以新增：<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -n blueking deploy/bk-ci-bk-ci-store -- \curl -vs http://bk-ci-bk-ci-store.blueking.svc.cluster.local/api/op/market/image/init -X POST \-H <span class="string">'X-DEVOPS-UID: admin'</span> -H <span class="string">'Content-type: application/json'</span> -d <span class="string">'&#123;"imageCode":"bkci","imageName":"bkci","imageRepo":"hub.bktencent.com/bkci/ci","projectCode":"demo","userId":"admin"&#125;'</span> | jq .</span><br></pre></td></tr></table></figure><blockquote><p>注意：当你单独卸载蓝盾重装后，可能出现查询镜像为空，但是新增镜像时报错 { status: 400, message: “权限中心创建项目失败” } 的情况。这是因为权限中心存在蓝盾 demo 项目的数据所致，我们后续会优化蓝盾单独卸载的文档。请先手动新建项目，并修改上述代码中 projectCode 字段的值。</p></blockquote></li></ul><h4 id="4-2-对接制品库"><a href="#4-2-对接制品库" class="headerlink" title="4.2 对接制品库"></a>4.2 对接制品库</h4><p>蓝盾依靠蓝鲸制品库来提供流水线仓库和自定义仓库，需要调整制品库的认证模式。当 bk-ci release 成功启动后，我们开始配置蓝鲸制品库，并注册到蓝盾中。</p><p><strong>4.2.1 修改 bk-repo custom values</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/</span><br><span class="line"><span class="keyword">case</span> $(yq e <span class="string">'.auth.config.realm'</span> environments/default/bkrepo-custom-values.yaml.gotmpl 2&gt;/dev/null) <span class="keyword">in</span></span><br><span class="line">  null|<span class="string">""</span>)</span><br><span class="line">    tee -a environments/default/bkrepo-custom-values.yaml.gotmpl &lt;&lt;&lt; $<span class="string">'auth:\n  config:\n    realm: devops'</span></span><br><span class="line">  ;;</span><br><span class="line">  devops)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"environments/default/bkrepo-custom-values.yaml.gotmpl 中配置了 .auth.config.realm=devops, 无需修改."</span></span><br><span class="line">  ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"environments/default/bkrepo-custom-values.yaml.gotmpl 中配置了 .auth.config.realm 为其他值, 请手动修改值为 devops."</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>修改成功后，继续在工作目录执行如下命令使修改生效：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helmfile -f base-blueking.yaml.gotmpl -l name=bk-repo apply</span><br></pre></td></tr></table></figure><p><strong>4.2.2 检查配置是否生效</strong><br>检查 release 生效的 values 和 configmap 是否重新渲染。<br>请在 中控机 执行：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helm get values -n blueking bk-repo | yq e <span class="string">'.auth.config.realm'</span></span><br><span class="line">kubectl get cm -n blueking bk-repo-bkrepo-auth -o json | jq -r <span class="string">'.data."application.yml"'</span> | yq e <span class="string">'.auth.realm'</span> -</span><br></pre></td></tr></table></figure><p>预期 2 条命令均显示 devops。如果任意配置没有生效，请检查上述 helmfile 命令的输出是否正常。</p><p><strong>4.2.3 重启 bk-repo auth 微服务</strong><br>因为 deployment 没有变动，所以不会自动重启，此处需要单独重启：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">kubectl rollout restart deployment -n blueking bk-repo-bkrepo-auth</span><br></pre></td></tr></table></figure><p><strong>4.2.4 在蓝盾中注册制品库</strong><br>请在 <code>中控机</code> 执行：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/ </span><br><span class="line">BK_DOMAIN=$(yq e <span class="string">'.domain.bkDomain'</span> environments/default/custom.yaml)  </span><br><span class="line">kubectl <span class="built_in">exec</span> -i -n blueking deploy/bk-ci-bk-ci-project -- curl -sS -X PUT -H <span class="string">'Content-Type: application/json'</span> -H <span class="string">'Accept: application/json'</span> -H <span class="string">'X-DEVOPS-UID: admin'</span> -d <span class="string">"&#123;\"showProjectList\":true,\"showNav\":true,\"status\":\"ok\",\"deleted\":false,\"iframeUrl\":\"//bkrepo.<span class="variable">$BK_DOMAIN</span>/ui/\"&#125;"</span> <span class="string">"http://bk-ci-bk-ci-project.blueking.svc.cluster.local/api/op/services/update/Repo"</span></span><br></pre></td></tr></table></figure><h4 id="4-3-下载和上传插件"><a href="#4-3-下载和上传插件" class="headerlink" title="4.3 下载和上传插件"></a>4.3 下载和上传插件</h4><p><strong>4.3.1 下载插件</strong><br>请在 <code>中控机</code> 执行：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">bkdl-7.1-stable.sh -ur latest ci-plugins</span><br></pre></td></tr></table></figure><p><strong>4.3.2 上传插件</strong><br>此操作只能新建插件，每个插件只能上传一次。</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bkce7.1-install/blueking/  <span class="comment"># 进入工作目录</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> ../ci-plugins/*.zip; <span class="keyword">do</span></span><br><span class="line">    atom=<span class="string">"<span class="variable">$&#123;f##*/&#125;</span>"</span></span><br><span class="line">    atom=<span class="variable">$&#123;atom%.zip&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 <span class="string">"upload <span class="variable">$atom</span> from <span class="variable">$f</span>"</span></span><br><span class="line">    kubectl <span class="built_in">exec</span> -i -n blueking deploy/bk-ci-bk-ci-store -- \</span><br><span class="line">      curl -s \</span><br><span class="line">      http://bk-ci-bk-ci-store.blueking.svc.cluster.local/api/op/pipeline/atom/deploy/<span class="string">"?publisher=admin"</span> \</span><br><span class="line">      -H <span class="string">'X-DEVOPS-UID: admin'</span> -F atomCode=<span class="variable">$atom</span> -F file=@- &lt; <span class="string">"<span class="variable">$f</span>"</span> | jq .</span><br><span class="line">      <span class="comment"># 设置为默认插件，全部项目可见。</span></span><br><span class="line">    kubectl <span class="built_in">exec</span> -n blueking deploy/bk-ci-bk-ci-store -- \</span><br><span class="line">    curl -s http://bk-ci-bk-ci-store.blueking.svc.cluster.local/api/op/pipeline/atom/default/atomCodes/<span class="variable">$atom</span> \-H <span class="string">'X-DEVOPS-UID: admin'</span> -X POST | jq .</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong>：</p><ul><li><strong>插件重复上传</strong>：如果重复执行会报错：{“status”: 2100001, “message”: “系统内部繁忙，请稍后再试”}。后续更新插件，请访问蓝盾研发商店的工作台界面，在列表中找到对应插件进行“升级”操作。</li><li><strong>插件包体过大</strong>：上传或者更新插件报错：”413 Request Entity Too Large”。原因是nginx-ingress的默认配置中proxy-body-size的数值太小，具体解决方式详见：<a href="https://developer.aliyun.com/article/1001630" target="_blank" rel="noopener">Ingress 域名方式导致413 Request Entity Too Large-阿里云开发者社区</a>。</li></ul></blockquote><h3 id="5-TLS配置"><a href="#5-TLS配置" class="headerlink" title="5. TLS配置"></a>5. TLS配置</h3><p>如果开始就准备好了相关证书，那么可以将该步骤提前，在部署基础服务和蓝盾之前就先修改好相关的yaml，将需要创建的Secret和要更新的Ingress配置都提前修改好，然后直接部署即可。</p><h4 id="5-1-购买相关证书"><a href="#5-1-购买相关证书" class="headerlink" title="5.1 购买相关证书"></a>5.1 购买相关证书</h4><p>涉及的域名：bk.blazehu.com、*.bk.blazehu.com（如devops.bk.blazehu.com）。需购买泛域名证书。</p><h4 id="5-2-创建相关Secret（用于存储TLS证书和私钥）"><a href="#5-2-创建相关Secret（用于存储TLS证书和私钥）" class="headerlink" title="5.2 创建相关Secret（用于存储TLS证书和私钥）"></a>5.2 创建相关Secret（用于存储TLS证书和私钥）</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Secret</span></span><br><span class="line">BK_DOMAIN=$(yq e <span class="string">'.domain.bkDomain'</span> environments/default/custom.yaml)</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/<span class="variable">$BK_DOMAIN</span></span><br><span class="line">kubectl create secret tls <span class="variable">$BK_DOMAIN</span> -n blueking --cert=<span class="variable">$HOME</span>/<span class="variable">$BK_DOMAIN</span>/<span class="variable">$BK_DOMAIN</span>.pem --key=<span class="variable">$HOME</span>/<span class="variable">$BK_DOMAIN</span>/<span class="variable">$BK_DOMAIN</span>.key</span><br></pre></td></tr></table></figure><h4 id="5-3-更新-Ingress-TLS"><a href="#5-3-更新-Ingress-TLS" class="headerlink" title="5.3 更新 Ingress TLS"></a>5.3 更新 Ingress TLS</h4><p>在证书及证书secret准备好之后，需要变更蓝鲸系列ingress开启tls的支持，执行对应的脚本</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置变量</span></span><br><span class="line">NAMESPACE=<span class="string">"blueking"</span></span><br><span class="line">DOMAIN_FILE=<span class="string">"environments/default/custom.yaml"</span></span><br><span class="line">BK_DOMAIN=$(yq e <span class="string">'.domain.bkDomain'</span> <span class="string">"<span class="variable">$DOMAIN_FILE</span>"</span>)  <span class="comment"># 从配置文件中读取域名</span></span><br><span class="line">TLS_HOST=<span class="string">"*.<span class="variable">$BK_DOMAIN</span>"</span>  <span class="comment"># 泛域名</span></span><br><span class="line">TLS_SECRET=<span class="string">"<span class="variable">$BK_DOMAIN</span>"</span>  <span class="comment"># Secret 名称与域名一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查域名和 Secret 是否正确</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$BK_DOMAIN</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Error: BK_DOMAIN is not set in <span class="variable">$DOMAIN_FILE</span>."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命名空间中的所有 Ingress 资源</span></span><br><span class="line">ingresses=$(kubectl get ingress -n <span class="string">"<span class="variable">$NAMESPACE</span>"</span> -o jsonpath=<span class="string">'&#123;.items[*].metadata.name&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有 Ingress 资源并更新 TLS 配置</span></span><br><span class="line"><span class="keyword">for</span> ingress <span class="keyword">in</span> <span class="variable">$ingresses</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Updating Ingress: <span class="variable">$ingress</span> in namespace: <span class="variable">$NAMESPACE</span>"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 检查 Ingress 是否已存在 TLS 配置</span></span><br><span class="line">  <span class="keyword">if</span> kubectl get ingress <span class="string">"<span class="variable">$ingress</span>"</span> -n <span class="string">"<span class="variable">$NAMESPACE</span>"</span> -o jsonpath=<span class="string">'&#123;.spec.tls&#125;'</span> | grep -q <span class="string">"<span class="variable">$TLS_HOST</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"TLS configuration for <span class="variable">$TLS_HOST</span> already exists in Ingress <span class="variable">$ingress</span>. Skipping."</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 更新 Ingress 的 TLS 配置</span></span><br><span class="line">  kubectl patch ingress <span class="string">"<span class="variable">$ingress</span>"</span> -n <span class="string">"<span class="variable">$NAMESPACE</span>"</span> --<span class="built_in">type</span>=json -p=<span class="string">'[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "op": "add",</span></span><br><span class="line"><span class="string">      "path": "/spec/tls",</span></span><br><span class="line"><span class="string">      "value": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "hosts": ["'</span><span class="string">"<span class="variable">$TLS_HOST</span>"</span><span class="string">'"],</span></span><br><span class="line"><span class="string">          "secretName": "'</span><span class="string">"<span class="variable">$TLS_SECRET</span>"</span><span class="string">'"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]'</span> || &#123; <span class="built_in">echo</span> <span class="string">"Failed to update Ingress <span class="variable">$ingress</span>"</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Updated Ingress <span class="variable">$ingress</span> with TLS configuration for <span class="variable">$TLS_HOST</span>."</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"All Ingress resources in namespace <span class="variable">$NAMESPACE</span> have been updated with TLS configuration for <span class="variable">$TLS_HOST</span>."</span></span><br></pre></td></tr></table></figure><h4 id="5-4-配置蓝鲸启用HTTPS"><a href="#5-4-配置蓝鲸启用HTTPS" class="headerlink" title="5.4 配置蓝鲸启用HTTPS"></a>5.4 配置蓝鲸启用HTTPS</h4><p>在git仓库维护，主要有两个变更：</p><ul><li>environments/default/custom.yaml: .bkDomainScheme 值设置为 https</li><li>environments/default/bkci/bkci-custom-values.yaml.gotmpl: .config.bkHttpSchema 值设置为 https</li></ul><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">yq -i <span class="string">'.bkDomainScheme = "https"'</span> environments/default/custom.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将bkHttpSchema: https替换为bkHttpSchema: http</span></span><br><span class="line">sed -i <span class="string">'s|bkHttpSchema: http|bkHttpSchema: https|'</span> environments/default/bkci/bkci-custom-values.yaml.gotmpl</span><br></pre></td></tr></table></figure><p><strong>重启服务使https配置生效</strong></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启第一批服务</span></span><br><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=first sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># bk-apigateway 部分 pod 不会重启，主动删除等重建</span></span><br><span class="line">kubectl delete pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-apigateway,app.kubernetes.io/component in (api-support-fe, dashboard-fe)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待 bk-apigateway 全部 pod 重启成功后进行下一步</span></span><br><span class="line">kubectl get pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-apigateway,app.kubernetes.io/component in (api-support-fe, dashboard-fe)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bkrepo 部分 pod 不会重启，主动删除等重建</span></span><br><span class="line">kubectl delete pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-repo,bk.repo.scope=backend'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待 bkrepo 全部 pod 重启成功后进行下一步</span></span><br><span class="line"><span class="comment"># 这里一定要等所有pod重启成功后，才开始下一步，否则会导致服务异常</span></span><br><span class="line"><span class="comment"># repo系列服务会因为阿里云EKS csi插件问题，导致服务卡住，需要手动删除卡在ContainerCreating的pod，让pod重启</span></span><br><span class="line">watch -n 1 kubectl get pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-repo,bk.repo.scope=backend'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启第二批服务</span></span><br><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=second sync</span><br><span class="line"><span class="comment"># 持续观察等 bk-repo-repository pod 全部Ready</span></span><br><span class="line">watch -n 1 kubectl get pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-repo,app.kubernetes.io/component=repository'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启第三批服务</span></span><br><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=third sync</span><br><span class="line"> <span class="comment"># bk-paas-webfe-web pod 不会重启，主动删除等重建</span></span><br><span class="line">kubectl delete pod -n blueking -l <span class="string">'app.kubernetes.io/instance=bk-paas,app.kubernetes.io/name=webfe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启蓝盾服务</span></span><br><span class="line">helmfile -f 03-bkci.yaml.gotmpl sync</span><br><span class="line"><span class="comment"># 这里蓝盾系列服务可能不会重启，需要手动删除老pod</span></span><br><span class="line">kubectl get pods -n blueking --field-selector=status.phase=Running| grep <span class="string">'bk-ci-bk-ci'</span> |awk <span class="string">'&#123;print $1&#125;'</span> | xargs kubectl delete pod -n blueking</span><br></pre></td></tr></table></figure><h4 id="5-5-构建机Agent配置变更及重启"><a href="#5-5-构建机Agent配置变更及重启" class="headerlink" title="5.5 构建机Agent配置变更及重启"></a>5.5 构建机Agent配置变更及重启</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止agent服务</span></span><br><span class="line">./stop.sh</span><br><span class="line"></span><br><span class="line">BK_DOMAIN=<span class="string">"deveops.bk.blazehu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改.agent.properties文件，开启https</span></span><br><span class="line">sed -i <span class="string">''</span> <span class="string">'s|http://$BK_DOMAIN|https://$BK_DOMAIN|g'</span> .agent.properties</span><br><span class="line"><span class="comment"># 修改telegraf.conf文件，开启https</span></span><br><span class="line">sed -i <span class="string">''</span> <span class="string">'s|http://$BK_DOMAIN|https://$BK_DOMAIN|g'</span> telegraf.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动agent</span></span><br><span class="line">./start.sh</span><br><span class="line"><span class="comment"># 这里需要注意，仔细查看.agent.properties里devops.agent.user， 这里是哪个用户就用哪个用户启动agent</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://bk.tencent.com/docs/markdown/ZH/DeploymentGuides/7.1/prepare-bkctrl.md" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://bk.tencent.com/s-mart/community/search?searchText=ldap&curTypeTab=all&curBestTab=latest" target="_blank" rel="noopener">官方论坛</a></li><li><a href="https://bk.tencent.com/s-mart/community/question/9114?type=article" target="_blank" rel="noopener">对接Ldap登陆</a></li><li><a href="https://github.com/TencentBlueKing/bk-ci/blob/v2.0.0/src/backend/ci/core/auth/biz-auth-rbac/src/main/kotlin/com/tencent/devops/auth/service/RbacPermissionProjectService.kt" target="_blank" rel="noopener">蓝盾源码</a></li><li><a href="https://developer.aliyun.com/article/1001630" target="_blank" rel="noopener">Ingress 域名方式导致413 Request Entity Too Large-阿里云开发者社区</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾接入LDAP登录(v7.1)</title>
      <link href="/2024/05/22/devops/landun_login_ldap/"/>
      <url>/2024/05/22/devops/landun_login_ldap/</url>
      
        <content type="html"><![CDATA[<p>通过蓝鲸用户中心配置 LDAP 后，存在登录失败以及用户名需要加域（与当前用户的使用习惯不符）等问题。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>按照<a href="https://blazehu.com/2024/05/24/devops/landun_install/#3-9-%E5%AF%B9%E6%8E%A5Ldap%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">官方文档</a>对接 LDAP 服务后用户正常同步，但是登录时报用户密码错误。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>后台查看 bk-user-api-web 日志，报错如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"levelname"</span>: <span class="string">"ERROR"</span>,</span><br><span class="line"><span class="attr">"asctime"</span>: <span class="string">"2024-05-22 15:15:30,947"</span>,</span><br><span class="line"><span class="attr">"pathname"</span>: <span class="string">"/app/bkuser_core/api/login/views.py"</span>,</span><br><span class="line"><span class="attr">"lineno"</span>: <span class="number">205</span>,</span><br><span class="line"><span class="attr">"funcName"</span>: <span class="string">"login"</span>,</span><br><span class="line"><span class="attr">"process"</span>: <span class="number">530</span>,</span><br><span class="line"><span class="attr">"thread"</span>: <span class="number">140333237386568</span>,</span><br><span class="line"><span class="attr">"request_id"</span>: <span class="string">"ebf27affe3f74e77b961a11df38583e9"</span>,</span><br><span class="line"><span class="attr">"exc_info"</span>: <span class="string">"Traceback (most recent call last):</span></span><br><span class="line"><span class="string">File \"/app/bkuser_core/api/login/views.py\", line 197, in login</span></span><br><span class="line"><span class="string">    login_class().check(profile, password)</span></span><br><span class="line"><span class="string">File \"/app/bkuser_core/categories/plugins/ldap/login.py\", line 62, in check</span></span><br><span class="line"><span class="string">    target_dn = self.fetch_dn(user)</span></span><br><span class="line"><span class="string">File \"/app/bkuser_core/categories/plugins/ldap/login.py\", line 30, in fetch_dn</span></span><br><span class="line"><span class="string">    return force_str(user_info[\"raw_attributes\"][\"entryDN\"][0])</span></span><br><span class="line"><span class="string">File \"/usr/local/lib/python3.6/site-packages/ldap3/utils/ciDict.py\", line 68, in __getitem__</span></span><br><span class="line"><span class="string">    return self._store[self._case_insensitive_keymap[self._ci_key(key)]]</span></span><br><span class="line"><span class="string">KeyError: 'entrydn'"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息很明显，在 <code>user_info.raw_attributes</code> 里找不到 <code>entryDN</code> 这个 key。即获取用户用于登陆的 login dn 失败，需要修改相关逻辑。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><p>本地通过 vscode 插件连上 ldap 后，发现用户用于登陆的 login dn 的 key 应该是 <code>dn</code>，修改用于用户登陆的 login dn 逻辑。详细步骤如下：</p><ol><li><p>通过部署的配置文件 <code>environments/default/version.yaml</code> 找到部署的 bk-user 的版本为：<code>bk-user: &quot;1.4.14-beta.10&quot;</code></p></li><li><p>下载该包到本地 <code>helm pull blueking/bk-user --version 1.4.14-beta.10</code>，解压找到镜像版本：<code>tag: &quot;v2.5.4-beta.10&quot;</code></p></li><li><p>找到 bk-user 该 tag 源码地址：<a href="https://github.com/TencentBlueKing/bk-user/tree/v2.5.4-beta.10" target="_blank" rel="noopener">https://github.com/TencentBlueKing/bk-user/tree/v2.5.4-beta.10</a></p></li><li><p>根据日志找到对应文件 <code>src/api/bkuser_core/categories/plugins/ldap/login.py</code></p></li><li><p>修改 fetch_dn 函数的实现，将 <code>entryDN</code> 修改为 <code>dn</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_dn</span><span class="params">(user_info: dict)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> force_str(user_info[<span class="string">"raw_attributes"</span>][<span class="string">"dn"</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ol><h4 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h4><p><strong>制作镜像</strong><br>我们只需要更新 bk-user-api-web 服务所以只需要制作该服务镜像，执行命令 <code>make build-api</code>。</p><p><strong>变更模版</strong><br>在 environments/default 目录下新建 bkuser-custom-values.yaml.gotmpl 文件使用新的镜像，若以存在则跳过。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bk-user-api:v1.0.1</span></span><br><span class="line"><span class="attr">api:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">registry:</span> <span class="string">your</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">bk-user-api</span></span><br><span class="line">    <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">"v1.0.1"</span></span><br></pre></td></tr></table></figure><p><strong>更新服务</strong><br>执行下面的命令进行更新：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">helmfile -f base-blueking.yaml.gotmpl -l seq=third sync</span><br></pre></td></tr></table></figure><p>检查以下容器镜像的变更是否符合预期：</p><ul><li>bk-user-api-beat</li><li>bk-user-api-web</li><li>bk-user-api-worker</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>登陆失败的问题可以通过修改源码进行修复。</li><li>登陆无需加域的临时方案：将用户和组织结构信息同步至默认域，然后查找默认域。需要修改同步逻辑。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://bk.tencent.com/s-mart/community/question/9114?type=article" target="_blank" rel="noopener">https://bk.tencent.com/s-mart/community/question/9114?type=article</a></li><li><a href="https://github.com/TencentBlueKing/bk-user/tree/v2.5.4-beta.10" target="_blank" rel="noopener">https://github.com/TencentBlueKing/bk-user/tree/v2.5.4-beta.10</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang archive/zip 问题排查小记</title>
      <link href="/2024/02/18/backend/golang/golang_archive_zip/"/>
      <url>/2024/02/18/backend/golang/golang_archive_zip/</url>
      
        <content type="html"><![CDATA[<p>2021年给开发商做了一个<a href="https://docs.bkci.net/services/client-experience" target="_blank" rel="noopener">移动端版本体验</a>，近期开发商反馈当上传的ipa文件比较大超过4G的时候上传失败。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><a href="https://docs.bkci.net/services/client-experience" target="_blank" rel="noopener">移动端版本体验</a>的技术架构如下图，，蓝盾插件请求版本体验后端，后端临时缓存文件并解析ipa和apk文件，获取包的相关信息（包名，版本号，图标等），然后上传至cos存储。服务端使用的golang的版本是<a href="https://go.dev/doc/go1.16" target="_blank" rel="noopener">go1.16</a>。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/golang_archive_zip_ipapk.png" alt="golang_archive_zip_ipapk"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="插件侧报错"><a href="#插件侧报错" class="headerlink" title="插件侧报错"></a>插件侧报错</h4><p>用户反馈插件执行报错 <strong>“zip: not a valid zip file”</strong>（插件将ipa或者apk包上传至版本体验后端）<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/golang_archive_zip_plugin_error.png" alt="golang_archive_zip_plugin_error"></p><h4 id="服务端解析包报错"><a href="#服务端解析包报错" class="headerlink" title="服务端解析包报错"></a>服务端解析包报错</h4><p>通过排查后端服务日志，问题比较清晰，就是后端解析包的时候报错。解析<code>ipa</code>包的相关代码如下所示，整体逻辑比较简单，通过 <code>archive/zip</code> 读取<code>ipa</code>文件，通过正则找到 <code>plist</code> 和 <code>AppIcon</code> 文件，然后分别通过 <a href="howett.net/plist">plist</a> 和 <a href="github.com/andrianbdn/iospng">iospng</a> 解析<br>得到相关信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseIpa</span><span class="params">(readerAt io.ReaderAt, size <span class="keyword">int64</span>)</span> <span class="params">(*App, error)</span></span> &#123;</span><br><span class="line">log.Info(<span class="string">"[upload] file size : "</span>, size)</span><br><span class="line"><span class="keyword">var</span> reInfoPlist = regexp.MustCompile(<span class="string">`Payload/[^/]+/Info\.plist`</span>)</span><br><span class="line"></span><br><span class="line">reader, err := zip.NewReader(readerAt, size)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(<span class="string">"[upload] zip new reader failed, err: "</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plistFile, iosIconFile *zip.File</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> reader.File &#123;</span><br><span class="line">log.Info(<span class="string">"[upload] reader file: "</span>, f.Name)</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> reInfoPlist.MatchString(f.Name):</span><br><span class="line">plistFile = f</span><br><span class="line"><span class="keyword">case</span> strings.Contains(f.Name, <span class="string">"AppIcon60x60"</span>):</span><br><span class="line">iosIconFile = f</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">log.Info(<span class="string">"[upload] reader plist file: "</span>, plistFile.Name)</span><br><span class="line">log.Info(<span class="string">"[upload] reader icon file: "</span>, iosIconFile.Name)</span><br><span class="line">app, err := parseIpaFile(plistFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> ignore error</span></span><br><span class="line">log.Error(<span class="string">"[upload] parse ipa failed, err: "</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Info(<span class="string">"[upload] parse ipa success, err: "</span>, app)</span><br><span class="line">icon, err := parseIpaIcon(iosIconFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> ignore error</span></span><br><span class="line">log.Error(<span class="string">"[upload] parse ipa icon failed, err: "</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">app.Size = size</span><br><span class="line">app.Icon = icon</span><br><span class="line"><span class="keyword">return</span> app, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的报错：<strong>“zip: not a valid zip file”</strong> 定位是 <code>archive/zip</code> 库抛出的。</p><h4 id="源码阅读-archive-zip"><a href="#源码阅读-archive-zip" class="headerlink" title="源码阅读(archive/zip)"></a>源码阅读(<code>archive/zip</code>)</h4><p>通过查阅源码，发现该错误就是常量 <code>ErrFormat</code>，<code>NewReader</code> 方法调用了 <code>init</code> 方法，而 <code>init</code> 方法在循环读取文件头部 <code>readDirectoryHeader</code> 时会判断错误类型，如果是 <code>ErrFormat</code> 会将错误抛出。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrFormat       = errors.New(<span class="string">"zip: not a valid zip file"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(r io.ReaderAt, size <span class="keyword">int64</span>)</span> <span class="params">(*Reader, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> size &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"zip: size cannot be negative"</span>)</span><br><span class="line">&#125;</span><br><span class="line">zr := <span class="built_in">new</span>(Reader)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> err = zr.init(r, size); err != <span class="literal">nil</span> &amp;&amp; err != ErrInsecurePath &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> zr, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">init</span><span class="params">(rdr io.ReaderAt, size <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">end, baseOffset, err := readDirectoryEnd(rdr, size)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.r = rdr</span><br><span class="line">r.baseOffset = baseOffset</span><br><span class="line"><span class="comment">// Since the number of directory records is not validated, it is not</span></span><br><span class="line"><span class="comment">// safe to preallocate r.File without first checking that the specified</span></span><br><span class="line"><span class="comment">// number of files is reasonable, since a malformed archive may</span></span><br><span class="line"><span class="comment">// indicate it contains up to 1 &lt;&lt; 128 - 1 files. Since each file has a</span></span><br><span class="line"><span class="comment">// header which will be _at least_ 30 bytes we can safely preallocate</span></span><br><span class="line"><span class="comment">// if (data size / 30) &gt;= end.directoryRecords.</span></span><br><span class="line"><span class="keyword">if</span> end.directorySize &lt; <span class="keyword">uint64</span>(size) &amp;&amp; (<span class="keyword">uint64</span>(size)-end.directorySize)/<span class="number">30</span> &gt;= end.directoryRecords &#123;</span><br><span class="line">r.File = <span class="built_in">make</span>([]*File, <span class="number">0</span>, end.directoryRecords)</span><br><span class="line">&#125;</span><br><span class="line">r.Comment = end.comment</span><br><span class="line">rs := io.NewSectionReader(rdr, <span class="number">0</span>, size)</span><br><span class="line"><span class="keyword">if</span> _, err = rs.Seek(r.baseOffset+<span class="keyword">int64</span>(end.directoryOffset), io.SeekStart); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">buf := bufio.NewReader(rs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The count of files inside a zip is truncated to fit in a uint16.</span></span><br><span class="line"><span class="comment">// Gloss over this by reading headers until we encounter</span></span><br><span class="line"><span class="comment">// a bad one, and then only report an ErrFormat or UnexpectedEOF if</span></span><br><span class="line"><span class="comment">// the file count modulo 65536 is incorrect.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">f := &amp;File&#123;zip: r, zipr: rdr&#125;</span><br><span class="line">err = readDirectoryHeader(f, buf)</span><br><span class="line"><span class="keyword">if</span> err == ErrFormat || err == io.ErrUnexpectedEOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">f.headerOffset += r.baseOffset</span><br><span class="line">r.File = <span class="built_in">append</span>(r.File, f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint16</span>(<span class="built_in">len</span>(r.File)) != <span class="keyword">uint16</span>(end.directoryRecords) &#123; <span class="comment">// only compare 16 bits here</span></span><br><span class="line"><span class="comment">// Return the readDirectoryHeader error if we read</span></span><br><span class="line"><span class="comment">// the wrong number of directory entries.</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> zipinsecurepath.Value() == <span class="string">"0"</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line"><span class="keyword">if</span> f.Name == <span class="string">""</span> &#123;</span><br><span class="line"><span class="comment">// Zip permits an empty file name field.</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The zip specification states that names must use forward slashes,</span></span><br><span class="line"><span class="comment">// so consider any backslashes in the name insecure.</span></span><br><span class="line"><span class="keyword">if</span> !filepath.IsLocal(f.Name) || strings.Contains(f.Name, <span class="string">`\`</span>) &#123;</span><br><span class="line">zipinsecurepath.IncNonDefault()</span><br><span class="line"><span class="keyword">return</span> ErrInsecurePath</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-本地复现"><a href="#4-本地复现" class="headerlink" title="4. 本地复现"></a>4. 本地复现</h4><p>本地复现该问题的时候发现解析正常，但是打成镜像容器部署会报错，通过对比我发现本地使用的go的版本是 <a href="https://go.dev/doc/go1.21" target="_blank" rel="noopener">go1.21</a> ，而镜像使用的构建镜像是 <a href="https://go.dev/doc/go1.16" target="_blank" rel="noopener">go1.16</a> 。挨个查阅 golang 的 <a href="https://go.dev/doc/devel/release" target="_blank" rel="noopener">release</a> 最终定位到是 <a href="https://go.dev/doc/go1.19" target="_blank" rel="noopener">go1.19</a> 的新特性导致的差异。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/golang_archive_zip.png" alt="golang_archive_zip"><br><a href="https://github.com/golang/go/blob/go1.19/src/archive/zip/reader.go" target="_blank" rel="noopener">相关改动代码</a>如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The count of files inside a zip is truncated to fit in a uint16.</span></span><br><span class="line"><span class="comment">// Gloss over this by reading headers until we encounter</span></span><br><span class="line"><span class="comment">// a bad one, and then only report an ErrFormat or UnexpectedEOF if</span></span><br><span class="line"><span class="comment">// the file count modulo 65536 is incorrect.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    f := &amp;File&#123;zip: z, zipr: r&#125;</span><br><span class="line">    err = readDirectoryHeader(f, buf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For compatibility with other zip programs,</span></span><br><span class="line">    <span class="comment">// if we have a non-zero base offset and can't read</span></span><br><span class="line">    <span class="comment">// the first directory header, try again with a zero</span></span><br><span class="line">    <span class="comment">// base offset.</span></span><br><span class="line">    <span class="keyword">if</span> err == ErrFormat &amp;&amp; z.baseOffset != <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(z.File) == <span class="number">0</span> &#123;</span><br><span class="line">        z.baseOffset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> _, err = rs.Seek(<span class="keyword">int64</span>(end.directoryOffset), io.SeekStart); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        buf.Reset(rs)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err == ErrFormat || err == io.ErrUnexpectedEOF &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    f.headerOffset += z.baseOffset</span><br><span class="line">    z.File = <span class="built_in">append</span>(z.File, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增逻辑解读：如果在读取第一个目录头时遇到 <code>ErrFormat</code> 错误，并且基偏移量不为零，则尝试使用零基偏移量重新读取目录头。如果重新读取目录头仍然失败，则返回错误。</p><blockquote><p>NOTE: 不同操作系统或 ZIP 工具创建的 ZIP 文件时，可能会遇到不同的实现和约定。这可能导致基偏移量的计算方式不同，从而导致错误的值。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>升级golang构建的基础镜像，从<code>1.16</code> -&gt; <code>1.22</code>，重新构建新的服务镜像更新服务，这样基本满足了用户的需求。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># builder</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.22</span> AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go mod tidy</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go build -ldflags <span class="string">'-linkmode "external" --extldflags "-static"'</span> main.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># runtime</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.14</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"blazehu"</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ipapk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /src/main /ipapk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /docker-entrypoint.sh</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://go.dev/doc/go1.19" target="_blank" rel="noopener">https://go.dev/doc/go1.19</a></li><li><a href="https://docs.bkci.net/services/client-experience" target="_blank" rel="noopener">https://docs.bkci.net/services/client-experience</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> archive/zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArgoCD 源码解析：SSE 实时推送机制</title>
      <link href="/2023/11/30/cloudnative/argocd_sse/"/>
      <url>/2023/11/30/cloudnative/argocd_sse/</url>
      
        <content type="html"><![CDATA[<p>服务器发送事件 (Server-Sent Events) 是一种服务器推送技术，使客户端能够通过 HTTP 连接从服务器接收自动更新，并描述了在建立初始客户端连接后服务器如何向客户端发起数据传输。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>在使用Argo CD的时候可以发现页面可以实时刷新应用的状态，比如同步中，那Argo CD是如何实现消息的实时推送的呢？本文将简要介绍Argo CD使用到的消息推送技术：SSE。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd-sse-app.png" alt="argocd-sse-app"></p><h3 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h3><p>通过浏览器开发者工具可以发现前端请求的地址是 <code>stream/applications</code>，响应头表示这是一个服务器发送事件（Server-Sent Events，SSE）。</p><blockquote><p>本文的源码基于2.6.0版本</p></blockquote><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd-sse-eventstream1.png" alt="argocd-sse-eventstream1"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd-sse-eventstream2.png" alt="argocd-sse-eventstream2"></p><blockquote><p>Content-Type: text/event-stream：这个响应头告诉客户端，服务器将发送的数据是以文本格式的事件流（Event Stream）。</p></blockquote><h4 id="2-1-客户端实现"><a href="#2-1-客户端实现" class="headerlink" title="2.1 客户端实现"></a>2.1 客户端实现</h4><p>Argo CD的前端使用的是 React，相关代码 <a href="https://github.com/argoproj/argo-cd/blob/v2.6.0/ui/src/app/applications/components/application-details/application-details.tsx" target="_blank" rel="noopener">application-details.tsx</a> 实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private loadAppInfo(name: string, <span class="attr">appNamespace</span>: string): Observable&lt;&#123;<span class="attr">application</span>: appModels.Application; tree: appModels.ApplicationTree&#125;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">from</span>(services.applications.get(name, appNamespace))</span><br><span class="line">        .pipe(</span><br><span class="line">            mergeMap(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> fallbackTree = &#123;</span><br><span class="line">                    nodes: app.status.resources.map(<span class="function"><span class="params">res</span> =&gt;</span> (&#123;...res, <span class="attr">parentRefs</span>: [], <span class="attr">info</span>: [], <span class="attr">resourceVersion</span>: <span class="string">''</span>, <span class="attr">uid</span>: <span class="string">''</span>&#125;)),</span><br><span class="line">                    orphanedNodes: [],</span><br><span class="line">                    hosts: []</span><br><span class="line">                &#125; <span class="keyword">as</span> appModels.ApplicationTree;</span><br><span class="line">                <span class="keyword">return</span> combineLatest(</span><br><span class="line">                    merge(</span><br><span class="line">                        <span class="keyword">from</span>([app]),</span><br><span class="line">                        <span class="keyword">this</span>.appChanged.pipe(filter(<span class="function"><span class="params">item</span> =&gt;</span> !!item)),</span><br><span class="line">                        AppUtils.handlePageVisibility(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                            services.applications</span><br><span class="line">                                .watch(&#123;name, appNamespace&#125;)</span><br><span class="line">                                .pipe(</span><br><span class="line">                                    map(<span class="function"><span class="params">watchEvent</span> =&gt;</span> &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (watchEvent.type === <span class="string">'DELETED'</span>) &#123;</span><br><span class="line">                                            <span class="keyword">this</span>.onAppDeleted();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">return</span> watchEvent.application;</span><br><span class="line">                                    &#125;)</span><br><span class="line">                                )</span><br><span class="line">                                .pipe(repeat())</span><br><span class="line">                                .pipe(retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors.pipe(delay(<span class="number">500</span>))))</span><br><span class="line">                        )</span><br><span class="line">                    ),</span><br><span class="line">                    merge(</span><br><span class="line">                        <span class="keyword">from</span>([fallbackTree]),</span><br><span class="line">                        services.applications.resourceTree(name, appNamespace).catch(<span class="function"><span class="params">()</span> =&gt;</span> fallbackTree),</span><br><span class="line">                        AppUtils.handlePageVisibility(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                            services.applications</span><br><span class="line">                                .watchResourceTree(name, appNamespace)</span><br><span class="line">                                .pipe(repeat())</span><br><span class="line">                                .pipe(retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors.pipe(delay(<span class="number">500</span>))))</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .pipe(filter(<span class="function">(<span class="params">[application, tree]</span>) =&gt;</span> !!application &amp;&amp; !!tree))</span><br><span class="line">        .pipe(map(<span class="function">(<span class="params">[application, tree]</span>) =&gt;</span> (&#123;application, tree&#125;)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadAppInfo</code> 方法的主要目的是从服务器加载应用信息，并在页面可见时实时更新。它返回一个 Observable，包含应用信息 <code>services.applications.watch</code> 和应用资源树 <code>services.applications.watchResourceTree</code>。我们继续查看应用信息的 <code>watch</code> 函数实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public watch(query?: &#123;name?: string; resourceVersion?: string; projects?: string[]; appNamespace?: string&#125;, options?: QueryOptions): Observable&lt;models.ApplicationWatchEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> search = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">    <span class="keyword">if</span> (query) &#123;</span><br><span class="line">        <span class="keyword">if</span> (query.name) &#123;</span><br><span class="line">            search.set(<span class="string">'name'</span>, query.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (query.resourceVersion) &#123;</span><br><span class="line">            search.set(<span class="string">'resourceVersion'</span>, query.resourceVersion);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (query.appNamespace) &#123;</span><br><span class="line">            search.set(<span class="string">'appNamespace'</span>, query.appNamespace);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">        <span class="keyword">const</span> searchOptions = optionsToSearch(options);</span><br><span class="line">        search.set(<span class="string">'fields'</span>, searchOptions.fields);</span><br><span class="line">        search.set(<span class="string">'selector'</span>, searchOptions.selector);</span><br><span class="line">        search.set(<span class="string">'appNamespace'</span>, searchOptions.appNamespace);</span><br><span class="line">        query?.projects?.forEach(<span class="function"><span class="params">project</span> =&gt;</span> search.append(<span class="string">'projects'</span>, project));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> searchStr = search.toString();</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`/stream/applications<span class="subst">$&#123;(searchStr &amp;&amp; <span class="string">'?'</span> + searchStr) || <span class="string">''</span>&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> requests</span><br><span class="line">        .loadEventSource(url)</span><br><span class="line">        .pipe(repeat())</span><br><span class="line">        .pipe(retry())</span><br><span class="line">        .pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.parse(data).result <span class="keyword">as</span> models.ApplicationWatchEvent))</span><br><span class="line">        .pipe(</span><br><span class="line">            map(<span class="function"><span class="params">watchEvent</span> =&gt;</span> &#123;</span><br><span class="line">                watchEvent.application = <span class="keyword">this</span>.parseAppFields(watchEvent.application);</span><br><span class="line">                <span class="keyword">return</span> watchEvent;</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该函数使用 <code>requests.loadEventSource(url)</code> 加载服务器发送的事件流（Event Stream），请求地址为 <code>/stream/applications</code>。<code>loadEventSource</code> 的实现是基于 <code>EventSource</code> 对象的, <code>EventSource</code> 实例设置 <code>onmessage</code> 事件处理程序，当接收到新消息时，调用 <code>observer.next(msg.data)</code> 将消息数据推送到 <code>Observable</code> 实现页面的实时刷新。在文档 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener">Using server-sent events</a> 中有介绍, 这里就不详细介绍了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    loadEventSource(url: string): Observable&lt;string&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create(<span class="function">(<span class="params">observer: Observer&lt;any&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> eventSource = <span class="keyword">new</span> EventSource(<span class="string">`<span class="subst">$&#123;apiRoot()&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">            eventSource.onmessage = <span class="function"><span class="params">msg</span> =&gt;</span> observer.next(msg.data);</span><br><span class="line">            eventSource.onerror = <span class="function"><span class="params">e</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                observer.error(e);</span><br><span class="line">                onError.next(e);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// EventSource does not provide easy way to get notification when connection closed.</span></span><br><span class="line">            <span class="comment">// check readyState periodically instead.</span></span><br><span class="line">            <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (eventSource &amp;&amp; eventSource.readyState === ReadyState.CLOSED) &#123;</span><br><span class="line">                    observer.error(<span class="string">'connection got closed unexpectedly'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearInterval(interval);</span><br><span class="line">                eventSource.close();</span><br><span class="line">                eventSource = <span class="literal">null</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-2-服务端实现"><a href="#2-2-服务端实现" class="headerlink" title="2.2 服务端实现"></a>2.2 服务端实现</h4><p>Argo CD的后端使用的是 Go，相关代码 <a href="https://github.com/argoproj/argo-cd/blob/v2.6.0/server/application/application.go" target="_blank" rel="noopener">application.go</a> 实现如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ApplicationService_WatchServer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Send(*v1alpha1.ApplicationWatchEvent) error</span><br><span class="line">    grpc.ServerStream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">Watch</span><span class="params">(q *application.ApplicationQuery, ws application.ApplicationService_WatchServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">appName := q.GetName()</span><br><span class="line">appNs := s.appNamespaceOrDefault(q.GetAppNamespace())</span><br><span class="line">logCtx := log.NewEntry(log.New())</span><br><span class="line"><span class="keyword">if</span> q.Name != <span class="literal">nil</span> &#123;</span><br><span class="line">logCtx = logCtx.WithField(<span class="string">"application"</span>, *q.Name)</span><br><span class="line">&#125;</span><br><span class="line">projects := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> q.Projects &#123;</span><br><span class="line">projects[q.Projects[i]] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">claims := ws.Context().Value(<span class="string">"claims"</span>)</span><br><span class="line">selector, err := labels.Parse(q.GetSelector())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"error parsing labels with selectors: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">minVersion := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> q.GetResourceVersion() != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">if</span> minVersion, err = strconv.Atoi(q.GetResourceVersion()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">minVersion = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sendIfPermitted is a helper to send the application to the client's streaming channel if the</span></span><br><span class="line"><span class="comment">// caller has RBAC privileges permissions to view it</span></span><br><span class="line">sendIfPermitted := <span class="function"><span class="keyword">func</span><span class="params">(a appv1.Application, eventType watch.EventType)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(projects) &gt; <span class="number">0</span> &amp;&amp; !projects[a.Spec.GetProject()] &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> appVersion, err := strconv.Atoi(a.ResourceVersion); err == <span class="literal">nil</span> &amp;&amp; appVersion &lt; minVersion &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">matchedEvent := (appName == <span class="string">""</span> || (a.Name == appName &amp;&amp; a.Namespace == appNs)) &amp;&amp; selector.Matches(labels.Set(a.Labels))</span><br><span class="line"><span class="keyword">if</span> !matchedEvent &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !s.enf.Enforce(claims, rbacpolicy.ResourceApplications, rbacpolicy.ActionGet, a.RBACName(s.ns)) &#123;</span><br><span class="line"><span class="comment">// do not emit apps user does not have accessing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s.inferResourcesStatusHealth(&amp;a)</span><br><span class="line">err := ws.Send(&amp;appv1.ApplicationWatchEvent&#123;</span><br><span class="line">Type:        eventType,</span><br><span class="line">Application: a,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logCtx.Warnf(<span class="string">"Unable to send stream message: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events := <span class="built_in">make</span>(<span class="keyword">chan</span> *appv1.ApplicationWatchEvent, watchAPIBufferSize)</span><br><span class="line"><span class="comment">// Mimic watch API behavior: send ADDED events if no resource version provided</span></span><br><span class="line"><span class="comment">// If watch API is executed for one application when emit event even if resource version is provided</span></span><br><span class="line"><span class="comment">// This is required since single app watch API is used for during operations like app syncing and it is</span></span><br><span class="line"><span class="comment">// critical to never miss events.</span></span><br><span class="line"><span class="keyword">if</span> q.GetResourceVersion() == <span class="string">""</span> || q.GetName() != <span class="string">""</span> &#123;</span><br><span class="line">apps, err := s.appLister.List(selector)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"error listing apps with selector: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(apps, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> apps[i].QualifiedName() &lt; apps[j].QualifiedName()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> apps &#123;</span><br><span class="line">sendIfPermitted(*apps[i], watch.Added)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unsubscribe := s.appBroadcaster.Subscribe(events)</span><br><span class="line"><span class="keyword">defer</span> unsubscribe()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> event := &lt;-events:</span><br><span class="line">sendIfPermitted(event.Application, event.Type)</span><br><span class="line"><span class="keyword">case</span> &lt;-ws.Context().Done():</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>ws</code> 用于发送实时更新的应用程序事件。当有新的事件发生时，<code>sendIfPermitted</code> 函数会将事件发送到客户端。</p><blockquote><p>NOTE: <code>ws</code> 是一个实现了 <code>ApplicationService_WatchServer</code> 接口的对象。<code>ApplicationService_WatchServer</code> 接口继承了 <code>grpc.ServerStream</code> 接口，并定义了一个名为 <code>Send</code> 的方法。这意味着 <code>ws</code> 可以用作服务器端的流，并具有发送 <code>ApplicationWatchEvent</code> 类型消息的能力。</p></blockquote><h3 id="3-实现一个简单的SSE接口服务样例"><a href="#3-实现一个简单的SSE接口服务样例" class="headerlink" title="3 实现一个简单的SSE接口服务样例"></a>3 实现一个简单的SSE接口服务样例</h3><p><a href="https://github.com/blazehu/sse-demo" target="_blank" rel="noopener">相关代码地址</a>，实现如下效果，页面上通过 sse 获取数据（当前时间和推送人），后端服务由 grpc｜grpc-gateway stream 推送。</p><blockquote><p>NOTE: 后续补充更新中</p></blockquote><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd-sse-demo.gif" alt="argocd-sse-demo"></p><h4 id="3-1-使用-protobuf-定义-gRPC-服务"><a href="#3-1-使用-protobuf-定义-gRPC-服务" class="headerlink" title="3.1 使用 protobuf 定义 gRPC 服务"></a>3.1 使用 protobuf 定义 gRPC 服务</h4><p>新建一个项目<a href="https://github.com/blazehu/sse-demo" target="_blank" rel="noopener">sse-demo</a>，在项目目录下执行<code>go mod init</code>命令完成<code>go module</code>初始化。 在项目目录下创建一个 <a href="https://github.com/blazehu/sse-demo/blob/main/proto/chat.proto" target="_blank" rel="noopener">proto/chat.proto</a> 文件，其内容如下:</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">"github.com/blazehu/sse-demo/server/apiclient/chat"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/api/annotations.proto"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/empty.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">ChatService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Chat(google.protobuf.Empty) <span class="keyword">returns</span> (stream Message) &#123;</span></span><br><span class="line"><span class="function">    option (google.api.http) = &#123;</span></span><br><span class="line"><span class="function">      get: "/api/v1/stream/chat"</span></span><br><span class="line"><span class="function">    &#125;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> user = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> content = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-生成代码"><a href="#3-2-生成代码" class="headerlink" title="3.2 生成代码"></a>3.2 生成代码</h4><p>这用 <a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/tutorials/generating_stubs/using_buf/" target="_blank" rel="noopener">buf</a> 生成代码，首先在项目目录下执行 <code>buf mod init</code> 生成 <code>buf.yaml</code> 文件，我们需要修改该文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">buf.build/blazehu/sse-demo</span></span><br><span class="line"><span class="attr">deps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">buf.build/googleapis/googleapis</span></span><br><span class="line"><span class="attr">breaking:</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">FILE</span></span><br><span class="line"><span class="attr">lint:</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEFAULT</span></span><br></pre></td></tr></table></figure><blockquote><p>NOTE: 这里主要是添加依赖项 googleapis，<a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/tutorials/adding_annotations/" target="_blank" rel="noopener">相关详细文档</a>。</p></blockquote><p>修改完成后执行 <code>buf mod update</code> 来选择要使用的依赖项的版本。 然后我们创建一个 <code>buf.gen.yaml</code> 文件用于生成存根。<code>buf.gen.yaml</code>文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">plugin:</span> <span class="string">go</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">plugin:</span> <span class="string">go-grpc</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative,require_unimplemented_servers=false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">plugin:</span> <span class="string">grpc-gateway</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br></pre></td></tr></table></figure><p>这时候我们可以通过 <code>buf generate</code> 生成存根，也可以使用 <code>protoc</code> 来生成存根，这里就不展开说明。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> buf generate</span></span><br></pre></td></tr></table></figure><p>这时候将会由如下的目录结构：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">├── <span class="selector-tag">buf</span><span class="selector-class">.gen</span><span class="selector-class">.yaml</span></span><br><span class="line">├── <span class="selector-tag">buf</span><span class="selector-class">.lock</span></span><br><span class="line">├── <span class="selector-tag">buf</span><span class="selector-class">.yaml</span></span><br><span class="line">├── <span class="selector-tag">gen</span></span><br><span class="line">│   └── <span class="selector-tag">proto</span></span><br><span class="line">│       ├── <span class="selector-tag">chat</span><span class="selector-class">.pb</span><span class="selector-class">.go</span></span><br><span class="line">│       ├── <span class="selector-tag">chat</span><span class="selector-class">.pb</span><span class="selector-class">.gw</span><span class="selector-class">.go</span></span><br><span class="line">│       └── <span class="selector-tag">chat_grpc</span><span class="selector-class">.pb</span><span class="selector-class">.go</span></span><br><span class="line">├── <span class="selector-tag">go</span><span class="selector-class">.mod</span></span><br><span class="line">└── <span class="selector-tag">proto</span></span><br><span class="line">    └── <span class="selector-tag">chat</span><span class="selector-class">.proto</span></span><br></pre></td></tr></table></figure><h4 id="3-3-实现-GRPC-服务"><a href="#3-3-实现-GRPC-服务" class="headerlink" title="3.3 实现 GRPC 服务"></a>3.3 实现 GRPC 服务</h4><p>上述生成 <code>pb</code> 和 <code>grpc</code> 相关代码后，实现一个 <code>gRPC Server</code> 服务，<a href="https://github.com/blazehu/sse-demo/blob/main/server/server.go" target="_blank" rel="noopener">相关代码</a>如下：</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/blazehu/sse-demo/gen/proto"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line"><span class="string">"google.golang.org/protobuf/types/known/emptypb"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server provides chat service</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">chat.UnimplementedChatServiceServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chat returns chat content</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">Chat</span><span class="params">(_ *emptypb.Empty, stream chat.ChatService_ChatServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := chat.Message&#123;</span><br><span class="line">User:    <span class="string">"blazehu"</span>,</span><br><span class="line">Content: time.Now().Format(time.RFC3339),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := stream.Send(&amp;msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":50051"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to listen: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> opts []grpc.ServerOption</span><br><span class="line">grpcServer := grpc.NewServer(opts...)</span><br><span class="line">chat.RegisterChatServiceServer(grpcServer, &amp;Server&#123;&#125;)</span><br><span class="line">grpcServer.Serve(lis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑非常简单，定义 <code>Server</code> 对象然后实现了相关的 <code>Chat</code> 方法，然后 main 函数注册并启动了一个 <code>gRPC Server</code> 服务。</p><blockquote><p>NOTE: <code>Chat</code> 方法是每隔一秒钟就发送一条消息，该消息内容就是当前的时间。</p></blockquote><h4 id="3-4-实现-HTTP-服务"><a href="#3-4-实现-HTTP-服务" class="headerlink" title="3.4 实现 HTTP 服务"></a>3.4 实现 HTTP 服务</h4><p>新增 <code>main.go</code> 文件，在 <code>main.go</code> 文件中添加和启动 <code>gRPC-Gateway mux</code>。<a href="https://github.com/blazehu/sse-demo/blob/main/main.go" target="_blank" rel="noopener">相关代码</a>如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/blazehu/sse-demo/gen/proto"</span></span><br><span class="line"><span class="string">"github.com/blazehu/sse-demo/util"</span></span><br><span class="line"><span class="string">"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc/credentials/insecure"</span></span><br><span class="line">googleproto <span class="string">"google.golang.org/protobuf/proto"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">grpcEndpoint = <span class="string">"localhost:50051"</span></span><br><span class="line">httpPort     = <span class="string">":8080"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFilter</span><span class="params">(ctx context.Context, w http.ResponseWriter, resp googleproto.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line">w.Header().Set(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 gRPC 连接</span></span><br><span class="line"><span class="keyword">var</span> opts []grpc.DialOption</span><br><span class="line">opts = <span class="built_in">append</span>(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line">grpcConn, err := grpc.DialContext(ctx, grpcEndpoint, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Failed to dial server: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> grpcConn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 gRPC-Gateway 服务器</span></span><br><span class="line">gwmux := runtime.NewServeMux(</span><br><span class="line">runtime.WithMarshalerOption(runtime.MIMEWildcard, util.NewCustomTranscoder(&amp;runtime.JSONPb&#123;&#125;)),</span><br><span class="line">runtime.WithForwardResponseOption(myFilter),</span><br><span class="line">)</span><br><span class="line">err = chat.RegisterChatServiceHandler(ctx, gwmux, grpcConn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Failed to register gateway: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 CORS 策略</span></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">handler := http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>)</span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, PUT, DELETE, OPTIONS"</span>)</span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, Authorization"</span>)</span><br><span class="line"><span class="keyword">if</span> r.Method == <span class="string">"OPTIONS"</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">gwmux.ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line">mux.Handle(<span class="string">"/"</span>, handler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 gRPC-Gateway 服务器</span></span><br><span class="line">log.Printf(<span class="string">"Starting gRPC-Gateway on %s"</span>, httpPort)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(httpPort, mux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Failed to serve: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前端 sse 访问需要跨域所以需要设置 <code>CORS</code> 策略，并且返回的消息类型为 <code>text/event-stream</code>，所以我们这里自定义一个 <code>CustomTranscoder</code>，它将 <code>JSON</code> 转换为 <code>text/event-stream</code> 格式。<a href="https://github.com/blazehu/sse-demo/blob/main/util/tool.go" target="_blank" rel="noopener">相关实现</a>如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"</span></span><br><span class="line"><span class="string">"google.golang.org/protobuf/proto"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomTranscoder <span class="keyword">struct</span> &#123;</span><br><span class="line">marshaler runtime.Marshaler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomTranscoder</span><span class="params">(marshaler runtime.Marshaler)</span> *<span class="title">CustomTranscoder</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;CustomTranscoder&#123;marshaler: marshaler&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomTranscoder)</span> <span class="title">ContentType</span><span class="params">(_ <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"text/event-stream"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomTranscoder)</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> jsonBytes []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pb, ok := v.(proto.Message); ok &#123;</span><br><span class="line"><span class="comment">// Marshal message to JSON</span></span><br><span class="line">jsonBytes, err = c.marshaler.Marshal(pb)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// If not a proto.Message, try to marshal it as a regular JSON object</span></span><br><span class="line">jsonBytes, err = json.Marshal(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">buf.WriteString(<span class="string">"data: "</span>)</span><br><span class="line">buf.Write(jsonBytes)</span><br><span class="line">buf.WriteString(<span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomTranscoder)</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.marshaler.Unmarshal(data, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomTranscoder)</span> <span class="title">NewDecoder</span><span class="params">(r io.Reader)</span> <span class="title">runtime</span>.<span class="title">Decoder</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.marshaler.NewDecoder(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomTranscoder)</span> <span class="title">NewEncoder</span><span class="params">(w io.Writer)</span> <span class="title">runtime</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.marshaler.NewEncoder(w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE: 这里需要注意输入值转化为 <code>proto.Message</code> 类型可能会失败，所以我们在 Marshal 方法中添加一个检查，以确保输入值是一个 <code>proto.Message</code> 类型。如果不是，我们可以尝试将其序列化为 <code>JSON</code>。</p></blockquote><h4 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5 测试"></a>3.5 测试</h4><p>同时启动 <code>gRPC Server</code> 和 <code>HTTP Server</code>，然后浏览器访问地址: <a href="http://127.0.0.1:8080/api/v1/stream/chat" target="_blank" rel="noopener">http://127.0.0.1:8080/api/v1/stream/chat</a> ，可以发现浏览器将会每秒刷新一条数据。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd-sse-curl.png" alt="argocd-sse-curl"></p><h4 id="3-6-前端实现"><a href="#3-6-前端实现" class="headerlink" title="3.6 前端实现"></a>3.6 前端实现</h4><p>前端使用 <code>vue2</code>，这里就不详细说明了，页面通过 <code>EventSource</code> 与服务端建立通信，然后一直在接收服务端推送的消息，并将消息更新至页面上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.loadData();</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> loadData() &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">const</span> eventSource = <span class="keyword">new</span> EventSource(<span class="string">"http://127.0.0.1:8080/api/v1/stream/chat"</span>);</span><br><span class="line">        eventSource.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'connect eventSource success.'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        eventSource.onmessage =  <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(e.data);</span><br><span class="line">            vm.msg = <span class="string">`<span class="subst">$&#123;data.result.content&#125;</span> - <span class="subst">$&#123;data.result.user&#125;</span> send`</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        eventSource.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'connect eventSource failed.'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.$forceUpdate();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h3><ul><li><a href="https://en.wikipedia.org/wiki/Server-sent_events" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Server-sent_events</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events</a></li><li><a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/tutorials/generating_stubs/using_buf/" target="_blank" rel="noopener">https://grpc-ecosystem.github.io/grpc-gateway/docs/tutorials/generating_stubs/using_buf/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argocd </tag>
            
            <tag> gitops </tag>
            
            <tag> sse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArgoCD 源码解析：自动同步机制</title>
      <link href="/2023/10/25/cloudnative/argocd_webhook/"/>
      <url>/2023/10/25/cloudnative/argocd_webhook/</url>
      
        <content type="html"><![CDATA[<p>Argo CD 的自动同步功能通过监控 Git 仓库中的更改来自动部署和更新应用程序。这确保了 Kubernetes 集群中的应用程序始终与 Git 仓库中的配置保持一致。开发团队只需将应用程序的描述和配置存储在 Git 仓库中，Argo CD 会根据这些信息自动部署和更新应用程序。</p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>Argo CD 是一个开源的持续部署工具，专为 Kubernetes 应用程序设计。它遵循 GitOps 原则，将 Git 仓库作为应用程序部署和基础设施管理的“单一真实来源”。架构上 Argo CD 采用基于组件的架构设计，将不同可部署单元的职责分开，以提高系统的灵活性、可维护性和可扩展性。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_webhook_dependencies.png" alt="argocd_webhook_dependencies"></p><blockquote><p>有关架构的详细介绍可以阅读<a href="https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components/" target="_blank" rel="noopener">这篇文档</a>。</p></blockquote><p>通过阅读 Argo CD 官方文档我们可以知道 Argo CD 每三分钟轮询一次 Git 存储库，以检测清单的更改。为了消除轮询延迟，Argo CD API server 支持 <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/#1-create-the-webhook-in-the-git-provider" target="_blank" rel="noopener">配置 Git Webhook</a>。</p><h3 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h3><blockquote><p>本文的源码基于2.6.0版本</p></blockquote><h4 id="2-1-main-go-入口函数"><a href="#2-1-main-go-入口函数" class="headerlink" title="2.1 main.go 入口函数"></a>2.1 main.go 入口函数</h4><p>Argo CD 使用 <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a> 来构建应用程序。通过 <code>cmd</code> 目录下的 <code>main.go</code> 入口函数，我们可以很轻易的找到每个组件。根据架构可知 API Server 是控制平面中的唯一入口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">command = apiserver.NewCommand()</span><br></pre></td></tr></table></figure><h4 id="2-2-argocd-server"><a href="#2-2-argocd-server" class="headerlink" title="2.2 argocd-server"></a>2.2 argocd-server</h4><p>阅读 <code>ArgoCDServer</code> 实例的 <code>Run</code> 方法，可以发现 <code>ArgoCDServer</code> 使用 <a href="https://github.com/soheilhy/cmux" target="_blank" rel="noopener"><code>cmux</code></a> 库在多路复用，在同一端口上处理标准 HTTP 和 gRPC 请求。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">grpcS, appResourceTreeFn := a.newGRPCServer() </span><br><span class="line">grpcWebS := grpcweb.WrapServer(grpcS)</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">httpS = a.newHTTPServer(ctx, a.ListenPort, grpcWebS, appResourceTreeFn, listeners.GatewayConn) </span><br><span class="line"></span><br><span class="line">tcpm := cmux.New(listeners.Main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !a.useTLS() &#123;</span><br><span class="line">    httpL = tcpm.Match(cmux.HTTP1Fast())</span><br><span class="line">    grpcL = tcpm.MatchWithWriters(cmux.HTTP2MatchHeaderFieldSendSettings(<span class="string">"content-type"</span>, <span class="string">"application/grpc"</span>))</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a.checkServeErr(<span class="string">"grpcS"</span>, grpcS.Serve(grpcL)) &#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a.checkServeErr(<span class="string">"httpS"</span>, httpS.Serve(httpL)) &#125;()</span><br></pre></td></tr></table></figure><p>我在官方文档上找到 Argo CD 中如何实现身份验证（authn）和授权（authz）的一张图，可以发现当我们通过 Web 页面或者 CLI 调用 apiserver 的时候首先经过 <code>cmux</code> 检查匹配，如果请求是 http1.x 将由 <code>http mux</code> 处理，如果是 http2 并且 <code>content-type: application/grpc</code> 则由 <code>grpc Server</code> 处理。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_webhook_apiserver.png" alt="argocd_webhook_apiserver"></p><blockquote><p>由于 Argo CD apiserver 绝大多数的 API 服务是通过 gRPC 实现的，所以这里引入了 gRPC Gateway 来将 gRPC 服务转换为 RESTful API。</p></blockquote><h5 id="2-2-1-ArgoCDWebhookHandler"><a href="#2-2-1-ArgoCDWebhookHandler" class="headerlink" title="2.2.1 ArgoCDWebhookHandler"></a>2.2.1 ArgoCDWebhookHandler</h5><p>从<a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/#1-create-the-webhook-in-the-git-provider" target="_blank" rel="noopener">配置 Git Webhook</a> 中找到 webhook events 的 endpoint 是 /api/webhook 。是走的 http1.x，我们查看 <code>ArgoCDServer</code> 实例的 <code>newHTTPServer</code> 方法，路径为 “/api/webhook” 的 HTTP 请求映射的是 <code>acdWebhookHandler.Handler</code>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Webhook handler for git events (Note: cache timeouts are hardcoded because API server does not write to cache and not really using them)</span></span><br><span class="line">argoDB := db.NewDB(a.Namespace, a.settingsMgr, a.KubeClientset)</span><br><span class="line">acdWebhookHandler := webhook.NewHandler(a.Namespace, a.ArgoCDServerOpts.ApplicationNamespaces, a.AppClientset, a.settings, a.settingsMgr, repocache.NewCache(a.Cache.GetCache(), <span class="number">24</span>*time.Hour, <span class="number">3</span>*time.Minute), a.Cache, argoDB)</span><br><span class="line"></span><br><span class="line">mux.HandleFunc(<span class="string">"/api/webhook"</span>, acdWebhookHandler.Handler)</span><br></pre></td></tr></table></figure><p>继续往下看 <code>ArgoCDWebhookHandler</code> 的 <code>Handle</code> 方法的具体实现，根据请求的 Header 解析得到不同 Git 服务提供商的 Git 事件的数据，然后交给 <code>HandleEvent</code> 方法来处理，<code>HandleEvent</code> 经过一系列的校验检查后执行 <code>RefreshApp</code> 刷新应用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HandleEvent handles webhook events for repo push events</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *ArgoCDWebhookHandler)</span> <span class="title">HandleEvent</span><span class="params">(payload <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure><h5 id="2-2-2-RefreshApp"><a href="#2-2-2-RefreshApp" class="headerlink" title="2.2.2 RefreshApp"></a>2.2.2 RefreshApp</h5><p>注释写的很清楚，<code>RefreshApp</code> 通过更新应用的注解，强制控制器处理它。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RefreshApp updates the refresh annotation of an application to coerce the controller to process it</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RefreshApp</span><span class="params">(appIf v1alpha1.ApplicationInterface, name <span class="keyword">string</span>, refreshType argoappv1.RefreshType)</span> <span class="params">(*argoappv1.Application, error)</span></span> &#123;</span><br><span class="line">metadata := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"metadata"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"annotations"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">argoappv1.AnnotationKeyRefresh: <span class="keyword">string</span>(refreshType),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">patch, err := json.Marshal(metadata)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"error marshaling metadata: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> attempt := <span class="number">0</span>; attempt &lt; <span class="number">5</span>; attempt++ &#123;</span><br><span class="line">app, err := appIf.Patch(context.Background(), name, types.MergePatchType, patch, metav1.PatchOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !apierr.IsConflict(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"error patching annotations in application %q: %w"</span>, name, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Infof(<span class="string">"Requested app '%s' refresh"</span>, name)</span><br><span class="line"><span class="keyword">return</span> app, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-application-controller"><a href="#2-3-application-controller" class="headerlink" title="2.3 application-controller"></a>2.3 application-controller</h4><p>沿着之前的路径，从入口函数找到应用控制器的实现，appcontroller 中定义了默认的同步周期为180s。控制器通过 <code>newApplicationInformerAndLister</code> 创建 <code>ApplicationInformer</code> 监听应用的事件并加入到队列中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Default time in seconds for application resync period</span></span><br><span class="line">defaultAppResyncPeriod = <span class="number">180</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">resyncDuration = time.Duration(appResyncPeriod) * time.Second</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">appController, err = controller.NewApplicationController(</span><br><span class="line">    namespace,</span><br><span class="line">    settingsMgr,</span><br><span class="line">    kubeClient,</span><br><span class="line">    appClient,</span><br><span class="line">    repoClientset,</span><br><span class="line">    cache,</span><br><span class="line">    kubectl,</span><br><span class="line">    resyncDuration,</span><br><span class="line">    hardResyncDuration,</span><br><span class="line">    time.Duration(selfHealTimeoutSeconds)*time.Second,</span><br><span class="line">    metricsPort,</span><br><span class="line">    metricsCacheExpiration,</span><br><span class="line">    metricsAplicationLabels,</span><br><span class="line">    kubectlParallelismLimit,</span><br><span class="line">    persistResourceHealth,</span><br><span class="line">    clusterFilter,</span><br><span class="line">    applicationNamespaces)</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"><span class="keyword">go</span> appController.Run(ctx, statusProcessors, operationProcessors)</span><br></pre></td></tr></table></figure><h5 id="2-3-1-newApplicationInformerAndLister"><a href="#2-3-1-newApplicationInformerAndLister" class="headerlink" title="2.3.1 newApplicationInformerAndLister"></a>2.3.1 newApplicationInformerAndLister</h5><p>上文中 <code>RefreshApp</code> 更新应用的注解将会产生一个 Update Event，将会走到 <code>requestAppRefresh</code> 。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">informer.AddEventHandler(</span><br><span class="line">    cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">        AddFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> !ctrl.canProcessApp(obj) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            key, err := cache.MetaNamespaceKeyFunc(obj)</span><br><span class="line">            <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">                ctrl.appRefreshQueue.Add(key)</span><br><span class="line">                ctrl.appOperationQueue.Add(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        UpdateFunc: <span class="function"><span class="keyword">func</span><span class="params">(old, <span class="built_in">new</span> <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> !ctrl.canProcessApp(<span class="built_in">new</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            key, err := cache.MetaNamespaceKeyFunc(<span class="built_in">new</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> compareWith *CompareWith</span><br><span class="line">            oldApp, oldOK := old.(*appv1.Application)</span><br><span class="line">            newApp, newOK := <span class="built_in">new</span>.(*appv1.Application)</span><br><span class="line">            <span class="keyword">if</span> oldOK &amp;&amp; newOK &amp;&amp; automatedSyncEnabled(oldApp, newApp) &#123;</span><br><span class="line">                log.WithField(<span class="string">"application"</span>, newApp.QualifiedName()).Info(<span class="string">"Enabled automated sync"</span>)</span><br><span class="line">                compareWith = CompareWithLatest.Pointer()</span><br><span class="line">            &#125;</span><br><span class="line">            ctrl.requestAppRefresh(newApp.QualifiedName(), compareWith, <span class="literal">nil</span>)</span><br><span class="line">            ctrl.appOperationQueue.Add(key)</span><br><span class="line">        &#125;,</span><br><span class="line">        DeleteFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> !ctrl.canProcessApp(obj) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// IndexerInformer uses a delta queue, therefore for deletes we have to use this</span></span><br><span class="line">            <span class="comment">// key function.</span></span><br><span class="line">            key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)</span><br><span class="line">            <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">                ctrl.appRefreshQueue.Add(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-3-2-requestAppRefresh"><a href="#2-3-2-requestAppRefresh" class="headerlink" title="2.3.2 requestAppRefresh"></a>2.3.2 requestAppRefresh</h5><p><code>compareWith</code> 是 <code>CompareWithLatest</code>， <code>after</code> 是 <code>nil</code>。requestAppRefresh 方法将会在 <code>appRefreshQueue</code> 和 <code>appOperationQueue</code> 队列中添加该更新事件。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// requestAppRefresh adds a request for given app to the refresh queue. appName</span></span><br><span class="line"><span class="comment">// needs to be the qualified name of the application, i.e. &lt;namespace&gt;/&lt;name&gt;.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *ApplicationController)</span> <span class="title">requestAppRefresh</span><span class="params">(appName <span class="keyword">string</span>, compareWith *CompareWith, after *time.Duration)</span></span> &#123;</span><br><span class="line">key := ctrl.toAppKey(appName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> compareWith != <span class="literal">nil</span> &amp;&amp; after != <span class="literal">nil</span> &#123;</span><br><span class="line">ctrl.appComparisonTypeRefreshQueue.AddAfter(fmt.Sprintf(<span class="string">"%s/%d"</span>, key, compareWith), *after)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> compareWith != <span class="literal">nil</span> &#123;</span><br><span class="line">ctrl.refreshRequestedAppsMutex.Lock()</span><br><span class="line">ctrl.refreshRequestedApps[key] = compareWith.Max(ctrl.refreshRequestedApps[key])</span><br><span class="line">ctrl.refreshRequestedAppsMutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> after != <span class="literal">nil</span> &#123;</span><br><span class="line">ctrl.appRefreshQueue.AddAfter(key, *after)</span><br><span class="line">ctrl.appOperationQueue.AddAfter(key, *after)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctrl.appRefreshQueue.Add(key)</span><br><span class="line">ctrl.appOperationQueue.Add(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-run"><a href="#2-3-3-run" class="headerlink" title="2.3.3 run"></a>2.3.3 run</h5><p>控制器使用两个单独的队列来处理应用的协调（<code>appRefreshQueue</code>）和同步（<code>appOperationQueue</code>），这两个队列分别通过 <code>processAppRefreshQueueItem</code> 和 <code>processAppOperationQueueItem</code> 来处理。</p><blockquote><p><code>statusProcessors</code> 和 <code>operationProcessors</code> 来控制启动协程的数量。</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run starts the Application CRD controller.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *ApplicationController)</span> <span class="title">Run</span><span class="params">(ctx context.Context, statusProcessors <span class="keyword">int</span>, operationProcessors <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> runtime.HandleCrash()</span><br><span class="line"><span class="keyword">defer</span> ctrl.appRefreshQueue.ShutDown()</span><br><span class="line"><span class="keyword">defer</span> ctrl.appComparisonTypeRefreshQueue.ShutDown()</span><br><span class="line"><span class="keyword">defer</span> ctrl.appOperationQueue.ShutDown()</span><br><span class="line"><span class="keyword">defer</span> ctrl.projectRefreshQueue.ShutDown()</span><br><span class="line"></span><br><span class="line">ctrl.metricsServer.RegisterClustersInfoSource(ctx, ctrl.stateCache)</span><br><span class="line">ctrl.RegisterClusterSecretUpdater(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> ctrl.appInformer.Run(ctx.Done())</span><br><span class="line"><span class="keyword">go</span> ctrl.projInformer.Run(ctx.Done())</span><br><span class="line"></span><br><span class="line">errors.CheckError(ctrl.stateCache.Init())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !cache.WaitForCacheSync(ctx.Done(), ctrl.appInformer.HasSynced, ctrl.projInformer.HasSynced) &#123;</span><br><span class="line">log.Error(<span class="string">"Timed out waiting for caches to sync"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; errors.CheckError(ctrl.stateCache.Run(ctx)) &#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; errors.CheckError(ctrl.metricsServer.ListenAndServe()) &#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; statusProcessors; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> ctrl.processAppRefreshQueueItem() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, time.Second, ctx.Done())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; operationProcessors; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> ctrl.processAppOperationQueueItem() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, time.Second, ctx.Done())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> ctrl.processAppComparisonTypeQueueItem() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, time.Second, ctx.Done())</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> ctrl.processProjectQueueItem() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, time.Second, ctx.Done())</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-4-processAppRefreshQueueItem"><a href="#2-3-4-processAppRefreshQueueItem" class="headerlink" title="2.3.4 processAppRefreshQueueItem"></a>2.3.4 processAppRefreshQueueItem</h5><p>从 <code>appRefreshQueue</code> 获取到上文中更新注解的事件后调用 <code>needRefreshAppStatus</code>，<code>needRefresh, refreshType, comparisonLevel = true, RefreshTypeNormal, CompareWithLatestForceResolve</code>。然后通过 <code>CompareAppState</code> 使用指定的版本和提供的源来比较应用程序 git 状态与实时应用程序状态。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">appKey, shutdown := ctrl.appRefreshQueue.Get()</span><br><span class="line"></span><br><span class="line">obj, exists, err := ctrl.appInformer.GetIndexer().GetByKey(appKey.(<span class="keyword">string</span>))</span><br><span class="line"></span><br><span class="line">origApp, ok := obj.(*appv1.Application)</span><br><span class="line"></span><br><span class="line">needRefresh, refreshType, comparisonLevel := ctrl.needRefreshAppStatus(origApp, ctrl.statusRefreshTimeout, ctrl.statusHardRefreshTimeout)</span><br><span class="line"></span><br><span class="line">compareResult := ctrl.appStateManager.CompareAppState(app, project, revisions, sources,</span><br><span class="line">    refreshType == appv1.RefreshTypeHard,</span><br><span class="line">    comparisonLevel == CompareWithLatestForceResolve, localManifests, hasMultipleSources)</span><br></pre></td></tr></table></figure><blockquote><p>上文提到的三分钟定时轮训也是在 needRefreshAppStatus 中实现。</p></blockquote><p><code>CompareAppState</code> 方法中会调用 <code>appStateManager</code> 实例的 <code>getRepoObjs</code> 来获取 Git 仓库中渲染出的清单文件。<code>getRepoObjs</code> 通过 gRPC 调用 reposerver 的 <code>GenerateManifest</code> 方法获取渲染出的清单文件。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppStateManager defines methods which allow to compare application spec and actual application state.</span></span><br><span class="line"><span class="keyword">type</span> AppStateManager <span class="keyword">interface</span> &#123;</span><br><span class="line">CompareAppState(app *v1alpha1.Application, project *appv1.AppProject, revisions []<span class="keyword">string</span>, sources []v1alpha1.ApplicationSource, noCache <span class="keyword">bool</span>, noRevisionCache <span class="keyword">bool</span>, localObjects []<span class="keyword">string</span>, hasMultipleSources <span class="keyword">bool</span>) *comparisonResult</span><br><span class="line">SyncAppState(app *v1alpha1.Application, state *v1alpha1.OperationState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// repoClientset 初始化后层层传递至 `AppStateManager` 实例中</span></span><br><span class="line">repoClientset := apiclient.NewRepoServerClientset(repoServerAddress, repoServerTimeoutSeconds, tlsConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getRepoObjs 通过 gRPC 调用 reposerver 的 GenerateManifest 方法</span></span><br><span class="line">manifestInfo, err := repoClient.GenerateManifest(context.Background(), &amp;apiclient.ManifestRequest&#123;</span><br><span class="line">    Repo:               repo,</span><br><span class="line">    Repos:              permittedHelmRepos,</span><br><span class="line">    Revision:           revisions[i],</span><br><span class="line">    NoCache:            noCache,</span><br><span class="line">    NoRevisionCache:    noRevisionCache,</span><br><span class="line">    AppLabelKey:        appLabelKey,</span><br><span class="line">    AppName:            app.InstanceName(m.namespace),</span><br><span class="line">    Namespace:          app.Spec.Destination.Namespace,</span><br><span class="line">    ApplicationSource:  &amp;source,</span><br><span class="line">    Plugins:            tools,</span><br><span class="line">    KustomizeOptions:   kustomizeOptions,</span><br><span class="line">    KubeVersion:        serverVersion,</span><br><span class="line">    ApiVersions:        argo.APIResourcesToStrings(apiResources, <span class="literal">true</span>),</span><br><span class="line">    VerifySignature:    verifySignature,</span><br><span class="line">    HelmRepoCreds:      permittedHelmCredentials,</span><br><span class="line">    TrackingMethod:     <span class="keyword">string</span>(argo.GetTrackingMethod(m.settingsMgr)),</span><br><span class="line">    EnabledSourceTypes: enabledSourceTypes,</span><br><span class="line">    HelmOptions:        helmOptions,</span><br><span class="line">    HasMultipleSources: app.Spec.HasMultipleSources(),</span><br><span class="line">    RefSources:         refSources,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>得到 <code>compareResult</code> 后会调用 <code>autoSync</code> 方法，如果应用开启了自动同步，将会更新 <code>Application</code> 的 <code>Operation</code> ，来启动同步操作。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// autoSync will initiate a sync operation for an application configured with automated sync</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *ApplicationController)</span> <span class="title">autoSync</span><span class="params">(app *appv1.Application, syncStatus *appv1.SyncStatus, resources []appv1.ResourceStatus)</span> *<span class="title">appv1</span>.<span class="title">ApplicationCondition</span></span></span><br></pre></td></tr></table></figure><p><code>processAppRefreshQueueItem</code> 最后将会调用 <code>persistAppStatus</code> 方法用于持久化，通过调用 k8s api 更新 applicaition 的 status。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// persistAppStatus persists updates to application status. If no changes were made, it is a no-op</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *ApplicationController)</span> <span class="title">persistAppStatus</span><span class="params">(orig *appv1.Application, newStatus *appv1.ApplicationStatus)</span></span> </span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### 2.3.5 processAppOperationQueueItem</span></span><br><span class="line"><span class="string">跟 `</span>processAppRefreshQueueItem<span class="string">` 类似，从 `</span>appOperationQueue<span class="string">` 队列中拿到待执行同步操作的应用实例，判断该应用的 `</span>Operation<span class="string">` 字段是否为空，如果不为空则执行 `</span>processRequestedAppOperation<span class="string">`。`</span>processRequestedAppOperation<span class="string">` 也会进行一些状态校验，比如是否正在同步中等，最终应用下资源的同步将由 `</span>appStateManager<span class="string">` 实例的 `</span>SyncAppState<span class="string">` 实现。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctrl *ApplicationController)</span> <span class="title">processRequestedAppOperation</span><span class="params">(app *appv1.Application)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">if</span> err := argo.ValidateDestination(context.Background(), &amp;app.Spec.Destination, ctrl.db); err != <span class="literal">nil</span> &#123;</span><br><span class="line">state.Phase = synccommon.OperationFailed</span><br><span class="line">state.Message = err.Error()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctrl.appStateManager.SyncAppState(app, state)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *appStateManager)</span> <span class="title">SyncAppState</span><span class="params">(app *v1alpha1.Application, state *v1alpha1.OperationState)</span></span> &#123;</span><br><span class="line"><span class="comment">// Sync requests might be requested with ambiguous revisions (e.g. master, HEAD, v1.2.3).</span></span><br><span class="line"><span class="comment">// This can change meaning when resuming operations (e.g a hook sync). After calculating a</span></span><br><span class="line"><span class="comment">// concrete git commit SHA, the SHA is remembered in the status.operationState.syncResult field.</span></span><br><span class="line"><span class="comment">// This ensures that when resuming an operation, we sync to the same revision that we initially</span></span><br><span class="line"><span class="comment">// started with.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    syncCtx, cleanup, err := sync.NewSyncContext(</span><br><span class="line">compareResult.syncStatus.Revision,</span><br><span class="line">reconciliationResult,</span><br><span class="line">restConfig,</span><br><span class="line">rawConfig,</span><br><span class="line">m.kubectl,</span><br><span class="line">app.Spec.Destination.Namespace,</span><br><span class="line">openAPISchema,</span><br><span class="line">opts...,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">state.Phase = common.OperationError</span><br><span class="line">state.Message = fmt.Sprintf(<span class="string">"failed to initialize sync context: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> cleanup()</span><br><span class="line"></span><br><span class="line">start := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> state.Phase == common.OperationTerminating &#123;</span><br><span class="line">syncCtx.Terminate()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">syncCtx.Sync()</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/argoproj/argo-cd/blob/6e2f2c9d1e2339b3361f3a057747fcfe30e36f44/controller/sync.go#L296" target="_blank" rel="noopener"><code>syncCtx</code></a> 我们这里看接口定义大致了解即可，具体实现这里就不再展开了。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SyncContext defines an interface that allows to execute sync operation step or terminate it.</span></span><br><span class="line"><span class="keyword">type</span> SyncContext <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Terminate terminates sync operation. The method is asynchronous: it starts deletion is related K8S resources</span></span><br><span class="line"><span class="comment">// such as in-flight resource hooks, updates operation status, and exists without waiting for resource completion.</span></span><br><span class="line">Terminate()</span><br><span class="line"><span class="comment">// Executes next synchronization step and updates operation status.</span></span><br><span class="line">Sync()</span><br><span class="line"><span class="comment">// Returns current sync operation state and information about resources synchronized so far.</span></span><br><span class="line">GetState() (common.OperationPhase, <span class="keyword">string</span>, []common.ResourceSyncResult)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <a href="https://github.com/argoproj/gitops-engine/blob/master/pkg/sync/sync_context.go" target="_blank" rel="noopener">SyncContext</a> 是由 <code>gitops-engine</code> 库实现。</p></blockquote><h3 id="3-源码流程图"><a href="#3-源码流程图" class="headerlink" title="3. 源码流程图"></a>3. 源码流程图</h3><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/argocd_webhook_request.png" alt="argocd_webhook_request"></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>自动同步是 Argo CD 的核心功能，了解其底层实现原理和源码有助于拓展技术视野，深入理解 Argo CD 的工作原理，并在遇到问题时提供解决方案。</p><h3 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5. 参考文档"></a>5. 参考文档</h3><ul><li><a href="https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components/</a></li><li><a href="https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/authz-authn/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/authz-authn/</a></li><li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/</a></li><li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/" target="_blank" rel="noopener">https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argocd </tag>
            
            <tag> gitops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protocol Buffers 学习笔记</title>
      <link href="/2023/03/22/backend/golang/golang_pb/"/>
      <url>/2023/03/22/backend/golang/golang_pb/</url>
      
        <content type="html"><![CDATA[<p>Protocol Buffers 是一种跨语言、跨平台的序列化方法，可实现结构化数据的高效编码和解码。</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Protocol Buffers 是一种数据序列化格式，类似于 JSON，但体积更小、速度更快，并支持本地语言绑定。它允许用户定义数据结构，并自动生成源代码，以便在各种数据流和编程语言中轻松读写结构化数据。</p><h3 id="Protocol-Buffers-解决了什么问题？"><a href="#Protocol-Buffers-解决了什么问题？" class="headerlink" title="Protocol Buffers 解决了什么问题？"></a>Protocol Buffers 解决了什么问题？</h3><p>Protocol Buffers 为最大几兆字节的类型化、结构化数据包提供一种序列化格式。该格式适用于短暂的网络传输和长期数据存储。它支持在不影响现有数据或更新代码的情况下扩展新信息，广泛应用于谷歌的服务器间通信和数据存储。它还能保持向后兼容性，支持添加新字段和删除现有字段。</p><h3 id="使用-Protocol-Buffers-有什么好处？"><a href="#使用-Protocol-Buffers-有什么好处？" class="headerlink" title="使用 Protocol Buffers 有什么好处？"></a>使用 Protocol Buffers 有什么好处？</h3><p>Protocol Buffers 非常适合需要以语言无关、平台无关、可扩展的方式序列化结构化、类似记录的类型化数据的任何场景。它们通常用于定义通信协议（与 gRPC 一起使用）以及数据存储。</p><h4 id="使用-Protocol-Buffers-的一些优点"><a href="#使用-Protocol-Buffers-的一些优点" class="headerlink" title="使用 Protocol Buffers 的一些优点"></a>使用 Protocol Buffers 的一些优点</h4><ul><li>紧凑的数据存储</li><li>快速解析</li><li>多种编程语言的支持</li><li>通过自动生成的类优化功能</li></ul><h4 id="跨语言兼容性"><a href="#跨语言兼容性" class="headerlink" title="跨语言兼容性"></a>跨语言兼容性</h4><p>同样的消息可以由任何支持的编程语言编写的代码读取。可以在一个平台上使用 Java 程序从一个软件系统捕获数据，根据 <code>.proto</code> 定义序列化它，然后在另一个平台上运行的单独的 Python 应用程序中从序列化数据中提取特定值。</p><p><strong>Protocol buffers 编译器 protoc 直接支持以下语言：</strong></p><ul><li><a href="https://protobuf.dev/reference/cpp/cpp-generated/#invocation" target="_blank" rel="noopener">C++</a></li><li><a href="https://protobuf.dev/reference/csharp/csharp-generated/#invocation" target="_blank" rel="noopener">C#</a></li><li><a href="https://protobuf.dev/reference/java/java-generated/#invocation" target="_blank" rel="noopener">Java</a></li><li><a href="https://protobuf.dev/reference/kotlin/kotlin-generated/#invocation" target="_blank" rel="noopener">Kotlin</a></li><li><a href="https://protobuf.dev/reference/objective-c/objective-c-generated/#invocation" target="_blank" rel="noopener">Objective-C</a></li><li><a href="https://protobuf.dev/reference/php/php-generated/#invocation" target="_blank" rel="noopener">PHP</a></li><li><a href="https://protobuf.dev/reference/python/python-generated/#invocation" target="_blank" rel="noopener">Python</a></li><li><a href="https://protobuf.dev/reference/ruby/ruby-generated/#invocation" target="_blank" rel="noopener">Ruby</a></li></ul><p><strong>以下语言由 Google 支持，但项目源代码位于 GitHub 仓库。protoc 编译器为这些语言使用插件：</strong></p><ul><li><a href="https://github.com/google/protobuf.dart" target="_blank" rel="noopener">Dart</a></li><li><a href="https://github.com/protocolbuffers/protobuf-go" target="_blank" rel="noopener">Go</a></li></ul><p>其他语言不直接由 Google 支持，而是由其他 GitHub 项目支持。这些语言在协议缓冲区的<a href="https://github.com/protocolbuffers/protobuf/blob/main/docs/third_party.md" target="_blank" rel="noopener">第三方插件</a>中有介绍。</p><h4 id="跨项目支持"><a href="#跨项目支持" class="headerlink" title="跨项目支持"></a>跨项目支持</h4><p>可以通过在 <code>.proto</code> 文件中定义消息类型并将其放置在特定项目代码库之外来在项目之间使用 Protocol buffers。如果你正在定义消息类型或枚举，并预计你的团队之外的人员将广泛使用它们，那么可以将它们放在没有依赖关系的单独文件中。<br>谷歌内部广泛使用的一些 <code>proto</code> 定义示例包括 <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/timestamp.proto" target="_blank" rel="noopener">timestamp.proto</a> 和 <a href="https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto" target="_blank" rel="noopener">status.proto</a>。</p><h3 id="Go-生成代码指南"><a href="#Go-生成代码指南" class="headerlink" title="Go 生成代码指南"></a>Go 生成代码指南</h3><h4 id="编译器调用"><a href="#编译器调用" class="headerlink" title="编译器调用"></a>编译器调用</h4><p>Protocol buffer 编译器需要一个插件来生成 Go 代码。使用 Go 1.16 或更高版本运行以下命令来安装它：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span><br></pre></td></tr></table></figure><h4 id="定义-proto-文件"><a href="#定义-proto-文件" class="headerlink" title="定义 proto 文件"></a>定义 <code>proto</code> 文件</h4><p>创建如下目录结构和定义一个用于测试的 <code>proto</code> 文件:</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── <span class="keyword">proto</span></span><br><span class="line">    └── demo.<span class="keyword">proto</span></span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> results_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义好测试用的消息后，为了生成 GO 代码，还必须为每个 <code>.proto</code> 文件提供 Go 包的导入路径。有两种方式指定Go导入路径：</p><blockquote><p>NOTE: 导入路径就是生成的 Go 代码的文件路径。</p></blockquote><ol><li>在 <code>.proto</code> 文件中声明它</li><li>在调用 protoc 时在命令行上声明它</li></ol><blockquote><p>NOTE: 通常建议在 <code>.proto</code> 文件中声明它，以便通过 <code>.proto</code> 文件本身来集中识别，并简化调用 <code>protoc</code> 时传递的标志集。</p></blockquote><h5 id="1-在-proto-文件中声明"><a href="#1-在-proto-文件中声明" class="headerlink" title="1. 在 .proto 文件中声明"></a>1. 在 <code>.proto</code> 文件中声明</h5><p>在文件中通过 <code>go_package</code> 选项声明：</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">"proto/demo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> results_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>protoc --proto_path=proto --go_out=. demo.proto</code> 可以看到成功生成了代码：</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── proto</span><br><span class="line">    ├── <span class="built_in">demo</span></span><br><span class="line">    │   └── <span class="built_in">demo</span>.pb.<span class="built_in">go</span></span><br><span class="line">    └── <span class="built_in">demo</span>.proto</span><br></pre></td></tr></table></figure><h5 id="2-在调用-protoc-时在命令行上声明"><a href="#2-在调用-protoc-时在命令行上声明" class="headerlink" title="2. 在调用 protoc 时在命令行上声明"></a>2. 在调用 protoc 时在命令行上声明</h5><p>传递一个或多个 <code>M${PROTO_FILE}=${GO_IMPORT_PATH}</code> 标志在命令行上指定。这个例子中通过 <code>--go_opt=Mdemo.proto=proto/demo</code> 声明。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">protoc --proto_path=proto --go_out=. --go_opt=Mdemo.proto=proto/demo demo.proto</span><br></pre></td></tr></table></figure><blockquote><p>NOTE: Go 导入路径和 <code>.proto</code> 文件中的包说明符 <code>package</code> 之间没有关联。后者仅与 protobuf 命名空间相关，而前者仅与 Go 命名空间相关。此外，Go 导入路径和 <code>.proto</code> 导入路径之间没有关联。</p></blockquote><h4 id="生成-GO-代码"><a href="#生成-GO-代码" class="headerlink" title="生成 GO 代码"></a>生成 GO 代码</h4><p>使用 <code>protoc</code> 命令生成，如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">protoc --proto_path=proto --go_out=. --go_opt=paths=source_relative demo.proto</span><br></pre></td></tr></table></figure><ul><li>proto_path：指定在编译 <code>.proto</code> 文件时查找导入文件的路径</li><li>go_out：生成的 Go 代码的导入路径</li><li>go_opt：用来指定生成的 Go 代码的一些特性，比如是否生成 gRPC 代码、是否使用快速的路径解析器等</li></ul><h5 id="常用的-go-opt-选项"><a href="#常用的-go-opt-选项" class="headerlink" title="常用的 go_opt 选项"></a>常用的 <code>go_opt</code> 选项</h5><ol><li><code>paths=source_relative</code>: 表示生成的 Go 代码的导入路径应该相对于 <code>.proto</code> 文件的源文件路径（即 <code>.proto</code> 文件的相对路径），而不是相对于 <code>GOPATH</code>。</li><li><code>M&lt;proto_import_path&gt;=&lt;go_import_path&gt;</code>: 映射 <code>.proto</code> 文件中的导入路径到 Go 代码中的导入路径。这在处理第三方 <code>.proto</code> 文件时非常有用，特别是当这些文件的导入路径与 Go 代码的导入路径不匹配时。</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://protobuf.dev/overview/" target="_blank" rel="noopener">https://protobuf.dev/overview/</a></li><li><a href="https://protobuf.dev/reference/go/go-generated/#invocation" target="_blank" rel="noopener">https://protobuf.dev/reference/go/go-generated/#invocation</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntV G6 实现 k8s 资源拓扑图展示</title>
      <link href="/2023/01/30/frontend/g6_tree_demo/"/>
      <url>/2023/01/30/frontend/g6_tree_demo/</url>
      
        <content type="html"><![CDATA[<p>使用 AntV G6 实现类似 <code>argocd</code> 资源拓扑图的树图。</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要记录总结如何使用 AntV G6 来展示 k8s 的资源拓扑图，下文简单实现一个 helm 部署 zookeeper 的图例，<a href="https://github.com/blazehu/g6-tree-demo" target="_blank" rel="noopener">代码地址</a> 。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>这里使用 vue2 来快速搭建一个页面，对 vue 熟悉的可以略过。 相关版本如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BLAZEHU-MB:Projects $ node --version</span><br><span class="line">v14.16.0</span><br><span class="line">BLAZEHU-MB:Projects $ vue --version</span><br><span class="line">@vue/cli 5.0.8</span><br></pre></td></tr></table></figure><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create g6-tree-demo</span><br></pre></td></tr></table></figure><p>官方快速上手文档：<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application" target="_blank" rel="noopener">https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application</a></p><h4 id="安装-amp-引用-G6"><a href="#安装-amp-引用-G6" class="headerlink" title="安装 &amp; 引用 G6"></a>安装 &amp; 引用 G6</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --save @antv/g6</span><br></pre></td></tr></table></figure><p>官方快速上手文档：<a href="https://g6.antv.antgroup.com/manual/getting-started" target="_blank" rel="noopener">https://g6.antv.antgroup.com/manual/getting-started</a></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h4><p>文件地址：common/index.js，参考官方 <a href="https://github.com/antvis/G6/blob/142e9eaeb8812d2b4770243bd3999166e076cdb3/packages/element/src/nodes/modelRect.ts" target="_blank" rel="noopener">modelRect</a> 内置节点源码。</p><h4 id="拓扑图实现逻辑"><a href="#拓扑图实现逻辑" class="headerlink" title="拓扑图实现逻辑"></a>拓扑图实现逻辑</h4><p>文件地址：components/DemoTree.vue，下面简单介绍：</p><ol><li>页面挂载后注册自定义元素 <code>执行 register 函数，后面简写为函数名</code>，初始化拓扑图 <code>initTree</code>。</li><li>初始化拓扑图首先准备数据 <code>initData</code>，然后创建拓扑图 <code>createTree</code>。</li><li>配置数据源，渲染 <code>data、render</code>。</li><li>更新数据使用 changeData 函数。</li></ol><blockquote><p>NOTE: id 如果不更新 changeData 页面刷新不完全，不能识别到node节点的变化。</p></blockquote><p>最终实现效果如下：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/g6_tree_demo.png" alt="g6_tree_demo"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上文简单介绍了如何使用G6来绘制拓扑图，要实现类似 <code>argocd</code> 前端页面的效果我们还需要做节点折叠、节点菜单、节点标签展示等等，后续作者也在陆续完善。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://g6.antv.antgroup.com/manual/faq/performance-opt" target="_blank" rel="noopener">http://g6.antv.antgroup.com/manual/faq/performance-opt</a></li><li><a href="http://g6.antv.antgroup.com/zh/examples/scatter/node/#node" target="_blank" rel="noopener">http://g6.antv.antgroup.com/zh/examples/scatter/node/#node</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> g6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 版本管理工具：g</title>
      <link href="/2023/01/15/backend/golang/golang_g/"/>
      <url>/2023/01/15/backend/golang/golang_g/</url>
      
        <content type="html"><![CDATA[<p>在开发 Go 项目时，不同项目可能需要不同版本的 Go 语言环境。g 是一个简单而强大的 Go 版本管理工具，它可以帮助我们在同一台主机上轻松切换 Go 版本，并为每个项目创建独立的开发环境，避免版本冲突。</p><a id="more"></a><h3 id="g-安装"><a href="#g-安装" class="headerlink" title="g 安装"></a>g 安装</h3><p>g 是一个跨平台的 Go 版本管理工具，支持 Windows、Linux 和 macOS。<a href="https://github.com/voidint/g?tab=readme-ov-file#installation" target="_blank" rel="noopener">安装文档</a></p><h3 id="g-常用命令"><a href="#g-常用命令" class="headerlink" title="g 常用命令"></a>g 常用命令</h3><ol><li><p>查看可用的 Go 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g ls-remote</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本的 Go</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g install 1.20.3</span><br></pre></td></tr></table></figure></li><li><p>设置全局 Go 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g use 1.20.3</span><br></pre></td></tr></table></figure></li><li><p>查看已安装的 Go 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g ls</span><br></pre></td></tr></table></figure></li><li><p>卸载 Go 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g uninstall 1.20.3</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过使用 g，我们可以在同一台主机上轻松管理多个 Go 版本，并为每个项目选择合适的版本。这不仅解决了不同项目对 Go 版本的需求，还避免了版本冲突，提高了开发效率。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/voidint/g" target="_blank" rel="noopener">g 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务上云后如何使用 perf 生成火焰图</title>
      <link href="/2022/09/14/cloudnative/perf_analyse/"/>
      <url>/2022/09/14/cloudnative/perf_analyse/</url>
      
        <content type="html"><![CDATA[<p>业务上云迁移至腾讯云 Serverless 集群后，使用<code>perf</code>生成服务器的火焰图。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>业务模块使用的基础镜像是<code>Ubuntu20.04</code>，上云前的做法是在机器上docker run的，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --cap-add CAP_SYS_ADMIN --privileged=true --pid=container:$&#123;targetContainerId&#125; --network=container:$&#123;targetContainerId&#125; $&#123;image&#125;:$&#123;imageTag&#125; -ti ...</span><br></pre></td></tr></table></figure><p>上云后通过在 Pod 中的容器之间共享进程命名空间的方式实现，在业务Pod中注入一个用于<code>perf</code>分析的容器。</p><h3 id="安装-perf"><a href="#安装-perf" class="headerlink" title="安装 perf"></a>安装 perf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install linux-tools-generic</span><br><span class="line">ln -s /usr/lib/linux-tools/5.4.0-125-generic/perf /usr/bin/perf</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong><br>安装 linux-tools-generic 完成后，需要建立软链接，不然查看 <code>perf</code>版本，会提示如下报错信息。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@game-server-6-6f446dcxxx-5j45b:~# perf</span><br><span class="line">WARNING: perf not found for kernel 5.4.119-1</span><br><span class="line"></span><br><span class="line">  You may need to install the following packages for this specific kernel:</span><br><span class="line">    linux-tools-5.4.119-1-tlinux4-0009-public-eks</span><br><span class="line">    linux-cloud-tools-5.4.119-1-tlinux4-0009-public-eks</span><br><span class="line"></span><br><span class="line">  You may also want to install one of the following packages to keep up to date:</span><br><span class="line">    linux-tools-tlinux4-0009-public-eks</span><br><span class="line">    linux-cloud-tools-tlinux4-0009-public-eks</span><br></pre></td></tr></table></figure><blockquote><p>这里报错其实是因为<code>perf</code>已经内置在<code>linux-tools-generic</code>里面，所以我们安装后创建<code>perf</code>软链接即可（5.4.0-125-generic 版本目录根据实际情况替换即可）。</p></blockquote><h3 id="使用-perf-生成火焰图"><a href="#使用-perf-生成火焰图" class="headerlink" title="使用 perf 生成火焰图"></a>使用 perf 生成火焰图</h3><h4 id="pod-共享进程命名空间"><a href="#pod-共享进程命名空间" class="headerlink" title="pod 共享进程命名空间"></a>pod 共享进程命名空间</h4><p>使用 Pod <code>.spec</code> 中的 <code>shareProcessNamespace</code> 字段可以启用进程命名空间共享，官方例子：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  shareProcessNamespace: true</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">  - name: shell</span><br><span class="line">    image: busybox:1.28</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add:</span><br><span class="line">        - SYS_PTRACE</span><br><span class="line">      privileged: true</span><br><span class="line">    stdin: true</span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong><br>我们需要在 <code>perf</code> 容器中分析业务容器 <code>gamesvr</code>，这个操作需要 SYS_PTRACE 权能。所以我们需要为 <code>perf</code> Container 设置权能。通过安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。</p><p>这里列举部分能力：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CAP_SYS_MODULE: 允许插入和删除内核模块</span><br><span class="line">CAP_SYS_RAWIO:  允许直接访问/devport,/dev/mem,/dev/kmem及原始块设备</span><br><span class="line">CAP_SYS_CHROOT: 允许使用chroot()系统调用</span><br><span class="line">CAP_SYS_PTRACE: 允许跟踪任何进程</span><br><span class="line">CAP_SYS_PACCT:  允许执行进程的BSD式审计</span><br></pre></td></tr></table></figure><p>我们使用 <code>perf</code>来分析业务进程，所以需要 CAP_SYS_PTRACE 权能。</p><blockquote><p>Linux Capabilities 的定义的形式为 CAP_XXX。但是你在 Container 字段使用时，需要将名称中的 CAP_ 部分去掉。例如，要添加 CAP_SYS_PTRACE，可在 capabilities 列表中添加 SYS_PTRACE。</p></blockquote><h4 id="perf-容器注入"><a href="#perf-容器注入" class="headerlink" title="perf 容器注入"></a>perf 容器注入</h4><p>我这里工作负载是使用的 deployment，通过 openkruise sidecarset 注入，这里就不赘述。注入完成后我们 exec 进入 perf 容器，执行 <code>ps -ef</code> 可以看到业务容器的进程 <code>gamesvr</code> 的进程ID是13。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>game-server<span class="number">-6</span><span class="number">-6f</span>446dcxxx<span class="number">-5</span>j45b:~# ps -ef </span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           <span class="number">1</span>       <span class="number">0</span>  <span class="number">0</span> <span class="number">19</span>:<span class="number">29</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /pause</span><br><span class="line">root          <span class="number">13</span>       <span class="number">0</span>  <span class="number">6</span> <span class="number">19</span>:<span class="number">29</span> ?        <span class="number">00</span>:<span class="number">02</span>:<span class="number">37</span> /root/example/bin/gamesvr</span><br><span class="line">root          <span class="number">26</span>       <span class="number">0</span>  <span class="number">0</span> <span class="number">19</span>:<span class="number">29</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> sleep <span class="number">9</span>d</span><br><span class="line">root         <span class="number">786</span>       <span class="number">0</span>  <span class="number">0</span> <span class="number">20</span>:<span class="number">02</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</span><br><span class="line">root         <span class="number">855</span>     <span class="number">842</span>  <span class="number">0</span> <span class="number">20</span>:<span class="number">11</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</span><br></pre></td></tr></table></figure><h4 id="perf-分析"><a href="#perf-分析" class="headerlink" title="perf 分析"></a>perf 分析</h4><p>执行 <code>perf record -F 99 -g -m 1 -p ${targetContainerId} -- sleep 120</code>，targetContainerId 是业务进程ID。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@game-server-6-6f446dcxxx-5j45b:~# perf record -F 99 -g -m 1 -p 13 -- sleep 120</span><br><span class="line">[ perf record: Woken up 65 times to write data ]</span><br><span class="line">[ perf record: Captured and wrote 0.148 MB perf.data (524 samples) ]</span><br></pre></td></tr></table></figure><p>查看分析文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@game-server-6-6f446dcxxx-5j45b:~# perf report -i perf.data &gt; perf.txt</span><br></pre></td></tr></table></figure><p>生成火焰图，这里会用到<a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener">火焰图工具</a>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@game-server-6-6f446dcxxx-5j45b:~# git clone https://github.com/brendangregg/FlameGraph.git</span><br><span class="line">root@game-server-6-6f446dcxxx-5j45b:~# perf script | FlameGraph/stackcollapse-perf.pl | FlameGraph/flamegraph.pl &gt; demo.svg</span><br></pre></td></tr></table></figure><p>这里生成的 demo.svg 就是我们需要的火焰图（下面是一个例图）。开发可以通过火焰图来查看看服务的性能热点。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/perf_analyse_flame.png" alt="perf_analyse_flame"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里协助开发使用 <code>perf</code> 生成火焰图的过程中遇到了2个问题，一是安装 <code>perf</code> 装不上报错，二是由于 <code>perf</code> 容器没有 SYS_PTRACE 权能导致生成的分析数据没有函数名称（只有地址信息）。通过协助排查问题加深了对 k8s Security Context的理解。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/share-process-namespace/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/share-process-namespace/</a></li><li><a href="https://www.cnblogs.com/iamfy/archive/2012/09/20/2694977.html" target="_blank" rel="noopener">https://www.cnblogs.com/iamfy/archive/2012/09/20/2694977.html</a></li><li><a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener">https://github.com/brendangregg/FlameGraph</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> perf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04 安装 perf 报错</title>
      <link href="/2022/09/13/ops/linux/ubuntu_install_perf/"/>
      <url>/2022/09/13/ops/linux/ubuntu_install_perf/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu20.04系统中安装perf工具时出现的报错问题及解决方法。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>尝试安装<code>perf</code>生成服务器的火焰图，安装<code>perf</code>后报错，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install linux-tools-generic</span><br></pre></td></tr></table></figure><p>安装完成后查看<code>perf</code>版本，发现报错如下<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/ubuntu_install_perf_error_1.png" alt="ubuntu_install_perf_error_1"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>其实<code>perf</code>已经内置在<code>linux-tools-generic</code>里面，所以安装后创建<code>perf</code>软链接即可（5.4.0-125-generic 版本目录根据实际情况替换即可）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/lib/linux-tools/5.4.0-125-generic/perf /usr/bin/perf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> perf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝盾插件问题排查小记</title>
      <link href="/2022/08/21/devops/landun_plugins_ipapk/"/>
      <url>/2022/08/21/devops/landun_plugins_ipapk/</url>
      
        <content type="html"><![CDATA[<p>2021年给开发商做了一个<a href="https://bk.tencent.com/docs/markdown/ZH/Devops/3.0/UserGuide/Services/Client-experience/intro.md" target="_blank" rel="noopener">移动端版本体验</a>，最近开发商反馈当上传的文件比较大时经常失败。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>用户报障说蓝盾插件使用经常失败。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="插件执行报错"><a href="#插件执行报错" class="headerlink" title="插件执行报错"></a>插件执行报错</h4><p>报错日志内容如下：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-06</span><span class="number">-28</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">19</span>:<span class="number">202</span> : OverflowError: <span class="built_in">string</span> longer than <span class="number">2147483647</span> bytes</span><br><span class="line"><span class="number">2022</span><span class="number">-06</span><span class="number">-28</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">19</span>:<span class="number">362</span> : ##[error] </span><br><span class="line"><span class="number">2022</span><span class="number">-06</span><span class="number">-28</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">19</span>:<span class="number">362</span> : Fail to run the plugin because of error(Process exited with an error: <span class="number">1</span>)</span><br><span class="line"><span class="number">2022</span><span class="number">-06</span><span class="number">-28</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">19</span>:<span class="number">364</span> : ##[warning]No output</span><br></pre></td></tr></table></figure><p>日志报错分析：该插件是用来上传文件的，使用 <code>requests</code> 库来上传文件，这里报错信息是说明插件上传的文件太大。之前没有考虑到文件太大的情况。</p><h4 id="修复后偶尔报错超时504"><a href="#修复后偶尔报错超时504" class="headerlink" title="修复后偶尔报错超时504"></a>修复后偶尔报错超时504</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_plugins_ipapk_img.png" alt="landun_plugins_ipapk_img"></p><p>日志报错分析：插件日志504，重试了3次。查看后端服务日志发现业务逻辑正常处理完毕，但是请求返回时 <code>write: broken pipe</code>。这里的报错可以基本判断是由于请求处理时间过长，当后端服务返回时 CLB 已经断开了连接。</p><h5 id="请求调用链路"><a href="#请求调用链路" class="headerlink" title="请求调用链路"></a>请求调用链路</h5><p>蓝盾插件 -&gt; 腾讯云CLB -&gt; 后端服务（CVM上跑的docker）</p><h5 id="腾讯云CLB监控"><a href="#腾讯云CLB监控" class="headerlink" title="腾讯云CLB监控"></a>腾讯云CLB监控</h5><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/landun_plugins_ipapk_timeout.png" alt="landun_plugins_ipapk_timeout"></p><p>排查到这里可以确定问题根因：CLB 的超时导致的504。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="插件上传报错解决方案"><a href="#插件上传报错解决方案" class="headerlink" title="插件上传报错解决方案"></a>插件上传报错解决方案</h4><p>插件侧优化代码使用 <code>requests-toolbelt</code> 上传文件。同时修改 <a href="https://cloud.tencent.com/document/product/214/15171" target="_blank" rel="noopener">CLB个性化配置</a> 支持超过2G的大文件上传，不缓存客户端请求体。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">5120M</span>;</span><br><span class="line"><span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">900s</span>;</span><br></pre></td></tr></table></figure><h4 id="超时问题解决方案"><a href="#超时问题解决方案" class="headerlink" title="超时问题解决方案"></a>超时问题解决方案</h4><p>修改 <a href="https://cloud.tencent.com/document/product/214/15171" target="_blank" rel="noopener">CLB个性化配置</a> ，修改超时设置。这里主要修改 <code>proxy_read_timeout</code>。</p><blockquote><p>NOTE: proxy_read_timeout 是控制 CLB 至后端服务之间的超时时间。</p></blockquote><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">900s</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝盾 </tag>
            
            <tag> 腾讯云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubebuilder Webhook 开发之创建 TLS 证书</title>
      <link href="/2022/08/16/cloudnative/k8s_csr_tls/"/>
      <url>/2022/08/16/cloudnative/k8s_csr_tls/</url>
      
        <content type="html"><![CDATA[<p>在编写一个准入 Webhook 服务时，需要配置相关证书，k8s 提供了 api 用于对用户自主创建的证书进行认证签发。以下部分演示为 Webhook 服务创建 TLS 证书。</p><a id="more"></a><h3 id="创建-TLS-证书"><a href="#创建-TLS-证书" class="headerlink" title="创建 TLS 证书"></a>创建 TLS 证书</h3><h4 id="创建你的证书"><a href="#创建你的证书" class="headerlink" title="创建你的证书"></a>创建你的证书</h4><p>通过运行以下命令生成私钥:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | cfssl genkey - | cfssljson -bare server</span><br><span class="line">&#123;</span><br><span class="line">  "hosts": [</span><br><span class="line">    "my-svc.my-namespace.svc.cluster.local",</span><br><span class="line">    "my-pod.my-namespace.pod.cluster.local",</span><br><span class="line">    "192.0.2.24",</span><br><span class="line">    "10.0.34.2"</span><br><span class="line">  ],</span><br><span class="line">  "CN": "my-pod.my-namespace.pod.cluster.local",</span><br><span class="line">  "key": &#123;</span><br><span class="line">    "algo": "ecdsa",</span><br><span class="line">    "size": 256</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>此命令生成两个文件；它生成包含 PEM 编码 PKCS#10 证书请求的 <code>server.csr</code>， 以及 PEM 编码密钥的 <code>server-key.pem</code>，用于待生成的证书。</p><h4 id="创建证书签名请求（CSR）"><a href="#创建证书签名请求（CSR）" class="headerlink" title="创建证书签名请求（CSR）"></a>创建证书签名请求（CSR）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: certificates.k8s.io/v1beta1</span><br><span class="line">kind: CertificateSigningRequest</span><br><span class="line">metadata:</span><br><span class="line">  name: example</span><br><span class="line">spec:</span><br><span class="line">  request: $(cat server.csr | base64 | tr -d '\n')</span><br><span class="line">  usages:</span><br><span class="line">  - digital signature</span><br><span class="line">  - key encipherment</span><br><span class="line">  - server auth</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>你能看到的输出类似于：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certificatesigningrequest.certificates.k8s.io/example created</span><br></pre></td></tr></table></figure><blockquote><p>Warning: certificates.k8s.io/v1beta1 CertificateSigningRequest is deprecated in v1.19+, unavailable in v1.22+; use certificates.k8s.io/v1 CertificateSigningRequest</p></blockquote><p>CSR 处于 Pending 状态。执行下面的命令你将可以看到：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME      AGE   SIGNERNAME                     REQUESTOR                 CONDITION</span><br><span class="line">example   17s   kubernetes.io/legacy-unknown   100015926370-1650441195   Pending</span><br></pre></td></tr></table></figure><h4 id="批准证书签名请求（CSR）"><a href="#批准证书签名请求（CSR）" class="headerlink" title="批准证书签名请求（CSR）"></a>批准证书签名请求（CSR）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl certificate approve example</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certificatesigningrequest.certificates.k8s.io/example approved</span><br></pre></td></tr></table></figure><p>你现在应该能看到如下输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME      AGE    SIGNERNAME                     REQUESTOR                 CONDITION</span><br><span class="line">example   5m4s   kubernetes.io/legacy-unknown   100015926370-1650441195   Approved,Issued</span><br></pre></td></tr></table></figure><h4 id="下载证书并使用它"><a href="#下载证书并使用它" class="headerlink" title="下载证书并使用它"></a>下载证书并使用它</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr example -o jsonpath='&#123;.status.certificate&#125;' | base64 --decode &gt; server.crt</span><br></pre></td></tr></table></figure><p>现在你可以将 <code>server.crt</code> 和 <code>server-key.pem</code> 作为你的服务的 https 认证了。</p><p>例如 <code>kubebuilder</code> 中使用 TLS 证书，将 <code>server.crt</code> 和 <code>server-key.pem</code> 放在 <code>cert</code> 目录中并修改名称为 <code>tls.crt</code> 和 <code>tls.key</code>，然后指定证书目录：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">Scheme:                 scheme,</span><br><span class="line">MetricsBindAddress:     metricsAddr,</span><br><span class="line">Port:                   <span class="number">9443</span>,</span><br><span class="line">HealthProbeBindAddress: probeAddr,</span><br><span class="line">LeaderElection:         enableLeaderElection,</span><br><span class="line">LeaderElectionID:       <span class="string">"27e1b0af.blazehu.com"</span>,</span><br><span class="line">CertDir:                <span class="string">"./cert/"</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="从-v1beta1-迁移到-v1"><a href="#从-v1beta1-迁移到-v1" class="headerlink" title="从 v1beta1 迁移到 v1"></a>从 v1beta1 迁移到 v1</h3><p>上述例子使用 <code>certificates.k8s.io/v1beta1</code> API 版本的 <code>CertificateSigningRequest</code> 不在 v1.22 版本中继续提供。<a href="https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/" target="_blank" rel="noopener">官方迁移指南</a>点这里。 我们可以使用 <code>certificates.k8s.io/v1</code> API 版本，此 API 从 v1.19 版本开始可用。</p><ul><li><code>certificates.k8s.io/v1</code> 中需要额外注意的变更：<ul><li>对于请求证书的 API 客户端而言：<ul><li><code>spec.signerName</code> 现在变成必需字段（参阅 <a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers" target="_blank" rel="noopener">已知的 Kubernetes 签署者</a>）， 并且通过 <code>certificates.k8s.io/v1</code> API 不可以创建签署者为 <code>kubernetes.io/legacy-unknown</code> 的请求</li><li><code>spec.usages</code> 现在变成必需字段，其中不可以包含重复的字符串值， 并且只能包含已知的用法字符串</li></ul></li></ul></li></ul><h4 id="创建你的证书-1"><a href="#创建你的证书-1" class="headerlink" title="创建你的证书"></a>创建你的证书</h4><p>通过运行以下命令生成私钥:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | cfssl genkey - | cfssljson -bare server</span><br><span class="line">&#123;</span><br><span class="line">  "hosts": [</span><br><span class="line">    "my-svc.my-namespace.svc.cluster.local",</span><br><span class="line">    "my-pod.my-namespace.pod.cluster.local",</span><br><span class="line">    "192.0.2.24",</span><br><span class="line">    "10.0.34.2"</span><br><span class="line">  ],</span><br><span class="line">  "CN": "my-pod.my-namespace.pod.cluster.local",</span><br><span class="line">  "key": &#123;</span><br><span class="line">    "algo": "ecdsa",</span><br><span class="line">    "size": 256</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="创建证书签名请求（CSR）-1"><a href="#创建证书签名请求（CSR）-1" class="headerlink" title="创建证书签名请求（CSR）"></a>创建证书签名请求（CSR）</h4><p>这里 csr signerName 不能是 <code>kubernetes.io/legacy-unknown</code>，演示我们随便指定一个为 <code>example.com/serving</code>，v1beta1 版本默认是 <code>kubernetes.io/legacy-unknown</code>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: certificates.k8s.io/v1</span><br><span class="line">kind: CertificateSigningRequest</span><br><span class="line">metadata:</span><br><span class="line">  name: example</span><br><span class="line">spec:</span><br><span class="line">  request: $(cat server.csr | base64 | tr -d '\n')</span><br><span class="line">  signerName: example.com/serving</span><br><span class="line">  usages:</span><br><span class="line">  - digital signature</span><br><span class="line">  - key encipherment</span><br><span class="line">  - server auth</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="批准证书签名请求（CSR）-1"><a href="#批准证书签名请求（CSR）-1" class="headerlink" title="批准证书签名请求（CSR）"></a>批准证书签名请求（CSR）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl certificate approve example</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certificatesigningrequest.certificates.k8s.io/example approved</span><br></pre></td></tr></table></figure><p>你现在应该能看到如下输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME      AGE   SIGNERNAME            REQUESTOR                 CONDITION</span><br><span class="line">example   11s   example.com/serving   100015926370-1650441195   Approved</span><br></pre></td></tr></table></figure><p>这里可以看到证书请求已被批准，但是没有自动签名，正在等待请求的签名者对其签名。</p><h4 id="签名证书签名请求（CSR）"><a href="#签名证书签名请求（CSR）" class="headerlink" title="签名证书签名请求（CSR）"></a>签名证书签名请求（CSR）</h4><p>我们扮演证书签署者的角色，颁发证书并将其上传到 API 服务器。</p><h5 id="创建证书颁发机构"><a href="#创建证书颁发机构" class="headerlink" title="创建证书颁发机构"></a>创建证书颁发机构</h5><p>通过运行以下命令创建签名证书:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | cfssl gencert -initca - | cfssljson -bare ca</span><br><span class="line">&#123;</span><br><span class="line">  "CN": "example.com/serving",</span><br><span class="line">  "key": &#123;</span><br><span class="line">    "algo": "rsa",</span><br><span class="line">    "size": 2048</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>这会产生一个证书颁发机构密钥文件（<code>ca-key.pem</code>）和证书（<code>ca.pem</code>）。</p><h5 id="颁发证书"><a href="#颁发证书" class="headerlink" title="颁发证书"></a>颁发证书</h5><p>创建文件 <code>server-signing-config.json</code> 内容如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"signing"</span>: &#123;</span><br><span class="line">    <span class="attr">"default"</span>: &#123;</span><br><span class="line">      <span class="attr">"usages"</span>: [</span><br><span class="line">        <span class="string">"digital signature"</span>,</span><br><span class="line">        <span class="string">"key encipherment"</span>,</span><br><span class="line">        <span class="string">"server auth"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"expiry"</span>: <span class="string">"876000h"</span>,</span><br><span class="line">      <span class="attr">"ca_constraint"</span>: &#123;</span><br><span class="line">        <span class="attr">"is_ca"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>server-signing-config.json</code> 签名配置、证书颁发机构密钥文件和证书来签署证书请求：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr example -o jsonpath='&#123;.spec.request&#125;' | \</span><br><span class="line">  base64 --decode | \</span><br><span class="line">  cfssl sign -ca ca.pem -ca-key ca-key.pem -config server-signing-config.json - | \</span><br><span class="line">  cfssljson -bare ca-signed-server</span><br></pre></td></tr></table></figure><p>这会生成一个签名的服务证书文件，<code>ca-signed-server.pem</code>。</p><h5 id="上传签名证书"><a href="#上传签名证书" class="headerlink" title="上传签名证书"></a>上传签名证书</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr example -o json | \</span><br><span class="line">  jq '.status.certificate = "'$(base64 ca-signed-server.pem | tr -d '\n')'"' | \</span><br><span class="line">  kubectl replace --raw /apis/certificates.k8s.io/v1/certificatesigningrequests/example/status -f -</span><br></pre></td></tr></table></figure><p>批准 CSR 并上传签名证书后，你现在应该能看到如下输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get csr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME      AGE   SIGNERNAME            REQUESTOR                 CONDITION</span><br><span class="line">example   10m   example.com/serving   100015926370-1650441195   Approved,Issued</span><br></pre></td></tr></table></figure><p>这是你可以正常下载证书并使用它了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/certificate-signing-requests/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/certificate-signing-requests/</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tls/managing-tls-in-a-cluster/#configuring-your-cluster-to-provide-signing" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/tasks/tls/managing-tls-in-a-cluster/#configuring-your-cluster-to-provide-signing</a></li><li><a href="https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubebuilder Watching Resources</title>
      <link href="/2022/07/08/cloudnative/kubebuilder_watch_resource/"/>
      <url>/2022/07/08/cloudnative/kubebuilder_watch_resource/</url>
      
        <content type="html"><![CDATA[<p>我们在开发过程中，可能需要开发一个类似<code>Deployment</code>的资源逻辑，管理依赖资源是控制器的基础，如果不能观察它们的状态变化就不可能管理它们。这就意味着，我们需要 <code>reconciler</code> 能监控多个资源的变化。</p><a id="more"></a><blockquote><p>NOTE: <code>Deployment</code> 必须知道其管理的 <code>ReplicaSet</code> 何时更改，<code>ReplicaSet</code> 必须知道其管理的 <code>Pod</code> 何时被删除，或者从健康变为不健康等。</p></blockquote><p>控制器运行时库为管理和监视资源提供了多种方式。这包括从简单而明显的用例（例如查看由控制器创建和管理的资源）到更独特和更高级的用例。</p><ul><li>控制器创建和管理的资源 (Watching Operator Managed Resources)</li><li>外部管理的资源 (Watching Externally Managed Resources)</li></ul><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>以 <code>Tcaplus</code> 资源为例，<code>Tcaplus</code> 资源通过 <code>ConfigMap</code>（proto 文件）来创建表格。当 <code>ConfigMap</code> 发生变化时自动更新表格，下面例子不实际调用腾讯云API，只要验证接收到事件请求即可。</p><blockquote><p>NOTE: <code>TcaplusDB</code> 是腾讯出品的分布式NoSQL数据库。官方API文档：<a href="https://cloud.tencent.com/document/product/596/39648。" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/596/39648。</a></p></blockquote><br><h3 id="控制器创建和管理的资源"><a href="#控制器创建和管理的资源" class="headerlink" title="控制器创建和管理的资源"></a>控制器创建和管理的资源</h3><h4 id="资源定义-Defined-Tcaplus-Resources"><a href="#资源定义-Defined-Tcaplus-Resources" class="headerlink" title="资源定义 (Defined Tcaplus Resources)"></a>资源定义 (Defined Tcaplus Resources)</h4><p><strong>api/v1/tcaplus_types.go</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TcaplusSpec <span class="keyword">struct</span> &#123;</span><br><span class="line">Checksum          <span class="keyword">string</span>             <span class="string">`json:"checksum,omitempty"`</span></span><br><span class="line">ConfigMapTemplate ConfigMapTemplate  <span class="string">`json:"configMapTemplate,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ConfigMapTemplate <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span>            <span class="string">`json:"name,omitempty"`</span></span><br><span class="line">Data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="string">`json:"data,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制器逻辑-Manage-the-Owned-Resource"><a href="#控制器逻辑-Manage-the-Owned-Resource" class="headerlink" title="控制器逻辑 (Manage the Owned Resource)"></a>控制器逻辑 (Manage the Owned Resource)</h4><p><strong>controllers/tcaplus_controller.go</strong><br>当 <code>tcaplus</code> CR 创建时根据 <code>ConfigMapTemplate</code> 创建附属的 <code>ConfigMap</code> 资源并设置<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/" target="_blank" rel="noopener">属主关系</a>。</p><ul><li><code>Reconcile</code> 方法：根据模版创建 <code>ConfigMap</code> 并设置属主关系</li><li><code>SetupWithManager</code> 方法：<code>For</code> 方法之后调用 <code>Owns</code> 方法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *TcaplusReconciler)</span> <span class="title">Reconcile</span><span class="params">(ctx context.Context, req ctrl.Request)</span> <span class="params">(ctrl.Result, error)</span></span> &#123;</span><br><span class="line">logger := log.FromContext(ctx)</span><br><span class="line"></span><br><span class="line">logger.Info(<span class="string">"reconciling"</span>)</span><br><span class="line">tcaplus := &amp;examplev1.Tcaplus&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.Get(ctx, req.NamespacedName, tcaplus); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, client.IgnoreNotFound(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configMap := &amp;corev1.ConfigMap&#123;&#125;</span><br><span class="line">configMap.Name = tcaplus.Spec.ConfigMapTemplate.Name</span><br><span class="line">configMap.Namespace = tcaplus.Namespace</span><br><span class="line">configMap.Data = tcaplus.Spec.ConfigMapTemplate.Data</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> err := controllerutil.SetControllerReference(tcaplus, configMap, r.Scheme); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(err, <span class="string">"get configmap failed"</span>, <span class="string">"configmap"</span>, configMap.Name)</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foundConfigMap := &amp;corev1.ConfigMap&#123;&#125;</span><br><span class="line">err := r.Get(ctx, types.NamespacedName&#123;Name: configMap.Name, Namespace: tcaplus.Namespace&#125;, foundConfigMap)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; errors.IsNotFound(err) &#123;</span><br><span class="line">logger.V(<span class="number">1</span>).Info(<span class="string">"creating configmap"</span>, <span class="string">"configmap"</span>, configMap.Name)</span><br><span class="line">err = r.Create(ctx, configMap)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetupWithManager sets up the controller with the Manager.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *TcaplusReconciler)</span> <span class="title">SetupWithManager</span><span class="params">(mgr ctrl.Manager)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.NewControllerManagedBy(mgr).</span><br><span class="line">For(&amp;examplev1.Tcaplus&#123;&#125;).</span><br><span class="line">Owns(&amp;corev1.ConfigMap&#123;&#125;).</span><br><span class="line">Complete(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE：同一控制器创建的资源才可以设置属主关系，不然会提示：already owned by another controller。</p></blockquote></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><strong>config/samples/example_v1_tcaplus.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">example.blazehu.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Tcaplus</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcaplus-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">checksum:</span> <span class="string">"123"</span></span><br><span class="line">  <span class="attr">configMapTemplate:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"tcaplus-configmap-example"</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">      <span class="attr">demo.proto:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">syntax</span> <span class="string">=</span> <span class="string">"proto3"</span><span class="string">;</span></span><br><span class="line">        <span class="string">package</span> <span class="string">example;</span></span><br><span class="line">        <span class="string">message</span> <span class="string">Example</span> <span class="string">&#123;</span></span><br><span class="line">          <span class="string">uint32</span> <span class="string">a</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line">          <span class="string">uint32</span> <span class="string">b</span> <span class="string">=</span> <span class="number">2</span><span class="string">;</span></span><br><span class="line">          <span class="string">uint32</span> <span class="string">c</span> <span class="string">=</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用上述配置文件创建 <code>tcaplus</code> 资源。创建结果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BLAZEHU-MB2:samples $ k get tcaplus</span><br><span class="line">NAME             AGE</span><br><span class="line">tcaplus-sample   19m</span><br><span class="line">BLAZEHU-MB2:samples $ k get configmap</span><br><span class="line">NAME                        DATA   AGE</span><br><span class="line">tcaplus-configmap-example   1      19m</span><br></pre></td></tr></table></figure><p>可以查看 <code>tcaplus-configmap-example</code> 的属主关系：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">demo.proto:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">syntax</span> <span class="string">=</span> <span class="string">"proto3"</span><span class="string">;</span></span><br><span class="line">    <span class="string">package</span> <span class="string">example;</span></span><br><span class="line">    <span class="string">message</span> <span class="string">Example</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">uint32</span> <span class="string">a</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line">      <span class="string">uint32</span> <span class="string">b</span> <span class="string">=</span> <span class="number">2</span><span class="string">;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2022-07-07T09:02:43Z"</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcaplus-configmap-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">ownerReferences:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">example.blazehu.com/v1</span></span><br><span class="line">    <span class="attr">blockOwnerDeletion:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Tcaplus</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tcaplus-sample</span></span><br><span class="line">    <span class="attr">uid:</span> <span class="string">7c50f2e1-0e37-4aa0-bf49-c2d410d6153e</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"6837330713"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/configmaps/tcaplus-configmap-example</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">6c29f90b-0e51-4d9f-a6a8-cfb6906ed1b0</span></span><br></pre></td></tr></table></figure><p>手动修改 <code>tcaplus-sample</code> 和 <code>tcaplus-configmap-example</code> 后查看控制器日志发现能正常观察 <code>CR</code> 和 <code>ConfigMap</code> 的变化了。</p><h3 id="外部管理的资源"><a href="#外部管理的资源" class="headerlink" title="外部管理的资源"></a>外部管理的资源</h3><h4 id="资源定义-Defined-Tcaplus-Resources-1"><a href="#资源定义-Defined-Tcaplus-Resources-1" class="headerlink" title="资源定义 (Defined Tcaplus Resources)"></a>资源定义 (Defined Tcaplus Resources)</h4><p><strong>api/v1/tcaplus_types.go</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TcaplusSpec <span class="keyword">struct</span> &#123;</span><br><span class="line">Checksum     <span class="keyword">string</span>             <span class="string">`json:"checksum,omitempty"`</span></span><br><span class="line">ConfigMapRef ConfigMapReference <span class="string">`json:"configMapRef,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ConfigMapReference <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"name,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制器逻辑-Manage-the-Owned-Resource-1"><a href="#控制器逻辑-Manage-the-Owned-Resource-1" class="headerlink" title="控制器逻辑 (Manage the Owned Resource)"></a>控制器逻辑 (Manage the Owned Resource)</h4><p><strong>controllers/tcaplus_controller.go</strong><br><code>For</code> 方法之后调用 <code>Watches</code> 方法就可以监听对应资源的事件，但是会监听集群里所有相关资源的事件，所以这里我们自定义事件处理方法来过滤出我们关注的资源的事件。</p><ul><li>通过 <code>EnqueueRequestsFromMapFunc</code> 创建一个事件处理方法，该方法通过 <code>FieldSelector</code> 在 <code>ConfigMap</code> 的事件中过滤出跟 <code>tcaplus CR</code> 相关联的事件。</li><li>使用 <code>FieldSelector</code> 时我们需要建立对应的索引，使用 <code>mgr.GetFieldIndexer().IndexField()</code> 创建。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ConfigMapField = <span class="string">".spec.configMapRef.name"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *TcaplusReconciler)</span> <span class="title">findObjectsForConfigMap</span><span class="params">(configMap client.Object)</span> []<span class="title">reconcile</span>.<span class="title">Request</span></span> &#123;</span><br><span class="line">attachedTcaplusList := &amp;examplev1.TcaplusList&#123;&#125;</span><br><span class="line">listOps := &amp;client.ListOptions&#123;</span><br><span class="line">FieldSelector: fields.OneTermEqualSelector(ConfigMapField, configMap.GetName()),</span><br><span class="line">Namespace:     configMap.GetNamespace(),</span><br><span class="line">&#125;</span><br><span class="line">err := r.List(context.TODO(), attachedTcaplusList, listOps)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []reconcile.Request&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests := <span class="built_in">make</span>([]reconcile.Request, <span class="built_in">len</span>(attachedTcaplusList.Items))</span><br><span class="line"><span class="keyword">for</span> i, item := <span class="keyword">range</span> attachedTcaplusList.Items &#123;</span><br><span class="line">requests[i] = reconcile.Request&#123;</span><br><span class="line">NamespacedName: types.NamespacedName&#123;</span><br><span class="line">Name:      item.GetName(),</span><br><span class="line">Namespace: item.GetNamespace(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> requests</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetupWithManager sets up the controller with the Manager.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *TcaplusReconciler)</span> <span class="title">SetupWithManager</span><span class="params">(mgr ctrl.Manager)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := mgr.GetFieldIndexer().IndexField(context.Background(), &amp;examplev1.Tcaplus&#123;&#125;, ConfigMapField, <span class="function"><span class="keyword">func</span><span class="params">(rawObj client.Object)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">tcaplus := rawObj.(*examplev1.Tcaplus)</span><br><span class="line"><span class="keyword">if</span> tcaplus.Spec.ConfigMapRef.Name == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">string</span>&#123;tcaplus.Spec.ConfigMapRef.Name&#125;</span><br><span class="line">&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctrl.NewControllerManagedBy(mgr).</span><br><span class="line">For(&amp;examplev1.Tcaplus&#123;&#125;).</span><br><span class="line">Watches(</span><br><span class="line">&amp;source.Kind&#123;Type: &amp;corev1.ConfigMap&#123;&#125;&#125;,</span><br><span class="line">handler.EnqueueRequestsFromMapFunc(r.findObjectsForConfigMap),</span><br><span class="line">builder.WithPredicates(predicate.ResourceVersionChangedPredicate&#123;&#125;),</span><br><span class="line">).</span><br><span class="line">Complete(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面 <code>ConfigMap</code> 监听使用默认的 <code>Predicates</code> 过滤器 <code>ResourceVersionChangedPredicate</code>，查看源码定义就是说当 resource version 变化时事件会入队。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ResourceVersionChangedPredicate implements a default update predicate function on resource version change.</span></span><br><span class="line"><span class="keyword">type</span> ResourceVersionChangedPredicate <span class="keyword">struct</span> &#123;</span><br><span class="line">Funcs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE: 我们也可以自己定一个变更过滤器 <code>Predicate</code>。也可以通过 <code>WithEventFilter</code> 来针对监听的所有资源过滤。</p></blockquote></li></ul><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p><strong>config/samples/example_v1_tcaplus.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcaplus-configmap-example</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">demo.proto:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">syntax</span> <span class="string">=</span> <span class="string">"proto3"</span><span class="string">;</span></span><br><span class="line">    <span class="string">package</span> <span class="string">example;</span></span><br><span class="line">    <span class="string">message</span> <span class="string">Example</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">uint32</span> <span class="string">a</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line">      <span class="string">uint32</span> <span class="string">b</span> <span class="string">=</span> <span class="number">2</span><span class="string">;</span></span><br><span class="line">      <span class="string">uint32</span> <span class="string">c</span> <span class="string">=</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">example.blazehu.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Tcaplus</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcaplus-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">checksum:</span> <span class="string">"123"</span></span><br><span class="line">  <span class="attr">configMapRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"tcaplus-configmap-example"</span></span><br></pre></td></tr></table></figure><p>使用上述配置创建完毕后，手动修改 <code>tcaplus-sample</code> 和 <code>tcaplus-configmap-example</code> 查看控制器日志发现同样能正常观察 <code>CR</code> 和 <code>ConfigMap</code> 的变化。</p><blockquote><p>NOTE: 查看 <code>tcaplus-configmap-example</code> 可以看到没有和 <code>tcaplus</code> 的属主关系。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>EventHandler</code> 可以在 <code>watch</code> 特定资源时设置该资源的事件监听规则。</li><li><code>WithEventFilter</code> 配置变更过滤器，可以针对 <code>watch</code> 的所有资源，统一地设置事件监听规则。</li><li><code>Owns</code> 源码分析可以发现 <code>Owns</code> 相当于调用 <code>Watches(&amp;source.Kind{Type: &lt;ForType-forInput&gt;}, &amp;handler.EnqueueRequestForOwner{OwnerType: apiType, IsController: true})</code>。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubebuilder.io/reference/watching-resources.html" target="_blank" rel="noopener">https://www.kubebuilder.io/reference/watching-resources.html</a></li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/</a></li><li><a href="https://segmentfault.com/a/1190000020359577" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020359577</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubebuilder Admission Webhooks</title>
      <link href="/2022/04/12/cloudnative/kubebuilder_admission_webhooks/"/>
      <url>/2022/04/12/cloudnative/kubebuilder_admission_webhooks/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="1-什么是准入控制"><a href="#1-什么是准入控制" class="headerlink" title="1. 什么是准入控制?"></a>1. 什么是准入控制?</h3><p>准入控制（Admission Controller）是 Kubernetes API Server 用于拦截请求的一种手段。Admission 可以做到对请求的资源对象进行校验，修改。service mesh 最近很火的项目 Istio 天生支持 Kubernetes，利用的就是 Admission 对服务实例自动注入 sidecar。</p><h3 id="2-什么是准入-Webhook？"><a href="#2-什么是准入-Webhook？" class="headerlink" title="2. 什么是准入 Webhook？"></a>2. 什么是准入 Webhook？</h3><p>准入 Webhook 是一种用于接收准入请求并对其进行处理的 HTTP 回调机制。 可以定义两种类型的准入 webhook，即 验证性质的准入 Webhook 和 修改性质的准入 Webhook。修改性质的准入 Webhook 会先被调用。它们可以更改发送到 API 服务器的对象以执行自定义的设置默认值操作。</p><p>在完成了所有对象修改并且 API 服务器也验证了所传入的对象之后， 验证性质的 Webhook 会被调用，并通过拒绝请求的方式来强制实施自定义的策略。</p><blockquote><p>说明： 如果准入 Webhook 需要保证它们所看到的是对象的最终状态以实施某种策略。 则应使用验证性质的准入 Webhook，因为对象被修改性质 Webhook 看到之后仍然可能被修改。</p></blockquote><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_webhook1.jpeg" alt="kubebuilder_admission_webhooks_webhook1"></p><h3 id="3-尝试准入-Webhook"><a href="#3-尝试准入-Webhook" class="headerlink" title="3. 尝试准入 Webhook"></a>3. 尝试准入 Webhook</h3><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><ul><li>确保 Kubernetes 集群版本至少为 v1.16（以便使用 admissionregistration.k8s.io/v1 API） 或者 v1.9 （以便使 admissionregistration.k8s.io/v1beta1 API）。</li><li>确保启用 <code>MutatingAdmissionWebhook</code> 和 <code>ValidatingAdmissionWebhook</code> 控制器。 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use" target="_blank" rel="noopener">这里</a>是一组推荐的 admission 控制器，通常可以启用。</li><li>确保启用了 admissionregistration.k8s.io/v1beta1 API。</li></ul><h3 id="4-配置准入-Webhook"><a href="#4-配置准入-Webhook" class="headerlink" title="4. 配置准入 Webhook"></a>4. 配置准入 Webhook</h3><p>你可以通过 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#validatingwebhookconfiguration-v1-admissionregistration-k8s-io" target="_blank" rel="noopener">ValidatingWebhookConfiguration</a> 或者 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#mutatingwebhookconfiguration-v1-admissionregistration-k8s-io" target="_blank" rel="noopener">MutatingWebhookConfiguration</a> 动态配置哪些资源要被哪些准入 Webhook 处理。详细配置可以参阅 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/#webhook-configuration" target="_blank" rel="noopener">Webhook配置</a> 部分。</p><h3 id="5-认证和信任"><a href="#5-认证和信任" class="headerlink" title="5. 认证和信任"></a>5. 认证和信任</h3><p>默认情况下，apiserver不会向webhooks进行身份验证。但是，如果您想对客户端进行身份验证，可以将apiserver配置为使用基本身份验证、承载令牌或证书对Webhook进行身份验证。你可以在<a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#authenticate-apiservers" target="_blank" rel="noopener">这里</a>找到详细的步骤。</p><h3 id="6-编写一个准入-Webhook-服务器"><a href="#6-编写一个准入-Webhook-服务器" class="headerlink" title="6. 编写一个准入 Webhook 服务器"></a>6. 编写一个准入 Webhook 服务器</h3><p>Webhook Admission 属于同步调用，需要用户部署自己的 webhook server，创建自定义的配置资源对象： ValidatingWebhookConfiguration 或 MutatingWebhookConfiguration。下面使用 kubebuilder 开发一个简单的 demo。</p><h4 id="6-1-创建项目"><a href="#6-1-创建项目" class="headerlink" title="6.1 创建项目"></a>6.1 创建项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubebuilder init --domain blazehu.com --owner <span class="string">"blazehu"</span> --repo blazehu.com/kubegame</span><br></pre></td></tr></table></figure><blockquote><p>提示： 这里通过 kubebuilder v3 创建的话，在 config 目录下会缺少 certmanager、webhook 目录以及 default/manager_webhook_patch.yml 和 webhookcainjection_patch.yaml 文件。可以通过从v2生成拷贝过来进行修改。</p></blockquote><h4 id="6-2-创建控制器"><a href="#6-2-创建控制器" class="headerlink" title="6.2 创建控制器"></a>6.2 创建控制器</h4><p>这里只需要创建一个控制器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubebuilder create api --group svc --version v1 --kind App</span><br></pre></td></tr></table></figure><h4 id="6-3-创建-webhook"><a href="#6-3-创建-webhook" class="headerlink" title="6.3 创建 webhook"></a>6.3 创建 webhook</h4><h5 id="Implement-Your-Handler"><a href="#Implement-Your-Handler" class="headerlink" title="Implement Your Handler"></a>Implement Your Handler</h5><p>新增 mutatingwebhook.go &amp; validatingwebhook.go 文件</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutatingwebhook.go</span></span><br><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line">corev1 <span class="string">"k8s.io/api/core/v1"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/client"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/webhook/admission"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +kubebuilder:webhook:admissionReviewVersions=v1,sideEffects=None,path=/mutate-v1-svc,mutating=true,failurePolicy=fail,groups="",resources=services,verbs=create;update,versions=v1,name=msvc.kb.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// KubeGameAnnotator annotates Pods</span></span><br><span class="line"><span class="keyword">type</span> KubeGameAnnotator <span class="keyword">struct</span> &#123;</span><br><span class="line">Client  client.Client</span><br><span class="line">decoder *admission.Decoder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle adds an annotation to every incoming pods.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *KubeGameAnnotator)</span> <span class="title">Handle</span><span class="params">(ctx context.Context, req admission.Request)</span> <span class="title">admission</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">pod := &amp;corev1.Pod&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := a.decoder.Decode(req, pod)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> admission.Errored(http.StatusBadRequest, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pod.Annotations == <span class="literal">nil</span> &#123;</span><br><span class="line">pod.Annotations = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">pod.Annotations[<span class="string">"example-mutating-admission-webhook"</span>] = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line">marshaledPod, err := json.Marshal(pod)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> admission.Errored(http.StatusInternalServerError, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> admission.PatchResponseFromRaw(req.Object.Raw, marshaledPod)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KubeGameAnnotator implements admission.DecoderInjector.</span></span><br><span class="line"><span class="comment">// A decoder will be automatically injected.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// InjectDecoder injects the decoder.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *KubeGameAnnotator)</span> <span class="title">InjectDecoder</span><span class="params">(d *admission.Decoder)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">a.decoder = d</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// validatingwebhook.go</span></span><br><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">corev1 <span class="string">"k8s.io/api/core/v1"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/client"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/webhook/admission"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +kubebuilder:webhook:admissionReviewVersions=v1,sideEffects=None,path=/validate-v1-svc,mutating=false,failurePolicy=fail,groups="",resources=services,verbs=create;update,versions=v1,name=vsvc.kb.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// KubeGameValidator validates Pods</span></span><br><span class="line"><span class="keyword">type</span> KubeGameValidator <span class="keyword">struct</span> &#123;</span><br><span class="line">Client  client.Client</span><br><span class="line">decoder *admission.Decoder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle admits a pod if a specific annotation exists.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *KubeGameValidator)</span> <span class="title">Handle</span><span class="params">(ctx context.Context, req admission.Request)</span> <span class="title">admission</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">pod := &amp;corev1.Pod&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := v.decoder.Decode(req, pod)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> admission.Errored(http.StatusBadRequest, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key := <span class="string">"example-mutating-admission-webhook"</span></span><br><span class="line">anno, found := pod.Annotations[key]</span><br><span class="line"><span class="keyword">if</span> !found &#123;</span><br><span class="line"><span class="keyword">return</span> admission.Denied(fmt.Sprintf(<span class="string">"missing annotation %s"</span>, key))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> anno != <span class="string">"foo"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> admission.Denied(fmt.Sprintf(<span class="string">"annotation %s did not have value %q"</span>, key, <span class="string">"foo"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> admission.Allowed(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KubeGameValidator implements admission.DecoderInjector.</span></span><br><span class="line"><span class="comment">// A decoder will be automatically injected.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// InjectDecoder injects the decoder.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *KubeGameValidator)</span> <span class="title">InjectDecoder</span><span class="params">(d *admission.Decoder)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">v.decoder = d</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：因为上述逻辑需要services权限，所以我们在控制器里需要添加如下内容 <code>//+kubebuilder:rbac:groups=&quot;&quot;,resources=services,verbs=get;list;watch;create;update;patch;delete</code> 用于生成 rbac manifests。</p></blockquote><h5 id="Register-Your-Handler"><a href="#Register-Your-Handler" class="headerlink" title="Register Your Handler"></a>Register Your Handler</h5><p>修改 main.go ，注册我们的 webhook handler</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">setupLog.Info(<span class="string">"setting up webhook server"</span>)</span><br><span class="line">hookServer := mgr.GetWebhookServer()</span><br><span class="line"></span><br><span class="line">setupLog.Info(<span class="string">"registering webhooks to the webhook server"</span>)</span><br><span class="line">hookServer.Register(<span class="string">"/mutate-v1-svc"</span>, &amp;webhook.Admission&#123;Handler: &amp;controllers.KubeGameAnnotator&#123;Client: mgr.GetClient()&#125;&#125;)</span><br><span class="line">hookServer.Register(<span class="string">"/validate-v1-svc"</span>, &amp;webhook.Admission&#123;Handler: &amp;controllers.KubeGameValidator&#123;Client: mgr.GetClient()&#125;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>提示： 这里注册的<code>path</code>（例如 validate-v1-sv）路径需要和 validatingwebhook.go 、mutatingwebhook.go 文件里的 CRD validation 匹配，不然 <code>kustomize</code> 生成出来的 webhook yaml 文件不对。</p></blockquote><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p>make run 会报如下错误，是因为没有证书导致，需要配置证书，可以<a href="http://blazehu.com/2022/08/16/cloudnative/k8s_csr_tls/" target="_blank" rel="noopener">手动签发证书</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.646924212701068e+09ERRORsetupproblem running manager&#123;<span class="string">"error"</span>: <span class="string">"open /var/folders/67/375276sx6hv0nln1whwm5syh0000gq/T/k8s-webhook-server/serving-certs/tls.crt: no such file or directory"</span>&#125;</span><br></pre></td></tr></table></figure><p>我本地指定证书目录：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">Scheme:                 scheme,</span><br><span class="line">MetricsBindAddress:     metricsAddr,</span><br><span class="line">Port:                   <span class="number">9443</span>,</span><br><span class="line">HealthProbeBindAddress: probeAddr,</span><br><span class="line">LeaderElection:         enableLeaderElection,</span><br><span class="line">LeaderElectionID:       <span class="string">"27e1b0af.blazehu.com"</span>,</span><br><span class="line">CertDir:                <span class="string">"./cert/"</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新启动发现恢复正常<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_run.png" alt="kubebuilder_admission_webhooks_run"></p><blockquote><p>提示： run <code>controller-gen rbac:roleName=manager-role crd webhook paths=./... output:crd:artifacts:config=config/crd/bases -w</code> to see all available markers, or <code>controller-gen rbac:roleName=manager-role crd webhook paths=./... output:crd:artifacts:config=config/crd/bases -h</code> for usage</p></blockquote><h3 id="7-部署至集群"><a href="#7-部署至集群" class="headerlink" title="7. 部署至集群"></a>7. 部署至集群</h3><h4 id="7-1-部署-cert-manager"><a href="#7-1-部署-cert-manager" class="headerlink" title="7.1 部署 cert manager"></a>7.1 部署 cert manager</h4><p>建议使用 <a href="https://github.com/cert-manager/cert-manager" target="_blank" rel="noopener">certmanager</a> 为 webhook 服务器提供证书。其他解决方案也有效，只要它们将证书放在所需的位置。安装文档点<a href="https://cert-manager.io/docs/installation/" target="_blank" rel="noopener">这里</a><br>通过如下方式注入 <code>caBundle</code> :</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This patch add annotation to admission webhook config and</span></span><br><span class="line"><span class="comment"># the variables $(CERTIFICATE_NAMESPACE) and $(CERTIFICATE_NAME) will be substituted by kustomize.</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MutatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mutating-webhook-configuration</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/inject-ca-from:</span> <span class="string">$(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">validating-webhook-configuration</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/inject-ca-from:</span> <span class="string">$(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)</span></span><br></pre></td></tr></table></figure><h4 id="7-2-构建镜像"><a href="#7-2-构建镜像" class="headerlink" title="7.2 构建镜像"></a>7.2 构建镜像</h4><ul><li>镜像替换：default/manager_auth_proxy_patch.yaml 文件中的 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0 （网络慢）</li><li>Dockerfile 去掉 <code>go mod download</code>，直接使用本地 vendor 构建 （网络慢）</li><li>Dockerfile 去掉 <code>COPY api/ api/</code>， 因为没有创建 Resource</li><li>去掉 main.go 文件中配置的证书路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make docker-build IMG=xxxx</span><br><span class="line">make docker-push IMG=xxxx</span><br></pre></td></tr></table></figure><h4 id="7-3-修改模版，然后部署"><a href="#7-3-修改模版，然后部署" class="headerlink" title="7.3 修改模版，然后部署"></a>7.3 修改模版，然后部署</h4><ul><li>修改 config/default/kustomization.yaml ， 将 webhook、certmanager 相关的注释去掉。</li><li>修改 config/crd/kustomization.yaml ，将 webhook、certmanager 相关的注释去掉。</li><li>修改 config/default/kustomization.yaml ， 将 crd 相关的给注释掉。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make deploy IMG=xxxx</span><br></pre></td></tr></table></figure><p>部署成功：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_deploy.png" alt="kubebuilder_admission_webhooks_deploy"></p><p>查看控制器日志：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_logs.png" alt="kubebuilder_admission_webhooks_logs"></p><h4 id="7-4-测试"><a href="#7-4-测试" class="headerlink" title="7.4 测试"></a>7.4 测试</h4><p>简单创建一个 service，webhook 会注入一个注解，并进行验证。下图可以看到成功注入。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_test2.png" alt="kubebuilder_admission_webhooks_test2"><br>控制日志：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_admission_webhooks_test1.png" alt="kubebuilder_admission_webhooks_test1"></p><blockquote><p>说明：查看 MutatingWebhookConfiguration 配置可以看到 caBundle 被注入其中了。</p></blockquote><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><p>总结下 webhook Admission 的优势：</p><ul><li>webhook 可动态扩展 Admission 能力，满足自定义客户的需求。</li><li>不需要重启 API Server，可通过创建 webhook configuration 热加载 webhook admission。</li></ul><h3 id="Reference-documentation"><a href="#Reference-documentation" class="headerlink" title="Reference documentation"></a>Reference documentation</h3><ul><li><a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/</a></li><li><a href="https://book.kubebuilder.io/reference/admission-webhook.html" target="_blank" rel="noopener">https://book.kubebuilder.io/reference/admission-webhook.html</a></li><li><a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/examples/builtins" target="_blank" rel="noopener">https://github.com/kubernetes-sigs/controller-runtime/tree/master/examples/builtins</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubebuilder Best Practices</title>
      <link href="/2022/04/10/cloudnative/kubebuilder/"/>
      <url>/2022/04/10/cloudnative/kubebuilder/</url>
      
        <content type="html"><![CDATA[<p>Kubebuilder is a framework for building Kubernetes APIs using custom resource definitions (CRDs).</p><a id="more"></a><blockquote><p>Note: kubebuilder can save us a lot of work and make developing CRDs and adminsion webhooks incredibly easy.</p></blockquote><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download kubebuilder and install locally.</span></span><br><span class="line">curl -L -o kubebuilder https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)</span><br><span class="line">chmod +x kubebuilder &amp;&amp; mv kubebuilder /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><br><h3 id="Create-a-Project"><a href="#Create-a-Project" class="headerlink" title="Create a Project"></a>Create a Project</h3><hr><p>Create a directory, and then run the init command inside of it to initialize a new project. Follows an example.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ mkdir ~/Project/workspace-go/example</span><br><span class="line">[blazehu@MacBook ~]$ <span class="built_in">cd</span> ~/Project/workspace-go/example</span><br><span class="line">[blazehu@MacBook ~]$ kubebuilder init --domain blazehu.com --owner <span class="string">"blazehu"</span> --repo blazehu.com/example</span><br><span class="line">Writing kustomize manifests <span class="keyword">for</span> you to edit...</span><br><span class="line">Writing scaffold <span class="keyword">for</span> you to edit...</span><br><span class="line">Get controller runtime:</span><br><span class="line">$ go get sigs.k8s.io/controller-runtime@v0.10.0</span><br><span class="line">Update dependencies:</span><br><span class="line">$ go mod tidy</span><br><span class="line">Next: define a resource with:</span><br><span class="line">$ kubebuilder create api</span><br></pre></td></tr></table></figure><blockquote><p>If your project is initialized within GOPATH, the implicitly called go mod init will interpolate the module path for you. Otherwise –repo=<module path>must be set.</module></p></blockquote><br><h3 id="Adding-a-new-API"><a href="#Adding-a-new-API" class="headerlink" title="Adding a new API"></a>Adding a new API</h3><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubebuilder create api --group cos --version v1 --kind Bucket</span><br><span class="line">Create Resource [y/n]</span><br><span class="line">y</span><br><span class="line">Create Controller [y/n]</span><br><span class="line">y</span><br><span class="line">Writing kustomize manifests <span class="keyword">for</span> you to edit...</span><br><span class="line">Writing scaffold <span class="keyword">for</span> you to edit...</span><br><span class="line">api/v1/bucket_types.go</span><br><span class="line">controllers/bucket_controller.go</span><br><span class="line">Update dependencies:</span><br><span class="line">$ go mod tidy</span><br><span class="line">Running make:</span><br><span class="line">$ make generate</span><br><span class="line">go: creating new go.mod: module tmp</span><br><span class="line">Downloading sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0</span><br><span class="line">go get: added sigs.k8s.io/controller-tools v0.7.0</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen object:headerFile=<span class="string">"hack/boilerplate.go.txt"</span> paths=<span class="string">"./..."</span></span><br><span class="line">Next: implement your new API and generate the manifests (e.g. CRDs,CRs) with:</span><br><span class="line">$ make manifests</span><br></pre></td></tr></table></figure><br><h3 id="Designing-an-API"><a href="#Designing-an-API" class="headerlink" title="Designing an API"></a>Designing an API</h3><hr><p><strong>api/v1/bucket_types.go</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BucketSpec defines the desired state of Bucket</span></span><br><span class="line"><span class="keyword">type</span> BucketSpec <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster</span></span><br><span class="line"><span class="comment">// Important: Run "make" to regenerate code after modifying this file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo is an example field of Bucket. Edit bucket_types.go to remove/update</span></span><br><span class="line">Name   <span class="keyword">string</span> <span class="string">`json:"name,omitempty"`</span></span><br><span class="line">Region <span class="keyword">string</span> <span class="string">`json:"region,omitempty"`</span></span><br><span class="line">ACL    <span class="keyword">string</span> <span class="string">`json:"acl,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Implementing-a-controller"><a href="#Implementing-a-controller" class="headerlink" title="Implementing a controller"></a>Implementing a controller</h3><hr><p><strong>controllers/cos.go</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/tencentyun/cos-go-sdk-v5"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CosStorage <span class="keyword">struct</span> &#123;</span><br><span class="line">client          *cos.Client</span><br><span class="line">accessKeyId     <span class="keyword">string</span></span><br><span class="line">accessKeySecret <span class="keyword">string</span></span><br><span class="line">bucket          <span class="keyword">string</span></span><br><span class="line">region          <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewCosStorage endpoint: https://cloud.tencent.com/document/product/436/6224</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCosStorage</span><span class="params">(region, bucketName <span class="keyword">string</span>)</span> *<span class="title">CosStorage</span></span> &#123;</span><br><span class="line">url, _ := url.Parse(fmt.Sprintf(<span class="string">"https://%s.cos.%s.myqcloud.com"</span>, bucketName, region))</span><br><span class="line">accessKeyId := <span class="string">""</span></span><br><span class="line">accessKeySecret := <span class="string">""</span></span><br><span class="line">b := &amp;cos.BaseURL&#123;BucketURL: url&#125;</span><br><span class="line">client := cos.NewClient(b, &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;cos.AuthorizationTransport&#123;</span><br><span class="line">SecretID:  accessKeyId,</span><br><span class="line">SecretKey: accessKeySecret,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> &amp;CosStorage&#123;</span><br><span class="line">client:          client,</span><br><span class="line">accessKeyId:     accessKeyId,</span><br><span class="line">accessKeySecret: accessKeySecret,</span><br><span class="line">region:          region,</span><br><span class="line">bucket:          bucketName,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosStorage)</span> <span class="title">Put</span><span class="params">(acl <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">opt := &amp;cos.BucketPutOptions&#123;</span><br><span class="line">XCosACL: acl,</span><br><span class="line">&#125;</span><br><span class="line">_, err := c.client.Bucket.Put(context.Background(), opt)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosStorage)</span> <span class="title">Delete</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">_, err := c.client.Bucket.Delete(context.Background())</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controllers/bucket_controller.go</strong></p><blockquote><p>tips: Finalizers allow controllers to implement asynchronous pre-delete hooks. Let’s say you create an external resource (such as a storage bucket) for each object of your API type, and you want to delete the associated external resource on object’s deletion from Kubernetes, you can use a finalizer to do that.</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright 2022 blazehu.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"k8s.io/apimachinery/pkg/runtime"</span></span><br><span class="line">ctrl <span class="string">"sigs.k8s.io/controller-runtime"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/client"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"</span></span><br><span class="line"><span class="string">"sigs.k8s.io/controller-runtime/pkg/log"</span></span><br><span class="line"></span><br><span class="line">cosv1 <span class="string">"blazehu.com/example/api/v1"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// BucketReconciler reconciles a Bucket object</span></span><br><span class="line"><span class="keyword">type</span> BucketReconciler <span class="keyword">struct</span> &#123;</span><br><span class="line">client.Client</span><br><span class="line">Scheme *runtime.Scheme</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">bucketFinalizerName = <span class="string">"bucket.cos.blazehu.com/finalizer"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//+kubebuilder:rbac:groups=cos.blazehu.com,resources=buckets,verbs=get;list;watch;create;update;patch;delete</span></span><br><span class="line"><span class="comment">//+kubebuilder:rbac:groups=cos.blazehu.com,resources=buckets/status,verbs=get;update;patch</span></span><br><span class="line"><span class="comment">//+kubebuilder:rbac:groups=cos.blazehu.com,resources=buckets/finalizers,verbs=update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reconcile is part of the main kubernetes reconciliation loop which aims to</span></span><br><span class="line"><span class="comment">// move the current state of the cluster closer to the desired state.</span></span><br><span class="line"><span class="comment">// TODO(user): Modify the Reconcile function to compare the state specified by</span></span><br><span class="line"><span class="comment">// the Bucket object against the actual cluster state, and then</span></span><br><span class="line"><span class="comment">// perform operations to make the cluster state reflect the state specified by</span></span><br><span class="line"><span class="comment">// the user.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For more details, check Reconcile and its Result here:</span></span><br><span class="line"><span class="comment">// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.10.0/pkg/reconcile</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *BucketReconciler)</span> <span class="title">Reconcile</span><span class="params">(ctx context.Context, req ctrl.Request)</span> <span class="params">(ctrl.Result, error)</span></span> &#123;</span><br><span class="line">logger := log.FromContext(ctx)</span><br><span class="line"></span><br><span class="line">bucket := &amp;cosv1.Bucket&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.Get(ctx, req.NamespacedName, bucket); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, client.IgnoreNotFound(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// examine DeletionTimestamp to determine if object is under deletion</span></span><br><span class="line"><span class="keyword">if</span> bucket.ObjectMeta.DeletionTimestamp.IsZero() &#123;</span><br><span class="line"><span class="comment">// The object is not being deleted, so if it does not have our finalizer,</span></span><br><span class="line"><span class="comment">// then lets add the finalizer and update the object. This is equivalent</span></span><br><span class="line"><span class="comment">// registering our finalizer.</span></span><br><span class="line"><span class="keyword">if</span> !controllerutil.ContainsFinalizer(bucket, bucketFinalizerName) &#123;</span><br><span class="line">controllerutil.AddFinalizer(bucket, bucketFinalizerName)</span><br><span class="line"><span class="keyword">if</span> err := r.Update(ctx, bucket); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.updateExternalResources(bucket); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(err, <span class="string">"unable to create Bucket"</span>)</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">logger.Info(<span class="string">"create Bucket succeed"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// The object is being deleted</span></span><br><span class="line"><span class="keyword">if</span> controllerutil.ContainsFinalizer(bucket, bucketFinalizerName) &#123;</span><br><span class="line"><span class="comment">// our finalizer is present, so lets handle any external dependency</span></span><br><span class="line"><span class="keyword">if</span> err := r.deleteExternalResources(bucket); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// if fail to delete the external dependency here, return with error</span></span><br><span class="line"><span class="comment">// so that it can be retried</span></span><br><span class="line">logger.Error(err, <span class="string">"unable to delete Bucket"</span>)</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove our finalizer from the list and update it.</span></span><br><span class="line">controllerutil.RemoveFinalizer(bucket, bucketFinalizerName)</span><br><span class="line"><span class="keyword">if</span> err := r.Update(ctx, bucket); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">logger.Info(<span class="string">"delete Bucket succeed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop reconciliation as the item is being deleted</span></span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bucket reconcile logic</span></span><br><span class="line"><span class="keyword">return</span> ctrl.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *BucketReconciler)</span> <span class="title">updateExternalResources</span><span class="params">(bucket *cosv1.Bucket)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cosClient := NewCosStorage(bucket.Spec.Region, bucket.Spec.Name)</span><br><span class="line"><span class="keyword">return</span> cosClient.Put(bucket.Spec.ACL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *BucketReconciler)</span> <span class="title">deleteExternalResources</span><span class="params">(bucket *cosv1.Bucket)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cosClient := NewCosStorage(bucket.Spec.Region, bucket.Spec.Name)</span><br><span class="line"><span class="keyword">return</span> cosClient.Delete()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetupWithManager sets up the controller with the Manager.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *BucketReconciler)</span> <span class="title">SetupWithManager</span><span class="params">(mgr ctrl.Manager)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctrl.NewControllerManagedBy(mgr).</span><br><span class="line">For(&amp;cosv1.Bucket&#123;&#125;).</span><br><span class="line">Complete(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Test-It-Out"><a href="#Test-It-Out" class="headerlink" title="Test It Out"></a>Test It Out</h3><hr><ol><li><p>Install the CRDs into the cluster (<code>make install</code>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ make install</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen rbac:roleName=manager-role crd webhook paths=<span class="string">"./..."</span> output:crd:artifacts:config=config/crd/bases</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/kustomize build config/crd | kubectl apply -f -</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/buckets.cos.blazehu.com created</span><br></pre></td></tr></table></figure></li><li><p>Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running) (<code>make run</code>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ make run</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen rbac:roleName=manager-role crd webhook paths=<span class="string">"./..."</span> output:crd:artifacts:config=config/crd/bases</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen object:headerFile=<span class="string">"hack/boilerplate.go.txt"</span> paths=<span class="string">"./..."</span></span><br><span class="line">go fmt ./...</span><br><span class="line">go vet ./...</span><br><span class="line">go run ./main.go</span><br><span class="line">2022-01-27T22:05:30.207+0800INFOcontroller-runtime.metricsmetrics server is starting to listen&#123;<span class="string">"addr"</span>: <span class="string">":8080"</span>&#125;</span><br><span class="line">2022-01-27T22:05:30.207+0800INFOsetupstarting manager</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOstarting metrics server&#123;<span class="string">"path"</span>: <span class="string">"/metrics"</span>&#125;</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOcontroller.bucketStarting EventSource&#123;<span class="string">"reconciler group"</span>: <span class="string">"cos.blazehu.com"</span>, <span class="string">"reconciler kind"</span>: <span class="string">"Bucket"</span>, <span class="string">"source"</span>: <span class="string">"kind source: /, Kind="</span>&#125;</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOcontroller.bucketStarting Controller&#123;<span class="string">"reconciler group"</span>: <span class="string">"cos.blazehu.com"</span>, <span class="string">"reconciler kind"</span>: <span class="string">"Bucket"</span>&#125;</span><br><span class="line">2022-01-27T22:05:30.309+0800INFOcontroller.bucketStarting workers&#123;<span class="string">"reconciler group"</span>: <span class="string">"cos.blazehu.com"</span>, <span class="string">"reconciler kind"</span>: <span class="string">"Bucket"</span>, <span class="string">"worker count"</span>: 1&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create Custom Resources (create bucket.cos.blazehu.com/bucket-sample) (<code>cos_v1_bucket.yaml</code>)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cos.blazehu.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Bucket</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bucket-sample</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blazehu</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># TODO(user): Add fields here</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-1251762279</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-shanghai</span></span><br><span class="line">  <span class="attr">acl:</span> <span class="string">private</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f cos_v1_bucket.yaml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubectl apply -f cos_v1_bucket.yaml</span><br><span class="line">bucket.cos.blazehu.com/bucket-sample created</span><br><span class="line">[blazehu@MacBook ~]$ kubectl get bucket.cos.blazehu.com  -n blazehu</span><br><span class="line">NAME            AGE</span><br><span class="line">bucket-sample   17s</span><br></pre></td></tr></table></figure><p>Tencent cloud console view found that the bucket was created normally.<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/kubebuilder_crd_example1.png" alt="kubebuilder_crd_example1"></p></li><li><p>Delete Instances of Custom Resources (delete bucket.cos.blazehu.com/bucket-sample)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubectl delete -f cos_v1_bucket.yaml</span><br><span class="line">bucket.cos.blazehu.com <span class="string">"bucket-sample"</span> deleted</span><br></pre></td></tr></table></figure><p>Tencent Cloud Console view found that the bucket has been deleted.</p><br></li></ol><h3 id="Run-It-On-the-Cluster"><a href="#Run-It-On-the-Cluster" class="headerlink" title="Run It On the Cluster"></a>Run It On the Cluster</h3><hr><p>Deploy the controller to the cluster with image specified by IMG</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make docker-build docker-push IMG=&lt;some-registry&gt;/&lt;project-name&gt;:tag</span><br><span class="line">make deploy IMG=&lt;some-registry&gt;/&lt;project-name&gt;:tag</span><br></pre></td></tr></table></figure><br><h3 id="Uninstall-CRDs"><a href="#Uninstall-CRDs" class="headerlink" title="Uninstall CRDs"></a>Uninstall CRDs</h3><hr><p>To delete your CRDs from the cluster, run <code>make uninstall</code><br><br></p><h3 id="Undeploy-controller"><a href="#Undeploy-controller" class="headerlink" title="Undeploy controller"></a>Undeploy controller</h3><hr><p>UnDeploy the controller to the cluster, run <code>make undeploy</code><br><br></p><h3 id="Reference-documentation"><a href="#Reference-documentation" class="headerlink" title="Reference documentation"></a>Reference documentation</h3><ul><li><a href="https://github.com/kubernetes-sigs/kubebuilder" target="_blank" rel="noopener">https://github.com/kubernetes-sigs/kubebuilder</a></li><li><a href="https://book.kubebuilder.io/introduction.html" target="_blank" rel="noopener">https://book.kubebuilder.io/introduction.html</a></li><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/extend-kubernetes/operator/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FluxCD GitOps Toolkit components</title>
      <link href="/2022/04/01/cloudnative/fluxcd/"/>
      <url>/2022/04/01/cloudnative/fluxcd/</url>
      
        <content type="html"><![CDATA[<p>Flux is a tool for keeping Kubernetes clusters in sync with sources of configuration (like Git repositories), and automating updates to configuration when there is new code to deploy.</p><a id="more"></a><br><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><hr><h4 id="Install-CLI"><a href="#Install-CLI" class="headerlink" title="Install CLI"></a>Install CLI</h4><p><a href="https://fluxcd.io/docs/installation/#install-the-flux-cli" target="_blank" rel="noopener">FluxCLI安装文档</a></p><h4 id="Check-your-Kubernetes-cluster"><a href="#Check-your-Kubernetes-cluster" class="headerlink" title="Check your Kubernetes cluster"></a>Check your Kubernetes cluster</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flux check --pre</span><br></pre></td></tr></table></figure><h4 id="Dev-install"><a href="#Dev-install" class="headerlink" title="Dev install"></a>Dev install</h4><p>For testing purposes you can install Flux without storing its manifests in a Git repository:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flux install</span><br></pre></td></tr></table></figure><p>Or using kubectl:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/fluxcd/flux2/releases/latest/download/install.yaml</span><br></pre></td></tr></table></figure><br><h3 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h3><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── apps                         <span class="comment"># 应用相关信息</span></span><br><span class="line">│   └── exmaple</span><br><span class="line">├── clusters                     <span class="comment"># 集群相关配置</span></span><br><span class="line">│   ├── gitrepo.yaml             <span class="comment"># gitrepository    (CR)</span></span><br><span class="line">│   ├── terraform.yaml           <span class="comment"># terraform        (CR)</span></span><br><span class="line">│   ├── helm.yaml                <span class="comment"># helmrelease      (CR)</span></span><br><span class="line">│   └── notification.yaml        <span class="comment"># alert &amp; provider (CR)</span></span><br><span class="line">└── infrastructure               <span class="comment"># iac 相关配置（主要是 terraform hcl 配置）              </span></span><br><span class="line">    ├── main.tf</span><br><span class="line">    ├── provider.tf</span><br><span class="line">    └── variable.tf</span><br></pre></td></tr></table></figure><h4 id="Source-Controller"><a href="#Source-Controller" class="headerlink" title="Source Controller"></a>Source Controller</h4><p>The main role of the source management component is to provide a common interface for artifacts acquisition. The source API defines a set of Kubernetes objects that cluster admins and various automated operators can interact with to offload the Git and Helm repositories operations to a dedicated controller.<br><img src="https://fluxcd.io/img/source-controller.png" alt="enter image description here"></p><p><code>gitrepo.yaml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">source.toolkit.fluxcd.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">GitRepository</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitrepo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">secretRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https-credentials</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/blazehu/gitops_example.git</span></span><br><span class="line">  <span class="attr">ref:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">https-credentials</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>secret 主要是做 git 仓库的认证</li><li>interval 是拉取 git 提交的间隔，每隔一分钟会查看 git 仓库是否会有新的提交</li></ul></blockquote><h4 id="TF-Controller"><a href="#TF-Controller" class="headerlink" title="TF Controller"></a>TF Controller</h4><p>TF-controller is an experimental controller for <a href="https://fluxcd.io/" target="_blank" rel="noopener">Flux</a> to reconcile Terraform resources in the GitOps way. With the power of Flux together with Terraform, TF-controller allows you to GitOps-ify infrastructure, and application resources, in the Kubernetes and Terraform universe, at your own pace.</p><p><code>tf config</code></p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">infrastructure</span><br><span class="line">├── main.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">└── <span class="keyword">variable</span>.tf</span><br></pre></td></tr></table></figure><p><code>provider.tf</code></p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    tencentcloud = &#123;</span><br><span class="line">      <span class="keyword">source</span>  = <span class="string">"tencentcloudstack/tencentcloud"</span></span><br><span class="line">      version = <span class="string">"1.60.5"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">"tencentcloud"</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.tf</code></p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">resource <span class="string">"tencentcloud_clb_instance"</span> <span class="string">"example"</span> &#123;</span><br><span class="line">  target_region_info_region    = var.region</span><br><span class="line">  target_region_info_vpc_id    = var.vpc</span><br><span class="line">  vpc_id                       = var.vpc</span><br><span class="line">  clb_name                     = var.clb_name</span><br><span class="line">  network_type                 = <span class="string">"OPEN"</span></span><br><span class="line">  project_id                   = <span class="number">0</span></span><br><span class="line">  security_groups              = [tencentcloud_security_group.sg1.id]</span><br><span class="line">  internet_bandwidth_max_out   = <span class="string">"10"</span></span><br><span class="line">  internet_charge_type         = <span class="string">"TRAFFIC_POSTPAID_BY_HOUR"</span></span><br><span class="line">  load_balancer_pass_to_target = <span class="string">"true"</span></span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    ignore_changes = [</span><br><span class="line">      tags,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"tencentcloud_security_group"</span> <span class="string">"sg1"</span> &#123;</span><br><span class="line">  description = <span class="string">"默认安全组"</span></span><br><span class="line">  name        = <span class="string">"example-sg1"</span></span><br><span class="line">  project_id  = <span class="string">"0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"tencentcloud_security_group_lite_rule"</span> <span class="string">"sglr1"</span> &#123;</span><br><span class="line">  egress            = [<span class="string">"ACCEPT#0.0.0.0/0#ALL#ALL"</span>]</span><br><span class="line">  ingress           = [<span class="string">"ACCEPT#0.0.0.0/0#80,443#TCP"</span>, <span class="string">"DROP#0.0.0.0/0#ALL#ALL"</span>]</span><br><span class="line">  security_group_id = tencentcloud_security_group.sg1.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">"clb_vip"</span> &#123;</span><br><span class="line">  value = tencentcloud_clb_instance.example.clb_vips[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>terraform.yaml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">infra.contrib.fluxcd.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Terraform</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tf-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">approvePlan:</span> <span class="string">"auto"</span></span><br><span class="line">  <span class="attr">destroyResourcesOnDeletion:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./infrastructure</span></span><br><span class="line">  <span class="attr">sourceRef:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">GitRepository</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gitrepo</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line">  <span class="attr">varsFrom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tf-secret</span></span><br><span class="line">  <span class="attr">writeOutputsToSecret:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tf-output</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tf-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">secret_id:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>writeOutputsToSecret 输出相关信息至 secret 便于其他资源引用</li><li>varsFrom 敏感信息通过该方式在 terraform 中引用</li></ul></blockquote><h4 id="Helm-Controller"><a href="#Helm-Controller" class="headerlink" title="Helm Controller"></a>Helm Controller</h4><p>The Helm Controller is a Kubernetes operator, allowing one to declaratively manage Helm chart releases with Kubernetes manifests.<br><img src="https://fluxcd.io/img/helm-controller.png" alt="enter image description here"></p><p><code>helm.yaml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">helm.toolkit.fluxcd.io/v2beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HelmRelease</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">targetNamespace:</span> <span class="string">blazehu</span></span><br><span class="line">  <span class="attr">releaseName:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">chart:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">chart:</span> <span class="string">apps/exmaple</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">"&gt;=0.0.1"</span></span><br><span class="line">      <span class="attr">valuesFile:</span> <span class="string">./apps/exmaple/values.yaml</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">sourceRef:</span></span><br><span class="line">        <span class="attr">kind:</span> <span class="string">GitRepository</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitrepo</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line">  <span class="attr">upgrade:</span></span><br><span class="line">    <span class="attr">remediation:</span></span><br><span class="line">      <span class="attr">remediateLastFailure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">valuesFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">tf-output</span></span><br><span class="line">      <span class="attr">valuesKey:</span> <span class="string">clb_vip</span></span><br><span class="line">      <span class="attr">targetPath:</span> <span class="string">clb.serviceVIP</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>version: a SemVer range (i.e. &gt;=4.0.0 &lt;5.0.0) to automatically upgrade your releases when a new chart version is available in the release’s referenced HelmRepository.</li><li>charts: The name or path the Helm chart is available at in the SourceRef.</li><li>valuesFile: Alternative list of values files to use as the chart values.</li><li>releaseName: Defaults to a composition of ‘[TargetNamespace-]Name’.</li><li>targetNamespace: TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.</li></ul></blockquote><h4 id="Notification-Controller"><a href="#Notification-Controller" class="headerlink" title="Notification Controller"></a>Notification Controller</h4><p>The Notification Controller is a Kubernetes operator, specialized in handling inbound and outbound events.<br><img src="https://fluxcd.io/img/notification-controller.png" alt="enter image description here"></p><p><code>notification.yaml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">notification.toolkit.fluxcd.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Alert</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-alert</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">providerRef:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">generic</span> </span><br><span class="line">  <span class="attr">eventSeverity:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">eventSources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">GitRepository</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">gitrepo</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">HelmRelease</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">blazehu</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">notification.toolkit.fluxcd.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Provider</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">generic</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">flux-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">generic</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK</span></span><br></pre></td></tr></table></figure><br><h3 id="Reference-documentation"><a href="#Reference-documentation" class="headerlink" title="Reference documentation"></a>Reference documentation</h3><ul><li><a href="https://fluxcd.io/docs/components/" target="_blank" rel="noopener">https://fluxcd.io/docs/components/</a></li><li><a href="https://weaveworks.github.io/tf-controller/" target="_blank" rel="noopener">https://weaveworks.github.io/tf-controller/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitops </tag>
            
            <tag> fluxcd </tag>
            
            <tag> iac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terraform Controller Practices</title>
      <link href="/2022/03/11/cloudnative/terraform-controller/"/>
      <url>/2022/03/11/cloudnative/terraform-controller/</url>
      
        <content type="html"><![CDATA[<p>Terraform Controller is a Kubernetes Controller for Terraform.</p><a id="more"></a><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><hr><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform-controller_t1.png" alt="terraform-controller_t1"></p><h3 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h3><hr><p>Github: <a href="https://github.com/oam-dev/terraform-controller" target="_blank" rel="noopener">https://github.com/oam-dev/terraform-controller</a></p><h3 id="Standalone-Terraform-Controller"><a href="#Standalone-Terraform-Controller" class="headerlink" title="Standalone Terraform Controller"></a>Standalone Terraform Controller</h3><hr><h4 id="Install-Kubernetes-Terraform-Controller-Chart"><a href="#Install-Kubernetes-Terraform-Controller-Chart" class="headerlink" title="Install Kubernetes Terraform Controller Chart"></a>Install Kubernetes Terraform Controller Chart</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm repo add kubevela-addons https://charts.kubevela.net/addons</span><br><span class="line"><span class="string">"kubevela-addons"</span> has been added to your repositories</span><br><span class="line"></span><br><span class="line">$ helm upgrade --install terraform-controller -n terraform --create-namespace kubevela-addons/terraform-controller</span><br><span class="line">Release <span class="string">"terraform-controller"</span> does not exist. Installing it now.</span><br><span class="line">NAME: terraform-controller</span><br><span class="line">LAST DEPLOYED: Fri Mar 11 15:08:57 2022</span><br><span class="line">NAMESPACE: terraform</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubectl get all -n terraform</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/terraform-controller-557d4b8869-nv28x   1/1     Running   0          22s</span><br><span class="line"></span><br><span class="line">NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/terraform-controller   1/1     1            1           22s</span><br><span class="line"></span><br><span class="line">NAME                                              DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/terraform-controller-557d4b8869   1         1         1       22s</span><br><span class="line">[blazehu@MacBook ~]$ kubectl get crd | grep terraform</span><br><span class="line">configurations.terraform.core.oam.dev            2022-03-11T07:08:27Z</span><br><span class="line">providers.terraform.core.oam.dev                 2022-03-11T07:08:27Z</span><br></pre></td></tr></table></figure><h3 id="Authenticate-Cloud-Provider-and-Create-a-Cloud-Resource"><a href="#Authenticate-Cloud-Provider-and-Create-a-Cloud-Resource" class="headerlink" title="Authenticate Cloud Provider and Create a Cloud Resource"></a>Authenticate Cloud Provider and Create a Cloud Resource</h3><hr><p>下面验证腾讯云的 cos bucket 创建和销毁，准备以下文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── provider.yaml                      <span class="comment"># provider 描述文件</span></span><br><span class="line">├── configuration_hcl_example.yaml     <span class="comment"># cos bucket 描述文件</span></span><br><span class="line">└── tencent-credentials.conf           <span class="comment"># 腾讯云相关 secret 信息（secretid &amp; secretkey）</span></span><br></pre></td></tr></table></figure><p>provider.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">terraform.core.oam.dev/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Provider</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tencent</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">tencent</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-nanjing</span></span><br><span class="line">  <span class="attr">credentials:</span></span><br><span class="line">    <span class="attr">source:</span> <span class="string">Secret</span></span><br><span class="line">    <span class="attr">secretRef:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">vela-system</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">tencent-account-creds</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">credentials</span></span><br></pre></td></tr></table></figure><p>configuration_hcl_example.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">terraform.core.oam.dev/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Configuration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tencent-cos-hcl</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hcl:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">terraform</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">required_providers</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">tencentcloud</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">          <span class="string">source</span>  <span class="string">=</span> <span class="string">"tencentcloudstack/tencentcloud"</span></span><br><span class="line">          <span class="string">version</span> <span class="string">=</span> <span class="string">"1.60.5"</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">resource</span> <span class="string">"tencentcloud_cos_bucket"</span> <span class="string">"mycos"</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">bucket</span> <span class="string">=</span> <span class="string">"blazehu-test-125834470x"</span></span><br><span class="line">      <span class="string">acl</span>    <span class="string">=</span> <span class="string">"private"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="attr">providerRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tencent</span></span><br></pre></td></tr></table></figure><p>tencent-credentials.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secretID: </span><br><span class="line">secretKey:</span><br></pre></td></tr></table></figure><h4 id="create-secret"><a href="#create-secret" class="headerlink" title="create secret"></a>create secret</h4><p>通过 tencent-credentials.conf 文件创建 secret ：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic tencent-account-creds -n vela-system --from-file=credentials=tencent-credentials.conf</span><br></pre></td></tr></table></figure><h4 id="create-provider"><a href="#create-provider" class="headerlink" title="create provider"></a>create provider</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubectl apply -f provider.yaml</span><br><span class="line">provider.terraform.core.oam.dev/tencent created</span><br><span class="line">[blazehu@MacBook ~]$ kubectl get provider.terraform.core.oam.dev</span><br><span class="line">NAME      STATE   AGE</span><br><span class="line">tencent   ready   3m41s</span><br></pre></td></tr></table></figure><h4 id="create-configuration"><a href="#create-configuration" class="headerlink" title="create configuration"></a>create configuration</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ kubectl apply -f configuration_hcl_example.yaml</span><br><span class="line">configuration.terraform.core.oam.dev/tencent-cos-hcl created</span><br><span class="line">[blazehu@MacBook ~]$ kubectl get configuration.terraform.core.oam.dev</span><br><span class="line">NAME              STATE                     AGE</span><br><span class="line">tencent-cos-hcl   ProvisioningAndChecking   13s</span><br></pre></td></tr></table></figure><p>terraform-controller 会拉起 Job 跑 terraform 命令来创建，源码：<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform-controller_scr1.png" alt="terraform-controller_scr1"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ k get job</span><br><span class="line">NAME                    COMPLETIONS   DURATION   AGE</span><br><span class="line">tencent-cos-hcl-apply   0/1           3s         3s</span><br><span class="line">[blazehu@MacBook ~]$ k get po</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">tencent-cos-hcl-apply-fhpsg   1/1     Running   0          7s</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[blazehu@MacBook ~]$ k get configuration.terraform.core.oam.dev</span><br><span class="line">NAME              STATE       AGE</span><br><span class="line">tencent-cos-hcl   Available   4m16s</span><br></pre></td></tr></table></figure><p>腾讯云控制台可以观测到 cos bucket 成功创建。</p><blockquote><p>tip: 执行成功后 state 相关内容写入了 secret 里。</p></blockquote><h4 id="delete-configuration"><a href="#delete-configuration" class="headerlink" title="delete configuration"></a>delete configuration</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ k delete -f configuration_hcl_example.yaml</span><br><span class="line">configuration.terraform.core.oam.dev <span class="string">"tencent-cos-hcl"</span> deleted</span><br><span class="line"></span><br><span class="line">[blazehu@MacBook ~]$ k get job</span><br><span class="line">NAME                      COMPLETIONS   DURATION   AGE</span><br><span class="line">tencent-cos-hcl-apply     1/1           2m55s      5m11s</span><br><span class="line">tencent-cos-hcl-destroy   0/1           7s         7s</span><br><span class="line">[blazehu@MacBook ~]$ k get pod</span><br><span class="line">NAME                            READY   STATUS      RESTARTS   AGE</span><br><span class="line">tencent-cos-hcl-apply-qnfnx     0/1     Completed   3          3m30s</span><br><span class="line">tencent-cos-hcl-destroy-vt5b2   0/1     Completed   0          10s</span><br></pre></td></tr></table></figure><p>腾讯云控制台可以观测到 cos bucket 已经被回收处理。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>因为每一个新的操作都是启动一个新的 Pod 去执行 <code>terraform init...</code>，由于网络问题， Initializing provider plugins 经常失败，于是这里使用 cache ，构建一个新的 job 镜像然后更新 release。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> oamdev/docker-terraform:<span class="number">1.1</span>.<span class="number">2</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"blazehu"</span></span></span><br><span class="line"><span class="keyword">ENV</span> TF_PLUGIN_CACHE_DIR /.terraform.d/plugin-cache</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> registry.terraform.io /.terraform.d/plugin-cache/registry.terraform.io</span></span><br></pre></td></tr></table></figure><p>upgrade release</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ helm upgrade --install terraform-controller -n terraform --create-namespace kubevela-addons/terraform-controller --<span class="built_in">set</span> terraformImage=docker-terraform:2.0</span><br></pre></td></tr></table></figure><blockquote><p>tips: 也可以是用 sidecar 注入 pod 来使用 cache （<a href="https://openkruise.io/zh/docs/user-manuals/sidecarset/" target="_blank" rel="noopener">openkruise</a>）</p></blockquote><h3 id="Reference-documentation"><a href="#Reference-documentation" class="headerlink" title="Reference documentation"></a>Reference documentation</h3><ul><li><a href="https://developer.aliyun.com/article/724349" target="_blank" rel="noopener">https://developer.aliyun.com/article/724349</a></li><li><a href="https://github.com/oam-dev/terraform-controller/blob/master/getting-started.md" target="_blank" rel="noopener">https://github.com/oam-dev/terraform-controller/blob/master/getting-started.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> iac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terraform Plugin Development</title>
      <link href="/2021/12/29/cloudnative/terraform-plugins/"/>
      <url>/2021/12/29/cloudnative/terraform-plugins/</url>
      
        <content type="html"><![CDATA[<p>Terraform is an open source resource orchestration tool based on Golang, which allows users to manage and configure any infrastructure, the infrastructure of public and private cloud services, and external services.</p><a id="more"></a><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Terraform is logically split into two main parts:</p><ul><li><strong>Terraform Core</strong>: This is the Terraform binary that communicates with plugins to manage infrastructure resources. It provides a common interface that allows you to leverage many different cloud providers, databases, services, and in-house solutions.</li><li><strong>Terraform Plugins</strong>: These are executable binaries written in Go that communicate with Terraform Core over an RPC interface. Each plugin exposes an implementation for a specific service, such as the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest" target="_blank" rel="noopener">AWS provider</a> or the <a href="https://registry.terraform.io/providers/hashicorp/cloudinit/latest/docs" target="_blank" rel="noopener">cloud-init provider</a>. Terraform currently supports one type of Plugin called <a href="https://www.terraform.io/language/providers" target="_blank" rel="noopener">providers</a>.<br></li></ul><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform-plugin-overview.png" alt="terraform-plugin-overview"></p><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><p>Clone these template repositories on GitHub: <a href="https://github.com/hashicorp/terraform-provider-scaffolding" target="_blank" rel="noopener">terraform-provider-scaffolding (SDKv2)</a></p><p>Steps:</p><ol><li>clone the <a href="https://github.com/hashicorp/terraform-provider-scaffolding" target="_blank" rel="noopener">terraform-provider-scaffolding (SDKv2)</a>.</li><li>explore development environment, modify <code>GNUmakefile</code>.</li><li>define the provider、data_source、resource schema.</li><li>write code for cos bucket CRUD (<code>internal/provider</code> dir) and acceptance tests.</li><li>test the provider.</li><li>generate the provider documentation.</li></ol><h4 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h4><ul><li>Terraform &gt;= 0.13.x</li><li>Go &gt;= 1.15</li></ul><h4 id="Building-The-Provider"><a href="#Building-The-Provider" class="headerlink" title="Building The Provider"></a>Building The Provider</h4><p>To compile the provider, run <code>go install</code>. This will build the provider and put the provider binary in the <code>$GOPATH/bin</code> directory.</p><h4 id="Generate-the-Provider-Documentation"><a href="#Generate-the-Provider-Documentation" class="headerlink" title="Generate the Provider Documentation"></a>Generate the Provider Documentation</h4><p>To generate or update documentation, run <code>go generate</code>.</p><h4 id="Acceptance-tests"><a href="#Acceptance-tests" class="headerlink" title="Acceptance tests"></a>Acceptance tests</h4><p>In order to run the full suite of Acceptance tests, run <code>make testacc</code>.</p><blockquote><p>Note: Acceptance tests create real resources, and often cost money to run.</p></blockquote><h4 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h4><p>Take <code>cos bucket</code> as an example, modify the directory structure as follows.</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">terraform-provider-cos</span></span><br><span class="line">├── <span class="selector-tag">README</span><span class="selector-class">.md</span>     </span><br><span class="line">├── <span class="selector-tag">GNUmakefile</span></span><br><span class="line">├── <span class="selector-tag">CHANGELOG</span><span class="selector-class">.md</span>                                变更日志</span><br><span class="line">├── <span class="selector-tag">LICENSE</span>                                     授权信息   </span><br><span class="line">├── <span class="selector-tag">main</span><span class="selector-class">.go</span>                                     程序入口文件</span><br><span class="line">├── <span class="selector-tag">docs</span>                                        文档目录</span><br><span class="line">├── <span class="selector-tag">examples</span>                                    示例配置文件目录</span><br><span class="line">├── <span class="selector-tag">internal</span>                                    <span class="selector-tag">Provider</span>核心目录</span><br><span class="line">│   └── <span class="selector-tag">provider</span></span><br><span class="line">│       ├── <span class="selector-tag">data_source_cos_bucket</span><span class="selector-class">.go</span>           <span class="selector-tag">bucket</span>查询</span><br><span class="line">│       ├── <span class="selector-tag">data_source_cos_bucket_test</span><span class="selector-class">.go</span></span><br><span class="line">│       ├── <span class="selector-tag">provider</span><span class="selector-class">.go</span>                         <span class="selector-tag">Provider</span>核心文件</span><br><span class="line">│       ├── <span class="selector-tag">provider_test</span><span class="selector-class">.go</span> </span><br><span class="line">│       ├── <span class="selector-tag">resource_cos_bucket</span><span class="selector-class">.go</span>              <span class="selector-tag">bucket</span>资源管理</span><br><span class="line">│       ├── <span class="selector-tag">resource_cos_bucket_test</span><span class="selector-class">.go</span></span><br><span class="line">│       └── <span class="selector-tag">service_cos_bucket</span><span class="selector-class">.go</span>               封装的<span class="selector-tag">bucket</span>相关<span class="selector-tag">Service</span></span><br><span class="line">├── <span class="selector-tag">go</span><span class="selector-class">.mod</span></span><br><span class="line">├── <span class="selector-tag">go</span><span class="selector-class">.sum</span></span><br><span class="line">├── <span class="selector-tag">terraform-registry-manifest</span><span class="selector-class">.json</span></span><br><span class="line">└── <span class="selector-tag">tools</span></span><br><span class="line">    └── <span class="selector-tag">tools</span><span class="selector-class">.go</span></span><br></pre></td></tr></table></figure><p>The structure is mainly divided into five parts:</p><ul><li><code>main.go</code>, plugin entry.</li><li><code>provider.go</code>, attributes used to describe plugins, such as: configured key, supported resource list, callback - configuration.</li><li><code>data_source_*.go</code>, read calls, mainly query interfaces.</li><li><code>resource_*.go</code>, write calls, including resource addition, deletion, modification and query interfaces.</li><li><code>service_*.go</code>, public methods divided by resource categories.</li></ul><h4 id="Explore-your-development-environment"><a href="#Explore-your-development-environment" class="headerlink" title="Explore your development environment"></a>Explore your development environment</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TEST?=$<span class="variable">$(go list ./... | grep -v 'vendor')</span></span><br><span class="line">HOSTNAME=blazehu.com</span><br><span class="line">NAMESPACE=edu</span><br><span class="line">NAME=cos</span><br><span class="line">BINARY=terraform-provider-$&#123;NAME&#125;_v$&#123;VERSION&#125;</span><br><span class="line">OS_ARCH=darwin_amd64</span><br><span class="line">VERSION=0.1</span><br><span class="line"><span class="comment">#BINARY=terraform-provider-$&#123;NAME&#125;_v$&#123;VERSION&#125;.exe</span></span><br><span class="line"><span class="comment">#OS_ARCH=windows_amd64</span></span><br><span class="line"><span class="section">default: testacc</span></span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">go build -o $&#123;BINARY&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">test:</span></span><br><span class="line">go test -i <span class="variable">$(TEST)</span> || exit 1</span><br><span class="line">echo <span class="variable">$(TEST)</span> | xargs -t -n4 go test <span class="variable">$(TESTARGS)</span> -timeout=30s -parallel=4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run acceptance tests</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: testacc</span></span><br><span class="line"><span class="section">testacc:</span></span><br><span class="line">TF_ACC=1 go test ./... -v <span class="variable">$(TESTARGS)</span> -timeout 120m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: install</span></span><br><span class="line"><span class="section">install: build # Build manager binary.</span></span><br><span class="line">mkdir -p ~/.terraform.d/plugins/$&#123;HOSTNAME&#125;/$&#123;NAMESPACE&#125;/$&#123;NAME&#125;/$&#123;VERSION&#125;/$&#123;OS_ARCH&#125;</span><br><span class="line">mv $&#123;BINARY&#125; ~/.terraform.d/plugins/$&#123;HOSTNAME&#125;/$&#123;NAMESPACE&#125;/$&#123;NAME&#125;/$&#123;VERSION&#125;/$&#123;OS_ARCH&#125;</span><br></pre></td></tr></table></figure><h4 id="Define-provider-schema"><a href="#Define-provider-schema" class="headerlink" title="Define provider schema"></a>Define provider schema</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(version <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span> *<span class="title">schema</span>.<span class="title">Provider</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">schema</span>.<span class="title">Provider</span></span> &#123;</span><br><span class="line">p := &amp;schema.Provider&#123;</span><br><span class="line">DataSourcesMap: <span class="keyword">map</span>[<span class="keyword">string</span>]*schema.Resource&#123;</span><br><span class="line"><span class="string">"cos_bucket_data_source"</span>: dataSourceCosBucket(),</span><br><span class="line">&#125;,</span><br><span class="line">ResourcesMap: <span class="keyword">map</span>[<span class="keyword">string</span>]*schema.Resource&#123;</span><br><span class="line"><span class="string">"cos_bucket_resource"</span>: resourceCosBucket(),</span><br><span class="line">&#125;,</span><br><span class="line">Schema: <span class="keyword">map</span>[<span class="keyword">string</span>]*schema.Schema&#123;</span><br><span class="line"><span class="string">"secret_id"</span>: &amp;schema.Schema&#123;</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Required:    <span class="literal">true</span>,</span><br><span class="line">Sensitive:   <span class="literal">true</span>,</span><br><span class="line">DefaultFunc: schema.EnvDefaultFunc(<span class="string">"SECRET_ID"</span>, <span class="literal">nil</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"secret_key"</span>: &amp;schema.Schema&#123;</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Required:    <span class="literal">true</span>,</span><br><span class="line">Sensitive:   <span class="literal">true</span>,</span><br><span class="line">DefaultFunc: schema.EnvDefaultFunc(<span class="string">"SECRET_KEY"</span>, <span class="literal">nil</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"region"</span>: &amp;schema.Schema&#123;</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Required:    <span class="literal">true</span>,</span><br><span class="line">Sensitive:   <span class="literal">true</span>,</span><br><span class="line">DefaultFunc: schema.EnvDefaultFunc(<span class="string">"REGION"</span>, <span class="literal">nil</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ConfigureContextFunc: providerConfigure,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">providerConfigure</span><span class="params">(ctx context.Context, d *schema.ResourceData)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, diag.Diagnostics)</span></span> &#123;</span><br><span class="line">region := d.Get(<span class="string">"region"</span>).(<span class="keyword">string</span>)</span><br><span class="line">secretId := d.Get(<span class="string">"secret_id"</span>).(<span class="keyword">string</span>)</span><br><span class="line">secretKey := d.Get(<span class="string">"secret_key"</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Warning or errors can be collected in a slice type</span></span><br><span class="line"><span class="keyword">var</span> diags diag.Diagnostics</span><br><span class="line"></span><br><span class="line">c := &amp;CosClient&#123;</span><br><span class="line">Region:    region,</span><br><span class="line">SecretId:  secretId,</span><br><span class="line">SecretKey: secretKey,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c, diags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Define-bucket-data-resource-schema"><a href="#Define-bucket-data-resource-schema" class="headerlink" title="Define bucket data resource schema"></a>Define bucket data resource schema</h4><p><code>resource_cos_bucket.go</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resourceCosBucket</span><span class="params">()</span> *<span class="title">schema</span>.<span class="title">Resource</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;schema.Resource&#123;</span><br><span class="line"><span class="comment">// This description is used by the documentation generator and the language server.</span></span><br><span class="line">Description: <span class="string">"Sample resource in the Terraform provider cos."</span>,</span><br><span class="line"></span><br><span class="line">CreateContext: resourceCosBucketCreate,</span><br><span class="line">ReadContext:   resourceCosBucketRead,</span><br><span class="line">UpdateContext: resourceCosBucketUpdate,</span><br><span class="line">DeleteContext: resourceCosBucketDelete,</span><br><span class="line"></span><br><span class="line">Schema: <span class="keyword">map</span>[<span class="keyword">string</span>]*schema.Schema&#123;</span><br><span class="line"><span class="string">"name"</span>: &#123;</span><br><span class="line"><span class="comment">// This description is used by the documentation generator and the language server.</span></span><br><span class="line">Description: <span class="string">"cos bucket name."</span>,</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Required:    <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"acl"</span>: &#123;</span><br><span class="line">Description: <span class="string">"cos bucket acl."</span>,</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Default:     <span class="string">"private"</span>,</span><br><span class="line">Optional:    <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"update_at"</span>: &#123;</span><br><span class="line">Description: <span class="string">"cos bucket create time"</span>,</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Computed:    <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>data_source_cos_bucket.go</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataSourceCosBucket</span><span class="params">()</span> *<span class="title">schema</span>.<span class="title">Resource</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;schema.Resource&#123;</span><br><span class="line"><span class="comment">// This description is used by the documentation generator and the language server.</span></span><br><span class="line">Description: <span class="string">"Sample data source in the Terraform provider cos."</span>,</span><br><span class="line"></span><br><span class="line">ReadContext: dataSourceCosBucketRead,</span><br><span class="line"></span><br><span class="line">Schema: <span class="keyword">map</span>[<span class="keyword">string</span>]*schema.Schema&#123;</span><br><span class="line"><span class="string">"name"</span>: &#123;</span><br><span class="line"><span class="comment">// This description is used by the documentation generator and the language server.</span></span><br><span class="line">Description: <span class="string">"cos bucket name."</span>,</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Required:    <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"owner"</span>: &#123;</span><br><span class="line"><span class="comment">// This description is used by the documentation generator and the language server.</span></span><br><span class="line">Description: <span class="string">"cos bucket owner."</span>,</span><br><span class="line">Type:        schema.TypeString,</span><br><span class="line">Computed:    <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-Complex-Read"><a href="#Implement-Complex-Read" class="headerlink" title="Implement Complex Read"></a>Implement Complex Read</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataSourceCosBucketRead</span><span class="params">(ctx context.Context, d *schema.ResourceData, meta <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">diag</span>.<span class="title">Diagnostics</span></span> &#123;</span><br><span class="line"><span class="comment">// use the meta value to retrieve your client from the provider configure method</span></span><br><span class="line">client := meta.(*CosClient)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diags diag.Diagnostics</span><br><span class="line"></span><br><span class="line">name := d.Get(<span class="string">"name"</span>).(<span class="keyword">string</span>)</span><br><span class="line">owner, err := client.GetACLOwner(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> diag.Errorf(fmt.Sprintf(<span class="string">"get cos bucket owner failed. msg: %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">d.SetId(name)</span><br><span class="line"><span class="keyword">if</span> err = d.Set(<span class="string">"owner"</span>, owner); err != <span class="literal">nil</span> &#123;</span><br><span class="line">tflog.Error(ctx, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> diags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-Create"><a href="#Implement-Create" class="headerlink" title="Implement Create"></a>Implement Create</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resourceCosBucketCreate</span><span class="params">(ctx context.Context, d *schema.ResourceData, meta <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">diag</span>.<span class="title">Diagnostics</span></span> &#123;</span><br><span class="line"><span class="comment">// use the meta value to retrieve your client from the provider configure method</span></span><br><span class="line">client := meta.(*CosClient)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diags diag.Diagnostics</span><br><span class="line"></span><br><span class="line">name := d.Get(<span class="string">"name"</span>).(<span class="keyword">string</span>)</span><br><span class="line">acl := d.Get(<span class="string">"acl"</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := client.Put(name, acl); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> diag.Errorf(fmt.Sprintf(<span class="string">"created cos bucket failed. msg: %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">d.SetId(name)</span><br><span class="line"><span class="keyword">if</span> err := d.Set(<span class="string">"update_at"</span>, time.Now().Format(time.RFC3339)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">tflog.Error(ctx, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tflog.Info(ctx, fmt.Sprintf(<span class="string">"created a cos bucket, name: %s, region: %s"</span>, name, client.Region))</span><br><span class="line"><span class="comment">// write logs using the tflog package</span></span><br><span class="line"><span class="comment">// see https://pkg.go.dev/github.com/hashicorp/terraform-plugin-log/tflog</span></span><br><span class="line"><span class="comment">// for more information</span></span><br><span class="line"><span class="keyword">return</span> diags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-Update"><a href="#Implement-Update" class="headerlink" title="Implement Update"></a>Implement Update</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resourceCosBucketUpdate</span><span class="params">(ctx context.Context, d *schema.ResourceData, meta <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">diag</span>.<span class="title">Diagnostics</span></span> &#123;</span><br><span class="line"><span class="comment">// use the meta value to retrieve your client from the provider configure method</span></span><br><span class="line">client := meta.(*CosClient)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diags diag.Diagnostics</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d.HasChange(<span class="string">"acl"</span>) &#123;</span><br><span class="line">name := d.Get(<span class="string">"name"</span>).(<span class="keyword">string</span>)</span><br><span class="line">acl := d.Get(<span class="string">"acl"</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := client.PutACL(name, acl); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> diag.Errorf(fmt.Sprintf(<span class="string">"update cos bucket acl failed. msg: %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := d.Set(<span class="string">"update_at"</span>, time.Now().Format(time.RFC3339)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">tflog.Error(ctx, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> diags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-Delete"><a href="#Implement-Delete" class="headerlink" title="Implement Delete"></a>Implement Delete</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resourceCosBucketDelete</span><span class="params">(ctx context.Context, d *schema.ResourceData, meta <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">diag</span>.<span class="title">Diagnostics</span></span> &#123;</span><br><span class="line"><span class="comment">// use the meta value to retrieve your client from the provider configure method</span></span><br><span class="line">client := meta.(*CosClient)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diags diag.Diagnostics</span><br><span class="line"></span><br><span class="line">name := d.Get(<span class="string">"name"</span>).(<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">if</span> err := client.Delete(name); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> diag.Errorf(fmt.Sprintf(<span class="string">"delete cos bucket failed. msg: %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">d.SetId(<span class="string">""</span>)</span><br><span class="line">tflog.Info(ctx, fmt.Sprintf(<span class="string">"delete a cos bucket, name: %s"</span>, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> diags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-Cos-Bucket-Service"><a href="#Implement-Cos-Bucket-Service" class="headerlink" title="Implement Cos Bucket Service"></a>Implement Cos Bucket Service</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/tencentyun/cos-go-sdk-v5"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CosClient <span class="keyword">struct</span> &#123;</span><br><span class="line">SecretId  <span class="keyword">string</span></span><br><span class="line">SecretKey <span class="keyword">string</span></span><br><span class="line">Region    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosClient)</span> <span class="title">client</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">cos</span>.<span class="title">Client</span></span> &#123;</span><br><span class="line">url, _ := url.Parse(fmt.Sprintf(<span class="string">"https://%s.cos.%s.myqcloud.com"</span>, name, c.Region))</span><br><span class="line">b := &amp;cos.BaseURL&#123;BucketURL: url&#125;</span><br><span class="line"><span class="keyword">return</span> cos.NewClient(b, &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;cos.AuthorizationTransport&#123;</span><br><span class="line">SecretID:  c.SecretId,</span><br><span class="line">SecretKey: c.SecretKey,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosClient)</span> <span class="title">Put</span><span class="params">(name, acl <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">opt := &amp;cos.BucketPutOptions&#123;</span><br><span class="line">XCosACL: acl,</span><br><span class="line">&#125;</span><br><span class="line">_, err := c.client(name).Bucket.Put(context.Background(), opt)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosClient)</span> <span class="title">GetACLOwner</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">acl, _, err := c.client(name).Bucket.GetACL(context.Background())</span><br><span class="line"><span class="keyword">return</span> acl.Owner.DisplayName, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosClient)</span> <span class="title">PutACL</span><span class="params">(name, acl <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">opt := &amp;cos.BucketPutACLOptions&#123;</span><br><span class="line">Header: &amp;cos.ACLHeaderOptions&#123;</span><br><span class="line"><span class="comment">//private，public-read，public-read-write</span></span><br><span class="line">XCosACL: acl,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_, err := c.client(name).Bucket.PutACL(context.Background(), opt)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CosClient)</span> <span class="title">Delete</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">_, err := c.client(name).Bucket.Delete(context.Background())</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Test-the-provider"><a href="#Test-the-provider" class="headerlink" title="Test the provider"></a>Test the provider</h4><ol><li><code>make install</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ make install</span><br><span class="line">go build -o terraform-provider-cos_v0.1</span><br><span class="line">mkdir -p ~/.terraform.d/plugins/blazehu.com/edu/cos/0.1/darwin_amd64</span><br><span class="line">mv terraform-provider-cos_v0.1 ~/.terraform.d/plugins/blazehu.com/edu/cos/0.1/darwin_amd64</span><br></pre></td></tr></table></figure></li><li>write <code>demo.tf</code><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    cos = &#123;</span><br><span class="line">      <span class="keyword">source</span>  = <span class="string">"blazehu.com/edu/cos"</span></span><br><span class="line">      version = <span class="string">"0.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">"cos"</span> &#123;</span><br><span class="line">  region = <span class="string">"ap-shanghai"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"cos_bucket_resource"</span> <span class="string">"demo"</span> &#123;</span><br><span class="line">  name = <span class="string">"terraform-1251762279"</span></span><br><span class="line">  acl  = <span class="string">"private"</span></span><br><span class="line"><span class="comment">  # acl = "public-read-write"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"cos_bucket_data_source"</span> <span class="string">"test"</span> &#123;</span><br><span class="line">  name = cos_bucket_resource.demo.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>run <code>terraform init</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding blazehu.com/edu/cos versions matching <span class="string">"0.1.0"</span>...</span><br><span class="line">- Installing blazehu.com/edu/cos v0.1.0...</span><br><span class="line">- Installed blazehu.com/edu/cos v0.1.0 (unauthenticated)</span><br><span class="line"></span><br><span class="line">Terraform has created a lock file .terraform.lock.hcl to record the provider</span><br><span class="line">selections it made above. Include this file <span class="keyword">in</span> your version control repository</span><br><span class="line">so that Terraform can guarantee to make the same selections by default when</span><br><span class="line">you run <span class="string">"terraform init"</span> <span class="keyword">in</span> the future.</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br></pre></td></tr></table></figure></li><li>run <code>terraform apply -auto-approve</code>, create a cos bucket<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"> &lt;= <span class="built_in">read</span> (data resources)</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># data.cos_bucket_data_source.test will be read during apply</span></span><br><span class="line">  <span class="comment"># (config refers to values not yet known)</span></span><br><span class="line"> &lt;= data <span class="string">"cos_bucket_data_source"</span> <span class="string">"test"</span>  &#123;</span><br><span class="line">      + id    = (known after apply)</span><br><span class="line">      + name  = (known after apply)</span><br><span class="line">      + owner = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cos_bucket_resource.demo will be created</span></span><br><span class="line">  + resource <span class="string">"cos_bucket_resource"</span> <span class="string">"demo"</span> &#123;</span><br><span class="line">      + acl       = <span class="string">"public-read-write"</span></span><br><span class="line">      + id        = (known after apply)</span><br><span class="line">      + name      = <span class="string">"terraform-1251762279"</span></span><br><span class="line">      + update_at = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line">cos_bucket_resource.demo: Creating...</span><br><span class="line">cos_bucket_resource.demo: Creation complete after 1s [id=terraform-1251762279]</span><br><span class="line">data.cos_bucket_data_source.test: Reading...</span><br><span class="line">data.cos_bucket_data_source.test: Read complete after 0s [id=terraform-1251762279]</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br></pre></td></tr></table></figure></li><li>change acl to <code>public-read-write</code>, run <code>terraform apply -auto-approve</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cos_bucket_resource.demo: Refreshing state... [id=terraform-1251762279]</span><br><span class="line"></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  ~ update <span class="keyword">in</span>-place</span><br><span class="line"> &lt;= <span class="built_in">read</span> (data resources)</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># data.cos_bucket_data_source.test will be read during apply</span></span><br><span class="line">  <span class="comment"># (config refers to values not yet known)</span></span><br><span class="line"> &lt;= data <span class="string">"cos_bucket_data_source"</span> <span class="string">"test"</span>  &#123;</span><br><span class="line">      ~ id    = <span class="string">"terraform-1251762279"</span> -&gt; (known after apply)</span><br><span class="line">        name  = <span class="string">"terraform-1251762279"</span></span><br><span class="line">      ~ owner = <span class="string">"qcs::cam::uin/794369159:uin/794369159"</span> -&gt; (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cos_bucket_resource.demo will be updated in-place</span></span><br><span class="line">  ~ resource <span class="string">"cos_bucket_resource"</span> <span class="string">"demo"</span> &#123;</span><br><span class="line">      ~ acl       = <span class="string">"public-read-write"</span> -&gt; <span class="string">"private"</span></span><br><span class="line">        id        = <span class="string">"terraform-1251762279"</span></span><br><span class="line">        name      = <span class="string">"terraform-1251762279"</span></span><br><span class="line">        <span class="comment"># (1 unchanged attribute hidden)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 1 to change, 0 to destroy.</span><br><span class="line">cos_bucket_resource.demo: Modifying... [id=terraform-1251762279]</span><br><span class="line">cos_bucket_resource.demo: Modifications complete after 1s [id=terraform-1251762279]</span><br><span class="line">data.cos_bucket_data_source.test: Reading... [id=terraform-1251762279]</span><br><span class="line">data.cos_bucket_data_source.test: Read complete after 0s [id=terraform-1251762279]</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 0 added, 1 changed, 0 destroyed.</span><br></pre></td></tr></table></figure></li><li>verify if no changes, run <code>terraform apply -auto-approve</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cos_bucket_resource.demo: Refreshing state... [id=terraform-1251762279]</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br><span class="line"></span><br><span class="line">Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 0 added, 0 changed, 0 destroyed.</span><br></pre></td></tr></table></figure></li><li>destroy the resources, run <code>terraform destroy -auto-approve</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cos_bucket_resource.demo: Refreshing state... [id=terraform-1251762279]</span><br><span class="line"></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  - destroy</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cos_bucket_resource.demo will be destroyed</span></span><br><span class="line">  - resource <span class="string">"cos_bucket_resource"</span> <span class="string">"demo"</span> &#123;</span><br><span class="line">      - acl       = <span class="string">"private"</span> -&gt; null</span><br><span class="line">      - id        = <span class="string">"terraform-1251762279"</span> -&gt; null</span><br><span class="line">      - name      = <span class="string">"terraform-1251762279"</span> -&gt; null</span><br><span class="line">      - update_at = <span class="string">"2022-01-29T11:28:31+08:00"</span> -&gt; null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 0 to change, 1 to destroy.</span><br><span class="line">cos_bucket_resource.demo: Destroying... [id=terraform-1251762279]</span><br><span class="line">cos_bucket_resource.demo: Destruction complete after 1s</span><br><span class="line"></span><br><span class="line">Destroy complete! Resources: 1 destroyed.</span><br></pre></td></tr></table></figure><blockquote><p>Tip: You can also retrieve detailed Terraform and provider logs by setting the environment variable TF_LOG. Please include a detailed logs with any bug reports so the author can identify and address the bug. To learn more about log levels and how to interpret a crash log, refer to the <a href="https://www.terraform.io/internals/debugging" target="_blank" rel="noopener">Debugging Terraform Documentation</a>.</p></blockquote></li></ol><h3 id="Reference-documentation"><a href="#Reference-documentation" class="headerlink" title="Reference documentation"></a>Reference documentation</h3><ul><li><a href="https://www.terraform.io/plugin" target="_blank" rel="noopener">https://www.terraform.io/plugin</a></li><li><a href="https://learn.hashicorp.com/collections/terraform/providers" target="_blank" rel="noopener">https://learn.hashicorp.com/collections/terraform/providers</a></li><li><a href="https://cloud.tencent.com/developer/article/1067230" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1067230</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terraform Best Practices</title>
      <link href="/2021/12/05/cloudnative/terraform/"/>
      <url>/2021/12/05/cloudnative/terraform/</url>
      
        <content type="html"><![CDATA[<p>Terraform是一种开源工具，用于安全高效地预览，配置和管理云基础架构和资源。</p><a id="more"></a><h3 id="一、安装-Terraform"><a href="#一、安装-Terraform" class="headerlink" title="一、安装 Terraform"></a>一、安装 Terraform</h3><h4 id="1、下载-Terraform"><a href="#1、下载-Terraform" class="headerlink" title="1、下载 Terraform"></a>1、下载 Terraform</h4><p>官方提供了最新版本的Terraform <a href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener">可用下载</a></p><p>输入下载及安装命令行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download terraform</span></span><br><span class="line">wget https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip --no-check-certificate</span><br><span class="line"> </span><br><span class="line"><span class="comment"># unzip terraform</span></span><br><span class="line">unzip terraform_1.0.10_linux_amd64.zip</span><br></pre></td></tr></table></figure><h4 id="2、-配置环境变量"><a href="#2、-配置环境变量" class="headerlink" title="2、 配置环境变量"></a>2、 配置环境变量</h4><p>添加Terraform的环境变量，或者直接放在 <code>/usr/local/bin/</code> 目录下</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_version.png" alt="terraform_version"></p><h3 id="二、使用-Terraform-管理腾讯云"><a href="#二、使用-Terraform-管理腾讯云" class="headerlink" title="二、使用 Terraform 管理腾讯云"></a>二、使用 Terraform 管理腾讯云</h3><p>下面是Terraform管理腾讯云资源的具体方法：</p><h4 id="1、-Terraform工作流程"><a href="#1、-Terraform工作流程" class="headerlink" title="1、 Terraform工作流程"></a>1、 Terraform工作流程</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tcy.png" alt="terraform_tcy"></p><p>1、 一次性配置 provider 文件以支持Tencent Cloud的 OpenAPI.<br>2、使用Terraform配置语法生成 .tf 资源文件.<br>3、使用CLI实现腾讯云资源的管理.</p><p>Terraform会将整个资源部署情况更新在 *.tf.state 文件中，让用户在前端控制台和后端平台都清晰的把控自己的云资源。</p><h4 id="2、-配置腾讯云-provider-文件"><a href="#2、-配置腾讯云-provider-文件" class="headerlink" title="2、 配置腾讯云 provider 文件"></a>2、 配置腾讯云 provider 文件</h4><p>官方文档：<a href="https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs" target="_blank" rel="noopener">TencentCloud Provider</a></p><p>登录腾讯云，在访问管理中选择API秘钥管理，获得Secret_Id和Secret_Key</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_capi.png" alt="terraform_capi"></p><p>在新目录下创建 provider.tf 文件，填入秘钥和区域信息</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">$ vim provider.tf</span><br><span class="line"> </span><br><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    tencentcloud = &#123;</span><br><span class="line">      <span class="keyword">source</span>  = <span class="string">"tencentcloudstack/tencentcloud"</span></span><br><span class="line">      version = <span class="string">"1.60.5"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">provider <span class="string">"tencentcloud"</span> &#123;</span><br><span class="line">  secret_id  = <span class="string">"*******"</span></span><br><span class="line">  secret_key = <span class="string">"*******"</span></span><br><span class="line">  region     = <span class="string">"*******"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存该文件，执行 <code>terraform init</code> 初始化Terraform。</p><p>此步骤，Terraform会自动检测 provider.tf 文件中的 provider 字段，发送请求到Terraform官方GitHub下载最新版本腾讯云资源的模块和插件，初始化成功时当前脚本的版本信息也会显示出来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initialize</span></span><br><span class="line">$ terraform init</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_init.png" alt="terraform_init"></p><p>当腾讯云脚本有新的版本发布时，可以通过<strong> terraform init -upgrade </strong>指令更新脚本，获取最新的应用。</p><p>同时，可以通过 <code>terraform plan</code> 预览将要完成的操作，准备好创建资源后，可以通过 <code>terraform apply</code> 进行资源部署，更多有关Terraform CLI 的信息请<a href="(https://www.terraform.io/cli)">点击这里</a>。</p><blockquote><p>tips: NOTES 将秘钥直接填入到.tf文件中是十分不安全的，在多用户共同管理资源时，不建议把腾讯云API 的秘钥直接写到源代码里，以免一不小心更新到公开的版本中，造成安全风险。</p></blockquote><p>腾讯云提供了另一种更为安全可靠的方式，把秘钥信息放在环境变量中配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configure the secret key in the environment path</span></span><br><span class="line">$ <span class="built_in">export</span> TENCENTCLOUD_SECRET_ID=<span class="string">"your_accessid"</span></span><br><span class="line">$ <span class="built_in">export</span> TENCENTCLOUD_SECRET_KEY=<span class="string">"your_accesskey"</span></span><br><span class="line">$ <span class="built_in">export</span> TENCENTCLOUD_REGION=<span class="string">"ap-shanghai"</span></span><br></pre></td></tr></table></figure><p>这样在 provider.tf 文件中就可以省略掉相关信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim provider.tf</span><br><span class="line"></span><br><span class="line">provider <span class="string">"tencentcloud"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3、-部署腾讯云资源"><a href="#3、-部署腾讯云资源" class="headerlink" title="3、 部署腾讯云资源"></a>3、 部署腾讯云资源</h4><p>下面提供一个创建腾讯云对象存储（COS）存储桶的实际用例。</p><p>创建实例资源文件</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">resource <span class="string">"tencentcloud_cos_bucket"</span> <span class="string">"mycos"</span> &#123;</span><br><span class="line">  bucket = <span class="string">"mycos-1251762279"</span></span><br><span class="line">  acl    = <span class="string">"private"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"tencentcloud_cos_bucket_object"</span> <span class="string">"myobject"</span> &#123;</span><br><span class="line">  bucket  = tencentcloud_cos_bucket.mycos.bucket</span><br><span class="line">  key     = <span class="string">"new_object_key"</span></span><br><span class="line">  content = <span class="string">"the content that you want to upload."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到，上传文件至存储桶没有直接填写具体参数信息，而是引用<strong> “tencentcloud_cos_bucket.mycos.bucket” </strong>。</p><p>执行<strong> terraform plan </strong>查看部署计划，一共有2个资源计划创建</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_plan.png" alt="terraform_plan"></p><p>这里参数前面的+ 代表新添加的资源，当销毁资源时，参数前面对应的符号会变为- ；更改一些参数需要重新部署资源时，该资源前面的符号为-/+；在旧参数和新参数内容之间有→ 符号标识</p><p>执行<strong> terraform apply </strong>进行资源创建</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_apply1.png" alt="terraform_apply1"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_apply2.png" alt="terraform_apply2"></p><p>回到控制台，可以看到刚刚部署的资源已经生效</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_apply3.png" alt="terraform_apply3"></p><p>执行<strong> terraform destroy </strong>进行资源销毁（控制台中也同步了销毁操作）</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_destroy1.png" alt="terraform_destroy1"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_destroy2.png" alt="terraform_destroy2"></p><h3 id="三、使用-Terraform-管理-Helm"><a href="#三、使用-Terraform-管理-Helm" class="headerlink" title="三、使用 Terraform 管理 Helm"></a>三、使用 Terraform 管理 Helm</h3><p>下面是Terraform管理 Helm 的具体方法：</p><h4 id="1、-配置-Helm-provider-文件"><a href="#1、-配置-Helm-provider-文件" class="headerlink" title="1、 配置 Helm provider 文件"></a>1、 配置 Helm provider 文件</h4><p>官方文档：<a href="https://registry.terraform.io/providers/hashicorp/helm/latest/docs" target="_blank" rel="noopener">Helm Provider</a></p><p>修改 provider.tf 文件并初始化</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    tencentcloud = &#123;</span><br><span class="line">      <span class="keyword">source</span>  = <span class="string">"tencentcloudstack/tencentcloud"</span></span><br><span class="line">      version = <span class="string">"1.60.5"</span></span><br><span class="line">    &#125;</span><br><span class="line">    helm = &#123;</span><br><span class="line">      <span class="keyword">source</span>  = <span class="string">"hashicorp/helm"</span></span><br><span class="line">      version = <span class="string">"2.4.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">"tencentcloud"</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">"helm"</span> &#123;</span><br><span class="line">  kubernetes &#123;</span><br><span class="line">    config_path = <span class="string">"/etc/rancher/k3s/k3s.yaml"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_init.png" alt="terraform_helm_init"></p><h4 id="2、-部署-Helm-Chart"><a href="#2、-部署-Helm-Chart" class="headerlink" title="2、 部署 Helm Chart"></a>2、 部署 Helm Chart</h4><p>这里提供一个 Mysql Chart 的简单用例</p><p><a href="https://helm.sh/docs/intro/quickstart/" target="_blank" rel="noopener">Helm 官方文档</a><br><a href="https://artifacthub.io/" target="_blank" rel="noopener">Artifact Hub</a></p><p><strong>Helm Chart仓库</strong><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_chart.png" alt="terraform_helm_chart"></p><p><strong>创建实例资源文件</strong></p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">resource <span class="string">"helm_release"</span> <span class="string">"mysql"</span> &#123;</span><br><span class="line">  name      = <span class="string">"mysql-terraform"</span></span><br><span class="line">  chart     = <span class="string">"mysql"</span></span><br><span class="line">  version   = <span class="string">"8.8.14"</span></span><br><span class="line">  <span class="keyword">namespace</span> = <span class="string">"blazehu"</span></span><br><span class="line"></span><br><span class="line">  repository = <span class="string">"https://charts.bitnami.com/bitnami"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> &#123;</span><br><span class="line">    name  = <span class="string">"auth.rootPassword"</span></span><br><span class="line">    value = <span class="string">"123456!@#"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到通过 <code>set</code> 重新设置了 <code>mysql</code> 的 <code>root</code> 密码</p><p>执行<strong> terraform plan </strong>查看部署计划，一共有3个资源计划创建</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_mysql.png" alt="terraform_helm_mysql"><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_mysql2.png" alt="terraform_helm_mysql2"></p><p>执行<strong> terraform apply </strong>进行资源创建</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_apply.png" alt="terraform_helm_apply"></p><p>控制台，可以看到 Helm Chart 部署完成，且相关资源都正常启动</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_apply2.png" alt="terraform_helm_apply2"></p><p>反复执行<strong> terraform apply </strong>进行资源更新，可以看到资源没有变更</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_update.png" alt="terraform_helm_update"></p><blockquote><p>tips：可以通过 ignore_changes 忽略部分变更的更新动作</p></blockquote><p>执行<strong> terraform destroy </strong>进行资源销毁（控制台中也同步了销毁操作）</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_helm_destroy.png" alt="terraform_helm_destroy"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.terraform.io/intro" target="_blank" rel="noopener">https://www.terraform.io/intro</a></li><li><a href="https://cloud.tencent.com/developer/inventory/2539" target="_blank" rel="noopener">https://cloud.tencent.com/developer/inventory/2539</a></li><li><a href="https://cloud.tencent.com/developer/article/1560534" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1560534</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIC Best Practices</title>
      <link href="/2021/12/04/cloudnative/terraform_tic/"/>
      <url>/2021/12/04/cloudnative/terraform_tic/</url>
      
        <content type="html"><![CDATA[<p>TIC 是腾讯云推出的 IaC 开放平台，融合多种业内优秀的开源技术，通过 IaC 的方式解决您在云基础设施管理中面临的效率、成本和安全问题。</p><a id="more"></a><blockquote><p>TIC 提供了资源编排、配置管理和合规检查三大功能模块，支持 HCL（Terraform）格式语法编写，同时提供丰富的基于腾讯云最佳实践的公共模板，有效降低您的学习、使用难度。</p></blockquote><h3 id="操作指南"><a href="#操作指南" class="headerlink" title="操作指南"></a>操作指南</h3><p><a href="https://cloud.tencent.com/document/product/1213" target="_blank" rel="noopener">产品文档</a>非常详细了，以下就不赘述，下面提供一个创建腾讯云对象存储（COS）存储桶的实际用例。</p><h3 id="控制台部署腾讯云资源"><a href="#控制台部署腾讯云资源" class="headerlink" title="控制台部署腾讯云资源"></a>控制台部署腾讯云资源</h3><h4 id="新建资源栈"><a href="#新建资源栈" class="headerlink" title="新建资源栈"></a>新建资源栈</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_1.png" alt="terraform_tic_1"></p><h4 id="创建-cos-资源描述文件"><a href="#创建-cos-资源描述文件" class="headerlink" title="创建 cos 资源描述文件"></a>创建 cos 资源描述文件</h4><p>创建 <code>cos.tf</code> 文件<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_2.png" alt="terraform_tic_2"></p><p>文件内容如下：</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">resource <span class="string">"tencentcloud_cos_bucket"</span> <span class="string">"demo"</span> &#123;</span><br><span class="line">  bucket = <span class="string">"demo-1251762279"</span></span><br><span class="line">  acl    = <span class="string">"private"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="预览结果-terraform-plan"><a href="#预览结果-terraform-plan" class="headerlink" title="预览结果 (terraform plan)"></a>预览结果 (terraform plan)</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_3.png" alt="terraform_tic_3"></p><h4 id="发布-terraform-apply"><a href="#发布-terraform-apply" class="headerlink" title="发布 (terraform apply)"></a>发布 (terraform apply)</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_4.png" alt="terraform_tic_4"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_5.png" alt="terraform_tic_5"></p><p><strong>回到控制台，可以看到刚刚部署的资源已经生效</strong></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_6.png" alt="terraform_tic_6"></p><p><strong>销毁资源，控制台对应的资源也会销毁</strong></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_7.png" alt="terraform_tic_7"></p><h3 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h3><h4 id="使用-API-Explorer-生成代码"><a href="#使用-API-Explorer-生成代码" class="headerlink" title="使用 API Explorer 生成代码"></a>使用 API Explorer 生成代码</h4><p><a href="https://console.cloud.tencent.com/api/explorer?Product=tic&Version=2020-11-17&Action=PlanStack&SignVersion=" target="_blank" rel="noopener">调试地址</a></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_api.png" alt="terraform_tic_api"></p><h4 id="Golang-Example"><a href="#Golang-Example" class="headerlink" title="Golang Example"></a>Golang Example</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"</span></span><br><span class="line">tic <span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tic/v20201117"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describeStacks</span><span class="params">(client *tic.Client)</span> []*<span class="title">tic</span>.<span class="title">StackInfo</span></span> &#123;</span><br><span class="line">request := tic.NewDescribeStacksRequest()</span><br><span class="line">response, err := client.DescribeStacks(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response.Response.Stacks</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createStack</span><span class="params">(client *tic.Client, name, region, templateUrl <span class="keyword">string</span>)</span> *<span class="title">string</span></span> &#123;</span><br><span class="line">request := tic.NewCreateStackRequest()</span><br><span class="line">request.StackName = common.StringPtr(name)</span><br><span class="line">request.StackRegion = common.StringPtr(region)</span><br><span class="line">request.TemplateUrl = common.StringPtr(templateUrl)</span><br><span class="line"></span><br><span class="line">response, err := client.CreateStack(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response.Response.StackId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteStack</span><span class="params">(client *tic.Client, stackId <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">request := tic.NewDeleteStackRequest()</span><br><span class="line">request.StackId = common.StringPtr(stackId)</span><br><span class="line"></span><br><span class="line">_, err := client.DeleteStack(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describeStackVersions</span><span class="params">(client *tic.Client)</span> []*<span class="title">tic</span>.<span class="title">VersionInfo</span></span> &#123;</span><br><span class="line">request := tic.NewDescribeStackVersionsRequest()</span><br><span class="line"></span><br><span class="line">response, err := client.DescribeStackVersions(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response.Response.Versions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">planStack</span><span class="params">(client *tic.Client, stackId, versionId <span class="keyword">string</span>)</span> *<span class="title">string</span></span> &#123;</span><br><span class="line">request := tic.NewPlanStackRequest()</span><br><span class="line">request.StackId = common.StringPtr(stackId)</span><br><span class="line">request.VersionId = common.StringPtr(versionId)</span><br><span class="line"></span><br><span class="line">response, err := client.PlanStack(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, response.ToJsonString())</span><br><span class="line"><span class="keyword">return</span> response.Response.EventId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyStack</span><span class="params">(client *tic.Client, stackId, versionId <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">request := tic.NewApplyStackRequest()</span><br><span class="line">request.StackId = common.StringPtr(stackId)</span><br><span class="line">request.VersionId = common.StringPtr(versionId)</span><br><span class="line"></span><br><span class="line">response, err := client.ApplyStack(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s"</span>, response.ToJsonString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describeStackEvent</span><span class="params">(client *tic.Client, eventId <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">request := tic.NewDescribeStackEventRequest()</span><br><span class="line">request.EventId = common.StringPtr(eventId)</span><br><span class="line"></span><br><span class="line">response, err := client.DescribeStackEvent(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *response.Response.Status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">credential := common.NewCredential(</span><br><span class="line"><span class="string">"SecretId"</span>,</span><br><span class="line"><span class="string">"SecretKey"</span>,</span><br><span class="line">)</span><br><span class="line">cpf := profile.NewClientProfile()</span><br><span class="line">cpf.HttpProfile.Endpoint = <span class="string">"tic.tencentcloudapi.com"</span></span><br><span class="line">client, _ := tic.NewClient(credential, <span class="string">""</span>, cpf)</span><br><span class="line">region := <span class="string">"ap-shanghai"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取资源栈列表</span></span><br><span class="line">stacks := describeStacks(client)</span><br><span class="line"><span class="keyword">for</span> _, stack := <span class="keyword">range</span> stacks &#123;</span><br><span class="line"><span class="comment">//删除资源栈</span></span><br><span class="line">deleteStack(client, *stack.StackId)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建资源栈</span></span><br><span class="line">createStack(client, <span class="string">"demo"</span>, region, <span class="string">""</span>)</span><br><span class="line"><span class="comment">//获取版本列表</span></span><br><span class="line">versions := describeStackVersions(client)</span><br><span class="line"><span class="keyword">for</span> _, version := <span class="keyword">range</span> versions &#123;</span><br><span class="line">fmt.Println(*version.StackId, *version.VersionId, *version.VersionName)</span><br><span class="line"><span class="comment">//执行Plan事件</span></span><br><span class="line">planStack(client, *version.StackId, *version.VersionId)</span><br><span class="line"><span class="comment">//等待事件完成</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">30</span>)</span><br><span class="line"><span class="comment">//执行Apply事件</span></span><br><span class="line">applyStack(client, *version.StackId, *version.VersionId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="templateUrl-⽬前仅限-COS-URL"><a href="#templateUrl-⽬前仅限-COS-URL" class="headerlink" title="templateUrl (⽬前仅限 COS URL)"></a>templateUrl (⽬前仅限 COS URL)</h5><p><strong>这里需要注意的是 templateUrl 参数 <span style="color:red">（模板 URL，⽬前仅限 COS URL, ⽂件为zip压缩格式）</span>，压缩为 zip 文件上传 cos。<strong></strong></strong></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_8.png" alt="terraform_tic_8"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_9.png" alt="terraform_tic_9"></p><h5 id="API-调用执行"><a href="#API-调用执行" class="headerlink" title="API 调用执行"></a>API 调用执行</h5><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_10.png" alt="terraform_tic_10"></p><p>回到控制台，可以看到刚刚调用生效<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/terraform_tic_11.png" alt="terraform_tic_11"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cloud.tencent.com/document/product/1213" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1213</a></li><li><a href="https://cloud.tencent.com/document/api/1213/50586" target="_blank" rel="noopener">https://cloud.tencent.com/document/api/1213/50586</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm3 简介</title>
      <link href="/2021/12/03/cloudnative/helm3/"/>
      <url>/2021/12/03/cloudnative/helm3/</url>
      
        <content type="html"><![CDATA[<p>Helm is the best way to find, share, and use software built for Kubernetes.</p><a id="more"></a><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>想成功和正确地使用Helm，需要以下前置条件。</p><ol><li>一个 Kubernetes 集群</li><li>确定你安装版本的安全配置</li><li>安装和配置Helm。</li></ol><h3 id="三大概念"><a href="#三大概念" class="headerlink" title="三大概念"></a>三大概念</h3><p>Chart 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。你可以把它看作是 Homebrew formula，Apt dpkg，或 Yum RPM 在Kubernetes 中的等价物。</p><p>Repository（仓库） 是用来存放和共享 charts 的地方。它就像 Perl 的 CPAN 档案库网络 或是 Fedora 的 软件包仓库，只不过它是供 Kubernetes 包所使用的。</p><p>Release 是运行在 Kubernetes 集群中的 chart 的实例。一个 chart 通常可以在同一个集群中安装多次。每一次安装都会创建一个新的 release。以 MySQL chart为例，如果你想在你的集群中运行两个数据库，你可以安装该chart两次。每一个数据库都会拥有它自己的 release 和 release name。</p><p>在了解了上述这些概念以后，我们就可以这样来解释 Helm：</p><p>Helm 安装 charts 到 Kubernetes 集群中，每次安装都会创建一个新的 release。你可以在 Helm 的 chart repositories 中寻找新的 chart。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我这里直接下载二进制文件，解压后移动到 /usr/local/bin/</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_version.png" alt="helm3_version"></p><p><a href="https://helm.sh/zh/docs/intro/install/" target="_blank" rel="noopener">安装指南</a><br><a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">下载地址</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_repo.png" alt="helm3_repo"></p><h4 id="查看可以安装的charts列表"><a href="#查看可以安装的charts列表" class="headerlink" title="查看可以安装的charts列表"></a>查看可以安装的charts列表</h4><p><code>helm search hub</code> 从 <a href="https://artifacthub.io/" target="_blank" rel="noopener">Artifact Hub</a> 中查找并列出 <code>helm charts</code>。 <a href="https://artifacthub.io/" target="_blank" rel="noopener">Artifact Hub</a> 中存放了大量不同的仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm search repo bitnami</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_search.png" alt="helm3_search"></p><h3 id="安装Chart示例"><a href="#安装Chart示例" class="headerlink" title="安装Chart示例"></a>安装Chart示例</h3><p>由于我是用的<code>k3s</code> ，而<strong> helm v3 </strong>版本不再需要 Tiller，而是直接访问ApiServer来与k8s交互，通过环境变量<code>KUBECONFIG</code>来读取存有ApiServer的地址与token的配置文件地址，默认地址为<code>~/.kube/config</code> ，所以需要配置环境变量<code>export KUBECONFIG=/etc/rancher/k3s/k3s.yaml</code></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h4 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create namespace blazehu</span><br><span class="line">helm install bitnami/mysql --generate-name -n blazehu</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_mysql.png" alt="helm3_mysql"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm show chart bitnami/mysql   获取关于该chart的基本信息</span><br><span class="line">helm show all bitnami/mysql     获取关于该chart的所有信息</span><br></pre></td></tr></table></figure><h4 id="查看发布的版本"><a href="#查看发布的版本" class="headerlink" title="查看发布的版本"></a>查看发布的版本</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_list.png" alt="helm3_list"></p><h4 id="卸载一个版本"><a href="#卸载一个版本" class="headerlink" title="卸载一个版本"></a>卸载一个版本</h4><p>该命令会从Kubernetes卸载 <strong>mysql-1638628962</strong>， 它将删除和该版本相关的所有相关资源（<code>service</code>、<code>deployment</code>、 <code>pod</code>等等）甚至版本历史。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_uninstall.png" alt="helm3_uninstall"></p><p><code>helm uninstall</code> 的时候提供 <code>--keep-history</code> 选项， Helm将会保存版本历史。 可以通过命令查看该版本的信息。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_uninstall2.png" alt="helm3_uninstall2"></p><h4 id="访问-mysql"><a href="#访问-mysql" class="headerlink" title="访问 mysql"></a>访问 mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ROOT_PASSWORD=$(kubectl get secret --namespace blazehu mysql-1638633054 -o jsonpath=<span class="string">"&#123;.data.mysql-root-password&#125;"</span> | base64 --decode)</span><br><span class="line">kubectl get svc -n blazehu</span><br><span class="line">mysql -h<span class="variable">$&#123;HOST&#125;</span> -uroot -p<span class="variable">$&#123;ROOT_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/helm3_mysql_client.png" alt="helm3_mysql_client"></p>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询外网出口IP</title>
      <link href="/2021/12/02/ops/common/ip/"/>
      <url>/2021/12/02/ops/common/ip/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl ifconfig.me</span><br><span class="line"></span><br><span class="line">curl icanhazip.com</span><br><span class="line"></span><br><span class="line">curl ipinfo.io/ip</span><br><span class="line"></span><br><span class="line">curl ipecho.net/plain</span><br><span class="line"></span><br><span class="line">curl www.trackip.net/i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 主从同步</title>
      <link href="/2020/03/24/ops/pgsql/pgsql_master_slave/"/>
      <url>/2020/03/24/ops/pgsql/pgsql_master_slave/</url>
      
        <content type="html"><![CDATA[<p>PostgreSQL 9.0 引入了主备流复制机制，流复制每次传输单位是 WAL 日志的 record。通过流复制备库不断的从主库同步相应的数据，并在备库 apply 每个 WAL record 。</p><a id="more"></a><blockquote><p>NOTES: PostgreSQL 9.0 之前提供的方法是主库写完一个 WAL 日志文件后，才把 WAL 日志文件传送到备库，这样的方式会导致主备延迟特别大。同时 PostgreSQL 9.0 之后提供了 Hot Standby ，备库在应用 WAL record 的同时也能够提供只读服务，大大提升了用户体验。</p></blockquote><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><p>pgsql 通过容器部署，这里使用 <code>docker-compose</code><br>主库： 192.168.0.1<br>从库： 192.168.0.2</p><h4 id="启动主库"><a href="#启动主库" class="headerlink" title="启动主库"></a>启动主库</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pgsql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">postgres:9.6</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">pgsql</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=postgres</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/var/lib/postgresql/data:/var/lib/postgresql/data</span></span><br></pre></td></tr></table></figure><h4 id="新建归档日志目录"><a href="#新建归档日志目录" class="headerlink" title="新建归档日志目录"></a>新建归档日志目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti pgsql bash</span><br><span class="line"></span><br><span class="line">mkdir -p /var/lib/postgresql/data/pg_archive</span><br></pre></td></tr></table></figure><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> replica login <span class="keyword">replication</span> encrypted <span class="keyword">password</span> <span class="string">'replica'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否创建成功</span></span><br><span class="line">\du</span><br></pre></td></tr></table></figure><h4 id="修改-pg-hba-conf-文件-从库ip"><a href="#修改-pg-hba-conf-文件-从库ip" class="headerlink" title="修改 pg_hba.conf 文件 (从库ip)"></a>修改 pg_hba.conf 文件 (从库ip)</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">host replication replica 192.168.0.2/32 trust</span><br></pre></td></tr></table></figure><h4 id="修改-postgresql-conf"><a href="#修改-postgresql-conf" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen_addresses</span> = <span class="string">'*'</span>     <span class="comment"># 监听所有 IP</span></span><br><span class="line"><span class="attr">wal_level</span> = hot_standby    <span class="comment"># 开启热备</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">32</span>       <span class="comment"># 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">64</span>     <span class="comment"># 设置流复制保留的最多的 xlog 数目，一份是 16M，注意机器磁盘 16M * 64 = 1G</span></span><br><span class="line"><span class="attr">wal_sender_timeout</span> = <span class="number">60</span>    <span class="comment"># 设置流复制主机发送数据的超时时间</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">500</span>      <span class="comment"># 这个设置要注意下，从库的 max_connections 必须要大于主库的</span></span><br><span class="line"><span class="attr">archive_mode</span> = <span class="literal">on</span>          <span class="comment"># 允许归档</span></span><br><span class="line">                           <span class="comment"># 用该命令来归档logfile segment</span></span><br><span class="line"><span class="attr">archive_command</span> = <span class="string">'cp %p /var/lib/postgresql/data/pg_archive/%f'</span></span><br></pre></td></tr></table></figure><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart pgsql</span><br></pre></td></tr></table></figure><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><h4 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h4><p>拷贝 <code>docker-compose</code> 文件, 并拉起容器</p><h4 id="拷贝主服务器数据"><a href="#拷贝主服务器数据" class="headerlink" title="拷贝主服务器数据"></a>拷贝主服务器数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除从库数据</span></span><br><span class="line">rm -rf /var/lib/postgresql/data/*  </span><br><span class="line"></span><br><span class="line">pg_basebackup -h 192.168.0.1 -U replica -D /var/lib/postgresql/data -X stream -P</span><br><span class="line"></span><br><span class="line">mkdir -p /var/lib/postgresql/data/pg_archive</span><br></pre></td></tr></table></figure><h4 id="添加-recovery-conf-文件"><a href="#添加-recovery-conf-文件" class="headerlink" title="添加 recovery.conf 文件"></a>添加 recovery.conf 文件</h4><p>recovery.conf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">standby_mode</span> = <span class="literal">on</span>    </span><br><span class="line"><span class="attr">primary_conninfo</span> = <span class="string">'host=192.168.0.1 port=5432 user=replica password=replica'</span> </span><br><span class="line"><span class="attr">recovery_target_timeline</span> = <span class="string">'latest'</span></span><br></pre></td></tr></table></figure><h4 id="修改-postgresql-conf-1"><a href="#修改-postgresql-conf-1" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">wal_level</span> = hot_standby</span><br><span class="line"><span class="attr">hot_standby_feedback</span> = <span class="literal">on</span>             <span class="comment"># 如果有错误的数据复制，是否向主进行反馈</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">1000</span>                <span class="comment"># 一般查多于写的应用从库的最大连接数要比较大</span></span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span>                      <span class="comment"># 说明这台机器不仅仅是用于数据归档，也用于数据查询</span></span><br><span class="line"><span class="attr">max_standby_streaming_delay</span> = <span class="number">30</span>s     <span class="comment"># 数据流备份的最大延迟时间</span></span><br><span class="line"><span class="attr">wal_receiver_status_interval</span> = <span class="number">10</span>s    <span class="comment"># 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</span></span><br></pre></td></tr></table></figure><h4 id="重启从库"><a href="#重启从库" class="headerlink" title="重启从库"></a>重启从库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart pgsql-slave</span><br></pre></td></tr></table></figure><h3 id="验证主从"><a href="#验证主从" class="headerlink" title="验证主从"></a>验证主从</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> client_addr, sync_state <span class="keyword">from</span> pg_stat_replication;</span><br><span class="line"></span><br><span class="line">ps -ef 查看进程是否存在</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/postgresql/9.6/bin/pg_ctl -D /var/lib/postgresql/data status</span><br><span class="line"></span><br><span class="line">pg_controldata /var/lib/postgresql/data</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li><li><a href="http://mysql.taobao.org/monthly/2015/10/04/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2015/10/04/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pgsql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 之 pg_stat_statements</title>
      <link href="/2020/03/23/ops/pgsql/pg_stat_statements/"/>
      <url>/2020/03/23/ops/pgsql/pg_stat_statements/</url>
      
        <content type="html"><![CDATA[<p>pg_stat_statements 模块提供了一种跟踪执行的所有 SQL 语句的统计信息的方法。</p><a id="more"></a><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>ubuntu 16.04 安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get -y update &amp;&amp; apt-get install -y postgresql-contrib-9.6 postgresql-plpython-9.6</span><br></pre></td></tr></table></figure><p>如果 pgsql 是通过容器部署可以更新基础镜像：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:<span class="number">9.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y update &amp;&amp; apt-get install -y --force-yes postgresql-contrib-9.6 postgresql-plpython-9.6</span></span><br></pre></td></tr></table></figure><h3 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">shared_preload_libraries</span> = <span class="string">'pg_stat_statements'</span>    <span class="comment"># 加载 pg_stat_statements 模块</span></span><br></pre></td></tr></table></figure><p>以下可选参数：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">track_io_timing</span> = <span class="literal">on</span>                      <span class="comment"># 跟踪 IO 消耗的时间</span></span><br><span class="line"><span class="attr">track_activity_query_size</span> = <span class="number">2048</span>          <span class="comment"># 单条 sql 的最长长度，超过截断显示</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pg_stat_statements.save</span> = <span class="literal">on</span>              <span class="comment"># 重启后是否保留统计信息 </span></span><br><span class="line"><span class="attr">pg_stat_statements.max</span> = <span class="number">10000</span>            <span class="comment"># 最多保留统计信息条数，通过 LRU 算法来覆盖老的记录。  </span></span><br><span class="line"><span class="attr">pg_stat_statements.track</span> = all            <span class="comment"># all：所有 sql 包括函数内嵌套的 sql 、 top：直接执行的 sql 不包括函数内嵌套的、 none：不跟踪  </span></span><br><span class="line"><span class="attr">pg_stat_statements.track_utility</span> = <span class="literal">off</span>    <span class="comment"># 是否跟踪非 DML 语句 (例如 DDL、DCL)， on 表示跟踪, off 表示不跟踪</span></span><br></pre></td></tr></table></figure><h3 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart pgsql</span><br></pre></td></tr></table></figure><h3 id="加载扩展"><a href="#加载扩展" class="headerlink" title="加载扩展"></a>加载扩展</h3><p><strong>加载扩展模块</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> extension pg_stat_statements;</span><br></pre></td></tr></table></figure><p><strong>卸载扩展模块</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> extension pg_stat_statements;</span><br></pre></td></tr></table></figure><h3 id="常用分析语句"><a href="#常用分析语句" class="headerlink" title="常用分析语句"></a>常用分析语句</h3><p>单次调用最耗时</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> mean_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗时</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> total_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>响应时间抖动最严重</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> stddev_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>单次调用最耗 IO</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) /calls <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗IO</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗共享内存</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (shared_blks_hit + shared_blks_dirtied) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗临时空间</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">query</span> <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> temp_blks_written <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="重置统计信息"><a href="#重置统计信息" class="headerlink" title="重置统计信息"></a>重置统计信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_stat_statements_reset();</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.postgresql.org/docs/9.6/pgstatstatements.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.6/pgstatstatements.html</a></li><li><a href="https://yq.aliyun.com/articles/74421" target="_blank" rel="noopener">https://yq.aliyun.com/articles/74421</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pgsql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 学习笔记</title>
      <link href="/2020/03/22/ops/pgsql/pgsql_study_notes/"/>
      <url>/2020/03/22/ops/pgsql/pgsql_study_notes/</url>
      
        <content type="html"><![CDATA[<p>PostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，在灵活的 BSD 许可证下发行。</p><a id="more"></a><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\d</span>           当前数据库的所有表</span><br><span class="line"><span class="string">\dt</span>          只显示匹配的表  </span><br><span class="line"><span class="string">\di</span>          只显示索引</span><br><span class="line"><span class="string">\ds</span>          只显示序列</span><br><span class="line"><span class="string">\dv</span>          只显示视图</span><br><span class="line"><span class="string">\df</span>          只显示函数</span><br><span class="line"><span class="string">\du</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\dg</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\encoding</span>    指定客户端的字符编码，如 <span class="string">\encoding</span> UTF8</span><br><span class="line"><span class="string">\x</span>           把表中的每一行的每列数据都拆分为单行展示, 与 MySQL 中的 <span class="string">"\G"</span> 的功能类似</span><br></pre></td></tr></table></figure><h4 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql -U postgres</span><br><span class="line">psql -h 192.168.0.1 -p 5432 -U repuser -d postgres -W</span><br><span class="line">psql -U postgres -d <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> env</span><br><span class="line"><span class="built_in">export</span> PGDATABASE=postgres</span><br><span class="line"><span class="built_in">export</span> PGHOST=192.168.0.1</span><br><span class="line"><span class="built_in">export</span> PGPORT=5432</span><br><span class="line"><span class="built_in">export</span> PGUSER=postgres</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">psql</span><br></pre></td></tr></table></figure><h4 id="Logout"><a href="#Logout" class="headerlink" title="Logout"></a>Logout</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure><h4 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h4 id="Use-Database"><a href="#Use-Database" class="headerlink" title="Use Database"></a>Use Database</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\c postgres</span><br><span class="line"></span><br><span class="line">\c test</span><br></pre></td></tr></table></figure><h4 id="Show-Tables"><a href="#Show-Tables" class="headerlink" title="Show Tables"></a>Show Tables</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\d</span><br><span class="line"></span><br><span class="line">\d "Table1"</span><br></pre></td></tr></table></figure><h4 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> repuser <span class="keyword">REPLICATION</span> LOGIN <span class="keyword">CONNECTION</span> <span class="keyword">LIMIT</span> <span class="number">2</span> ENCRYPTED <span class="keyword">PASSWORD</span> <span class="string">'postgres'</span>;</span><br></pre></td></tr></table></figure><h4 id="Drop-User"><a href="#Drop-User" class="headerlink" title="Drop User"></a>Drop User</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> repuser;</span><br></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_dump -U postgres <span class="built_in">test</span> &gt; test.sql </span><br><span class="line"></span><br><span class="line">pg_dump -U postgres -d <span class="built_in">test</span> -s &gt; test.sql    <span class="comment"># -s, --schema-only  dump only the schema, no data</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">"Name"</span>, <span class="string">"Age"</span> <span class="keyword">from</span> <span class="string">"Person"</span> <span class="keyword">where</span> <span class="string">"Sex"</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">"Age"</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"> Name|  Age</span><br><span class="line"> <span class="comment">----+-------</span></span><br><span class="line"> 张三 | 20</span><br><span class="line"> 李四 | 18</span><br><span class="line"> 王五 | 16</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure><h3 id="查看数据库、表、索引大小"><a href="#查看数据库、表、索引大小" class="headerlink" title="查看数据库、表、索引大小"></a>查看数据库、表、索引大小</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_database_size(<span class="string">'test'</span>));</span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_table_size(<span class="string">'test_table'</span>));   </span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_indexes_size(<span class="string">'test_index'</span>));</span><br></pre></td></tr></table></figure><h3 id="查询计划"><a href="#查询计划" class="headerlink" title="查询计划"></a>查询计划</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">analyze</span> <span class="keyword">select</span> <span class="string">"Name"</span>, <span class="string">"Age"</span> <span class="keyword">from</span> <span class="string">"Person"</span> <span class="keyword">where</span> <span class="string">"Sex"</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">"Age"</span>;</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_age</span><br><span class="line">    <span class="keyword">ON</span> public.<span class="string">"Person"</span> <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="string">"Age"</span> <span class="keyword">COLLATE</span> pg_catalog.<span class="string">"default"</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_name</span><br><span class="line">    <span class="keyword">ON</span> public.<span class="string">"Person"</span> <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="string">"Name"</span>) <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_indexes <span class="keyword">where</span> tablename=<span class="string">'Person'</span>;</span><br></pre></td></tr></table></figure><h3 id="vacuum"><a href="#vacuum" class="headerlink" title="vacuum"></a>vacuum</h3><p>vacuum 操作可以手动和自动。设置自动 vacuum 注意必须设置 <span style="color:red">track_counts = true </span>。具体的设置可以参照官方的文档。（8.3 版本以后）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vacuumdb --analyze --verbose -f --dbname=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ol><li>释放，再利用更新或者删除的行所占据的磁盘空间。</li><li>更新 PostgreSQL 查询计划中使用的统计数据。</li><li>防止因事务 ID 的重置而使非常老的数据丢失。</li></ol><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ol><li>PostgreSQL 数据的插入，更新，删除操作并不是真正放到数据库空间。如果不定期释放空间的话，由于数据太多，查询速度会巨降。</li><li>PostgreSQL 在做查询处理的时候，为了是查询速度提高，会根据统计数据来确定执行计划。如果不及时更新的话，查询的效果可能不如预期。</li><li>PostgreSQL 中每一个事务都会产生一个事务 ID，但这个数字是有上限的。当事务 ID 达到最大值后，会重新从最小值开始循环。这样如果不及时把以前的数据释放掉的话，原来的老数据会因为事务 ID 的丢失而丢失掉。</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pgsql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rundeck 简介</title>
      <link href="/2020/03/20/ops/common/rundeck_intro/"/>
      <url>/2020/03/20/ops/common/rundeck_intro/</url>
      
        <content type="html"><![CDATA[<p>Rundeck 是一个基于 Java 和 Grails 的开源的运维自动化工具，提供了 Web 管理界面进行操作，同时提供命令行工具和 WebAPI 的访问控制方式。Rundeck 能够帮助开发和运维人员更好地管理各个节点。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装方式比较多，这里使用 war 包来简单介绍安装的步骤。</p><ul><li><a href="https://docs.rundeck.com/downloads.html" target="_blank" rel="noopener">官方下载地址</a></li><li><a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">官方文档地址</a></li></ul><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>官方下载地址下载： rundeck-3.0.7-20181008.war</p><h5 id="检查依赖"><a href="#检查依赖" class="headerlink" title="检查依赖"></a>检查依赖</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择版本</span></span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>启动时会在当前路径初始化一些 rundeck 目录。如果报错可能是 java 版本的问题，可以重新选择 java 版本。</p><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/root/rundeck/server/sbin</span><br><span class="line"><span class="built_in">export</span> RDECK_BASE=/root/rundeck</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>修改 linux 服务器的环境变量，将 rundeckd 的路径添加到 PATH 里。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rundeckd status</span><br></pre></td></tr></table></figure><h5 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h5><p>修改登陆密码： <code>server/config/realm.properties</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The format is</span></span><br><span class="line"><span class="comment">#  &lt;username&gt;: &lt;password&gt;[,&lt;rolename&gt; ...]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Passwords may be clear text, obfuscated or checksummed.  The class</span></span><br><span class="line"><span class="comment"># org.mortbay.util.Password should be used to generate obfuscated</span></span><br><span class="line"><span class="comment"># passwords or password checksums</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This sets the temporary user accounts for the Rundeck app</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">admin:admin,user,admin</span><br></pre></td></tr></table></figure><p>修改默认端口和访问地址： <code>server/config/rundeck-config.properties</code></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.address</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">grails.serverURL</span>=http://<span class="number">192.168</span>.<span class="number">1.2</span></span><br></pre></td></tr></table></figure><p><code>etc/framework.properties</code></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Server connection information</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">framework.server.name</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.hostname</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.port</span>=<span class="number">80</span></span><br><span class="line"><span class="attr">framework.server.url</span>=http://<span class="number">192.168</span>.<span class="number">1.2</span></span><br></pre></td></tr></table></figure><p>修改 dataSource 为 mysql： <code>server/config/rundeck-config.properties</code></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSource.dbCreate</span>=update</span><br><span class="line"><span class="attr">dataSource.url</span>=jdbc:mysql://<span class="number">192.168</span>.<span class="number">1.2</span>/rundeck?autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">dataSource.username</span>=root</span><br><span class="line"><span class="attr">dataSource.password</span>=password</span><br><span class="line"><span class="attr">dataSource.driverClassName</span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>修改邮件配置：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">grails.mail.default.from</span>=viease@foxmail.com</span><br><span class="line"><span class="attr">grails.mail.host</span>=</span><br><span class="line"><span class="attr">grails.mail.port</span>=<span class="number">25</span></span><br><span class="line"><span class="attr">grails.mail.username</span>=</span><br><span class="line"><span class="attr">grails.mail.password</span>=</span><br></pre></td></tr></table></figure><p>修改 Project Nodes 配置：<br>projects/<project>/etc</project></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.name</span>=</span><br><span class="line"><span class="attr">project.description</span>=</span><br><span class="line"><span class="attr">project.jobs.gui.groupExpandLevel</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">project.ssh-authentication</span>=privateKey</span><br><span class="line"><span class="attr">project.ssh-keypath</span>=/root/.ssh/id_rsa</span><br><span class="line"><span class="attr">project.ssh-command-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.ssh-connect-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.nodeCache.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">project.nodeCache.delay</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">service.NodeExecutor.default.provider</span>=jsch-ssh</span><br><span class="line"><span class="attr">service.FileCopier.default.provider</span>=jsch-scp</span><br><span class="line"><span class="comment"># node 配置文件为本地文件</span></span><br><span class="line"><span class="attr">resources.source.1.type</span>=file</span><br><span class="line"><span class="attr">resources.source.1.config.includeServerNode</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.requireFileExists</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">resources.source.1.config.generateFileAutomatically</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.format</span>=resourcexml</span><br><span class="line"><span class="attr">resources.source.1.config.file</span>=/root/rundeck/projects/&lt;project&gt;/etc/resources.xml</span><br><span class="line"><span class="comment"># node 配置文件为 url</span></span><br><span class="line"><span class="attr">resources.source.2.type</span>=url</span><br><span class="line"><span class="attr">resources.source.2.config.url</span>=http\://localhost\:<span class="number">9998</span>/rundeck_nodes</span><br></pre></td></tr></table></figure><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p>新建一个新的目录 rundeck，将 war 包放在目录内然后运行如下命令启动服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar rundeck-3.0.7-20181008.war</span><br></pre></td></tr></table></figure><p>也可以使用提供的 <code>rundeckd</code> 来管理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rundeckd -h</span></span><br><span class="line">Usage: /root/rundeck/server/sbin/rundeckd &#123;start|stop|restart|condrestart|status&#125;</span><br></pre></td></tr></table></figure><h4 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h4><p>Rundeck 可以很方便的备份项目的配置信息，在 Project Settings 里提供导入（Import Archive）导出（Export Archive）项目配置的能力。</p><blockquote><p>NOTES: <a href="https://docs.rundeck.com/docs/manual/03-getting-started.html" target="_blank" rel="noopener">官方文档提供详细的文档</a></p></blockquote><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyenv + virtualenv 版本管理</title>
      <link href="/2019/11/20/backend/python/pyenv/"/>
      <url>/2019/11/20/backend/python/pyenv/</url>
      
        <content type="html"><![CDATA[<p>不同项目可能需要不同版本的 Python 和独立的依赖环境。Pyenv 可用于管理多个 Python 版本，而 pyenv-virtualenv 是其插件，用于管理虚拟环境。通过 Pyenv + pyenv-virtualenv，可以在同一台主机上切换 Python 版本并为每个项目创建独立的虚拟环境，避免依赖冲突。</p><a id="more"></a><h3 id="Pyenv-安装"><a href="#Pyenv-安装" class="headerlink" title="Pyenv 安装"></a>Pyenv 安装</h3><p>Pyenv 让你可以轻松地在多个 Python 版本之间切换。<a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#installation" target="_blank" rel="noopener">安装文档</a></p><h3 id="Pyenv-常用命令"><a href="#Pyenv-常用命令" class="headerlink" title="Pyenv 常用命令"></a>Pyenv 常用命令</h3><ol><li><p>查看可用的 Python 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本的 Python</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.6.15</span><br></pre></td></tr></table></figure></li><li><p>设置当前目录下的 Python 环境版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.6.15</span><br></pre></td></tr></table></figure></li><li><p>查看已安装的 Python 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></li></ol><h3 id="Pyenv-virtualenv-安装"><a href="#Pyenv-virtualenv-安装" class="headerlink" title="Pyenv-virtualenv 安装"></a>Pyenv-virtualenv 安装</h3><p>Pyenv-virtualenv 是 Pyenv 的插件，用于管理虚拟环境。<a href="https://github.com/pyenv/pyenv-virtualenv?tab=readme-ov-file#installation" target="_blank" rel="noopener">安装文档</a></p><ol><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv 3.6.15 env3615</span><br></pre></td></tr></table></figure></li><li><p>启用虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv activate env3615</span><br></pre></td></tr></table></figure></li><li><p>退出虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 Pyenv + pyenv-virtualenv 的组合，我们可以在同一台主机上轻松管理多个 Python 版本，并为每个项目创建独立的虚拟环境。这不仅解决了不同项目对 Python 版本的需求，还避免了依赖冲突，极大地提高了开发效率。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">Pyenv 文档</a></li><li><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="noopener">Pyenv-virtualenv 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 消息队列之 RabbitMQ</title>
      <link href="/2019/07/21/backend/golang/golang_rabbitmq/"/>
      <url>/2019/07/21/backend/golang/golang_rabbitmq/</url>
      
        <content type="html"><![CDATA[<p>消息队列（Message Queue）是一种应用间的通信方式，一种应用间的异步协作机制。消息的生产者只需将消息发布到 MQ 中，消息消费者只需要从 MQ 中获取消息消费，消息的可靠性由消息系统来保证。</p><a id="more"></a><h3 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h3><p>RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。</p><h4 id="RabbitMQ-特点"><a href="#RabbitMQ-特点" class="headerlink" title="RabbitMQ 特点"></a>RabbitMQ 特点</h4><ol><li>可靠性（Reliability）</li><li>灵活的路由（Flexible Routing）</li><li>消息集群（Clustering）</li><li>高可用（Highly Available Queues）</li><li>多种协议（Multi-protocol）</li><li>多语言客户端（Many Clients）</li><li>管理界面（Management UI）</li><li>跟踪机制（Tracing）</li><li>插件机制（Plugin System）</li></ol><h4 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>direct</td><td>路由键完全匹配，单播</td></tr><tr><td>topic</td><td>路由键模式匹配，路由键可以包含通配符：”#”、”*”</td></tr><tr><td>fanout</td><td>不处理路由键，广播，转发消息最快</td></tr><tr><td>headers</td><td>不处理路由键，根据发送的消息内容中的 headers 属性进行匹配，其他跟 direct 模式完全一致，性能较其他模式差很多</td></tr></tbody></table><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>容器化部署，简单方便</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --hostname rabbit1 --name rabbitmq1 -p 9419:9419 -p 8080:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitcookie'</span> rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit2 --name rabbitmq2 -p 5673:5672 --link rabbitmq1:rabbit1 -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitcookie'</span> rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit3 --name rabbitmq3 -p 5674:5672 --link rabbitmq1:rabbit1 --link rabbitmq2:rabbit2 -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitcookie'</span> rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq2 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq3 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-Exporter"><a href="#RabbitMQ-Exporter" class="headerlink" title="RabbitMQ Exporter"></a>RabbitMQ Exporter</h3><p><strong>repo:</strong> <a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></p><p><strong>Start RabbitMQ Exporter:</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RABBIT_EXPORTERS=exchange,node,queue RABBIT_CAPABILITIES=bert,no_sort RABBIT_USER=guest RABBIT_PASSWORD=guest OUTPUT_FORMAT=JSON PUBLISH_PORT=8082 RABBIT_URL=http://127.0.0.1:8080 MAX_QUEUES=5000 nohup rabbitmq_exporter &amp;</span><br></pre></td></tr></table></figure><p><strong>Start in container:</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --net=container:my-rabbit kbudde/rabbitmq-exporter</span><br></pre></td></tr></table></figure><h3 id="Golang-客户端-Demo"><a href="#Golang-客户端-Demo" class="headerlink" title="Golang 客户端 Demo"></a>Golang 客户端 Demo</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"URL"</span>: <span class="string">"amqp://guest:guest@10.5.124.213:5672/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">URL       <span class="keyword">string</span></span><br><span class="line">QueueList <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Config</span><br><span class="line">Connection *amqp.Connection</span><br><span class="line">Channel    *amqp.Channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">reconnectDelay      = <span class="number">3</span> * time.Second <span class="comment">// reconnectDelay</span></span><br><span class="line">retryNum            = <span class="number">5</span>               <span class="comment">// retryNum</span></span><br><span class="line">DefaultExchangeName = <span class="string">"default"</span></span><br><span class="line">DefaultQueueName    = <span class="string">"default"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">connect</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">err error</span><br><span class="line">)</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Info(<span class="string">"Attempting to connect."</span>)</span><br><span class="line">c.Connection, err = amqp.Dial(c.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to connect to RabbitMQ."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Channel, err = c.Connection.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to open a channel."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">isConnected</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.Connection.IsClosed() || c.Channel == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">handleConnect</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// retry connect</span></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; retryNum; index++ &#123;</span><br><span class="line">c.connect()</span><br><span class="line"><span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Warn(<span class="string">"Failed to connect. Retrying..."</span>)</span><br><span class="line">time.Sleep(reconnectDelay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Info(<span class="string">"Connect succeed."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Fatal(<span class="string">"Connect failed."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Producer <span class="keyword">struct</span> &#123;</span><br><span class="line">Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducer</span><span class="params">()</span> *<span class="title">Producer</span></span> &#123;</span><br><span class="line">rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">producer := &amp;Producer&#123;&#125;</span><br><span class="line">producer.URL = rabbitConfig.URL</span><br><span class="line"></span><br><span class="line">producer.handleConnect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> producer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Producer)</span> <span class="title">UnsafePushExchange</span><span class="params">(data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, exchangeName <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// check connect</span></span><br><span class="line"><span class="keyword">if</span> !p.isConnected() &#123;</span><br><span class="line">p.handleConnect()</span><br><span class="line">p.initExchange()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// parse data</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">bytesData []<span class="keyword">byte</span></span><br><span class="line">err       error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishData := Msg&#123;</span><br><span class="line">Data:         data,</span><br><span class="line">Time:         util.DecodeTime(time.Now().UTC()),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bytesData, err = json.Marshal(publishData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"data"</span>:   data,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to marshal a message."</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = p.Channel.Publish(</span><br><span class="line">exchangeName, <span class="comment">// exchange</span></span><br><span class="line"><span class="string">""</span>,           <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">DeliveryMode: amqp.Persistent,</span><br><span class="line">ContentType:  <span class="string">"application/json"</span>,</span><br><span class="line">Body:         bytesData,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to publish a message."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"data"</span>:   publishData,</span><br><span class="line">&#125;).Info(<span class="string">"Publish a message."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Consumer <span class="keyword">struct</span> &#123;</span><br><span class="line">Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConsumer</span><span class="params">(queueName <span class="keyword">string</span>)</span> *<span class="title">Consumer</span></span> &#123;</span><br><span class="line">rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> queueName == <span class="string">""</span> &#123;</span><br><span class="line">queueName = DefaultQueueName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer := &amp;Consumer&#123;</span><br><span class="line">queueName: queueName,</span><br><span class="line">&#125;</span><br><span class="line">consumer.URL = rabbitConfig.URL</span><br><span class="line">consumer.QueueList = rabbitConfig.QueueList</span><br><span class="line"></span><br><span class="line">consumer.handleConnect()</span><br><span class="line"></span><br><span class="line">consumer.initQueue()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> consumer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Consumer)</span> <span class="title">Receive</span><span class="params">(forever <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// check connect</span></span><br><span class="line"><span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">c.handleConnect()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgs, err := c.Channel.Consume(</span><br><span class="line">c.queueName, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,          <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// auto-ack</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,         <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Info(<span class="string">"Failed to register a consumer."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> msgs &#123;</span><br><span class="line"><span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">c.handleConnect()</span><br><span class="line">&#125;</span><br><span class="line">c.handle(msg.Body)</span><br><span class="line">msg.Ack(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-forever</span><br><span class="line">log.Info(<span class="string">"Consumer is Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="noopener">https://www.jianshu.com/p/79ca08116d57</a></li><li><a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></li><li><a href="https://www.rabbitmq.com/tutorials/tutorial-four-go.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-four-go.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 单例模式</title>
      <link href="/2019/07/13/backend/golang/golang_singleton/"/>
      <url>/2019/07/13/backend/golang/golang_singleton/</url>
      
        <content type="html"><![CDATA[<p>单例模式是最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p><strong>意图：</strong> 保证一个类型仅有一个实例，并提供一个访问它的全局访问点。<br><strong>主要解决：</strong> 一个全局使用的类型频繁地创建与销毁。<br><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。<br><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Golang 目前常见的有以下四种方式（懒汉式、 饿汉式、 双重检查、 sync.Once）</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance *SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := GetSingletonInstance()</span><br><span class="line">b := GetSingletonInstance()</span><br><span class="line">c := <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">fmt.Println(unsafe.Pointer(s))</span><br><span class="line">fmt.Println(unsafe.Pointer(b))</span><br><span class="line">fmt.Println(unsafe.Pointer(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>利用 <code>sync.Mutex</code> 进行加锁，保证线程安全。<br><strong>缺点：</strong> 加锁有了额外开销。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lock              sync.Mutex</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>导入包的时候直接创建实例，这样无需判空且线程安全。<br><strong>优点：</strong> 简单方便<br><strong>缺点：</strong> 不管程序中是否使用都会生成该实例，该实例持续占有在内存中<br><strong>适用场景：</strong> 该实例使用频繁，功能简单占用内存少</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h3><p>第一次判断不加锁，第二次加锁保证线程安全，实例创建完成后，获取实例就不用加锁了。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lock              sync.Mutex</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h3><p><code>sync.Once</code> 确保创建实例子的函数只执行一次</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">one               sync.Once</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">one.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sync-Once-源码分析"><a href="#sync-Once-源码分析" class="headerlink" title="sync.Once 源码分析"></a>sync.Once 源码分析</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Once is an object that will perform exactly one action.</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">done <span class="keyword">uint32</span></span><br><span class="line">m    Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// o.done 初始化为0，双重检查</span></span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line">o.doSlow(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">o.m.Lock()</span><br><span class="line"><span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line"><span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// o.done 赋值为1，atomic 原子操作</span></span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 执行函数</span></span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/singleton-pattern.html</a></li><li><a href="https://www.cnblogs.com/wpnine/p/10426105.html" target="_blank" rel="noopener">https://www.cnblogs.com/wpnine/p/10426105.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Sort排序</title>
      <link href="/2019/07/12/backend/golang/golang_sort/"/>
      <url>/2019/07/12/backend/golang/golang_sort/</url>
      
        <content type="html"><![CDATA[<p>sort包提供了排序切片和用户自定义数据集以及相关功能的函数。</p><a id="more"></a><h3 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h3><p>使用sort包的函数进行排序时，集合需要实现 sort.Inteface 接口，该接口中有三个方法：Len、Less、Swap。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// An implementation of Interface can be sorted by the routines in this package.</span></span><br><span class="line"><span class="comment">// The methods refer to elements of the underlying collection by integer index.</span></span><br><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">Len() <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Less reports whether the element with index i</span></span><br><span class="line"><span class="comment">// must sort before the element with index j.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If both Less(i, j) and Less(j, i) are false,</span></span><br><span class="line"><span class="comment">// then the elements at index i and j are considered equal.</span></span><br><span class="line"><span class="comment">// Sort may place equal elements in any order in the final result,</span></span><br><span class="line"><span class="comment">// while Stable preserves the original input order of equal elements.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Less must describe a transitive ordering:</span></span><br><span class="line"><span class="comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span></span><br><span class="line"><span class="comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span></span><br><span class="line"><span class="comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span></span><br><span class="line"><span class="comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span></span><br><span class="line">Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sort包已经支持的内部数据类型排序"><a href="#sort包已经支持的内部数据类型排序" class="headerlink" title="sort包已经支持的内部数据类型排序"></a>sort包已经支持的内部数据类型排序</h4><p>sort包原生支持<code>[]int</code>、<code>[]float64</code> 和 <code>[]string</code> 三种内建数据类型切片的排序操作，已实现相关的Len()、Less()、Swap()方法。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Convenience types for common cases</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntSlice []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> Float64Slice []<span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> StringSlice []<span class="keyword">string</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Student)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"(%s, %d)"</span>, s.name, s.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StudentSlice []*Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list StudentSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list StudentSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//排序规则：首先按年龄排序（由小到大），年龄相同时按姓名进行排序（按字符串的自然顺序）</span></span><br><span class="line"><span class="keyword">if</span> list[i].age &lt; list[j].age &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> list[i].age &gt; list[j].age &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> list[i].name &lt; list[j].name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list StudentSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">list[i], list[j] = list[j], list[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// []int</span></span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;</span><br><span class="line">sort.Sort(sort.IntSlice(a))</span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// []float</span></span><br><span class="line">b := []<span class="keyword">float64</span>&#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.4</span>, <span class="number">2.8</span>, <span class="number">1.2</span>, <span class="number">4.5</span>, <span class="number">-6.1</span>, <span class="number">-0.6</span>, <span class="number">-4.0</span>, <span class="number">2.4</span>&#125;</span><br><span class="line">sort.Sort(sort.Float64Slice(b))</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// []string</span></span><br><span class="line">c := []<span class="keyword">string</span>&#123;<span class="string">"f"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>&#125;</span><br><span class="line">sort.Sort(sort.StringSlice(c))</span><br><span class="line">fmt.Println(c)</span><br><span class="line"></span><br><span class="line">s := StudentSlice([]*Student&#123;</span><br><span class="line">&amp;Student&#123;<span class="string">"f"</span>, <span class="number">18</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"c"</span>, <span class="number">17</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"d"</span>, <span class="number">19</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"b"</span>, <span class="number">16</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"a"</span>, <span class="number">15</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"z"</span>, <span class="number">18</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"x"</span>, <span class="number">18</span>&#125;,</span><br><span class="line">&amp;Student&#123;<span class="string">"y"</span>, <span class="number">17</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">sort.Sort(s)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[0 1 2 3 4 5 6 7 8 9]</span><br><span class="line">[-6.1 -4 -0.6 1.1 1.2 2.2 2.4 2.8 3.4 4.5]</span><br><span class="line">[a b c d f x y z]</span><br><span class="line">[(a, 15) (b, 16) (c, 17) (y, 17) (f, 18) (x, 18) (z, 18) (d, 19)]</span><br></pre></td></tr></table></figure><h3 id="逆排序"><a href="#逆排序" class="headerlink" title="逆排序"></a>逆排序</h3><p><strong>sort.Reverse()</strong></p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// []int</span></span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;</span><br><span class="line">sort.Sort(sort.Reverse(sort.IntSlice(a)))</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[9 8 7 6 5 4 3 2 1 0]</span><br></pre></td></tr></table></figure><h4 id="Reverse-源码分析"><a href="#Reverse-源码分析" class="headerlink" title="Reverse 源码分析"></a>Reverse 源码分析</h4><p>sort.Reverse 源码如下，可以发现 sort.Reverse 方法返回的是 reverse 类型的 Interface，而该结构体只是重新实现了 Less 方法。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> reverse <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// This embedded Interface permits Reverse to use the methods of</span></span><br><span class="line"><span class="comment">// another Interface implementation.</span></span><br><span class="line">Interface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Less returns the opposite of the embedded implementation's Less method.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r reverse)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Interface.Less(j, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse returns the reverse order for data.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(data Interface)</span> <span class="title">Interface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;reverse&#123;data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IntSlice 的 Less 方法实现如下</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x IntSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> x[i] &lt; x[j] &#125;</span><br></pre></td></tr></table></figure><p>上述 <code>[]int</code> 类型切片排序的时候，<code>r.Interface.Less(j, i)</code> ，调用了 IntSlice 的 Less 方法，交换了下标 <code>i</code>, <code>j</code>。这样 Less 方法实际如下，这样就实现了逆排序</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x IntSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> x[j] &lt; x[i] &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 学习笔记</title>
      <link href="/2019/03/18/cloudnative/docker_introduction/"/>
      <url>/2019/03/18/cloudnative/docker_introduction/</url>
      
        <content type="html"><![CDATA[<p>Build, Ship, and Run Any App, Anywhere.<br><br></p><a id="more"></a><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_1.png" alt="docker_introduction_1"></p><h4 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h4><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像为Debian</span></span><br><span class="line"><span class="keyword">FROM</span> debian</span><br><span class="line"><span class="comment"># 将软件包emacs.tgz解压到/usr/local/目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> emacs.tgz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="comment"># 将软件包apache.tgz解压到/usr/local/目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache.tgz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="comment"># 设置匿名卷目录/data</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"><span class="comment"># 设置容器的启动命令，该配置可用运行时参数覆盖</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/local/start.sh"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_2.png" alt="docker_introduction_2"></p><ul><li>Dockerfile中的每一条指令都会生成一层新的镜像层</li><li>从一个父镜像开始构建，docker build 的时候会去检查下一条命令的hash值是否于现有镜像层相等，如果相等，则不执行这条命令，而直接基于现有镜像层来执行接下来的语句。</li><li>对于ADD或者COPY指令来说，docker 会检查每个文件的校验和（元数据和数据），最后修改时间和最后访问时间不作考虑。</li><li>对于RUN yum install 来说，docker 不会去检查文件的校验和，只检查指令是否变化。如果需要强制更新镜像，那么需要docker build –no-cache</li><li>一旦从某一层开始不使用cache，接下来的每一层都不会再检查是否有cache</li></ul><h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5><h6 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h6><p>尽可能使用当前官方仓库作为你构建镜像的基础。如果公司内部使用，可下载官方仓库镜像，再推送至私有 registry。推荐使用 Alpine 镜像（Alpine Linux 是一个完整的操作系统），因为其被严格控制并保持在最小尺寸（目前大小 5.52M）。基于此基础镜像，再去构建自己的基础镜像，可以有效控制镜像的大小。</p><h6 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h6><p>通过给镜像添加标签可以帮助组织镜像、记录许可信息、辅助自动化构建等。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_3.png" alt="docker_introduction_3"></p><h6 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h6><p>为了保持 Dockerfile 文件的可读性，可理解性，以及可维护性，过长的或复杂的 RUN 指令使用反斜杠 \ 分行。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y pip \</span></span><br><span class="line"><span class="bash">  git-1.9.3.1 \</span></span><br><span class="line"><span class="bash">  wget-1.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">  yum clean all</span></span><br></pre></td></tr></table></figure><p>如果将 RUN apt-get update 和 apt-get install 拆解为两条命令，会导致缓存问题记忆后续的 install 失败。下图从左边修改最后一行再次构建镜像是时，Docker 发现 RUN apt-get update 指令一样。这样会导致 apt-get update 不再执行，使用缓存镜像。后面使用 apt-get install 安装的是过时的 curl 和 nginx 版本。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_4.png" alt="docker_introduction_4"><br><br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_5.png" alt="docker_introduction_5"></p><h6 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h6><p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P时，会自动随机映射 EXPOSE 的端口。<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_6.png" alt="docker_introduction_6"></p><h6 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h6><p>为容器化服务提供必要的环境变量。</p><h6 id="ADD-和-COPY"><a href="#ADD-和-COPY" class="headerlink" title="ADD 和 COPY"></a>ADD 和 COPY</h6><p><strong>优先使用 COPY，COPY 语义更明确。</strong>ADD 能够将本地 tar 文件自动提取到镜像中，这种场景用 ADD 更合适。如果 Dockerfile 中需要 COPY 多个上下文中的文件，不要一次性 COPY 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。最好的做法是按文件组织结构以及功能去 COPY 文件。</p><h6 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h6><p>建议使用 VOLUME 来管理镜像中的可变部分和用户可以改变的部分，如数据库存储文件、配置文件、容器创建的文件和目录等。</p><h6 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h6><p>用于指定容器的一个目录， 容器启动时执行的命令会在该目录下执行。为了清晰性和可靠性，应该总是在 WORKDIR 中使用绝对路径。</p><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 .dockerignore</span></span><br><span class="line"><span class="comment"># 使用多阶段构建</span></span><br><span class="line"><span class="comment"># 避免安装不必要的包</span></span><br><span class="line"><span class="comment"># 一个容器只运行一个进程</span></span><br><span class="line"><span class="comment"># 镜像层数尽可能少</span></span><br><span class="line"><span class="comment"># 清除缓存的包 （apt-get clean）</span></span><br><span class="line"><span class="comment"># 充分利用构建缓存</span></span><br></pre></td></tr></table></figure><h5 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h5><p><code>docker commit</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_7.png" alt="docker_introduction_7"></p><h4 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h4><p><strong>Docker 17.05 or higher</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一阶段构建生成可执行文件</span></span><br><span class="line"><span class="comment"># builder</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span> AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.mod /src/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.sum /src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go mod download</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /src &amp;&amp; go build -ldflags <span class="string">'-linkmode "external" --extldflags "-static"'</span> cmd/ipasd/ipasd.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段构建，使用第一阶段的构建产物</span></span><br><span class="line"><span class="comment"># runtime</span></span><br><span class="line"><span class="keyword">FROM</span> ineva/alpine:<span class="number">3.10</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"Steven &lt;s@ineva.cn&gt;"</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /src/ipasd /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /docker-entrypoint.sh</span></span><br></pre></td></tr></table></figure><h4 id="镜像的存储和传输"><a href="#镜像的存储和传输" class="headerlink" title="镜像的存储和传输"></a>镜像的存储和传输</h4><p><code>docker pull</code> <code>docker push</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker镜像完整路径</span></span><br><span class="line">&lt;registry&gt;/&lt;repository&gt;/&lt;image&gt;:&lt;tag&gt;</span><br><span class="line">10.0.0.1:5000/blazehu/myapache:v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker默认registry</span></span><br><span class="line">docker.io(<span class="string">"dockerhub"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Insecure-registry配置</span></span><br><span class="line">/etc/docker/daemon.json</span><br><span class="line"><span class="string">"insecure-registries"</span>: [<span class="string">"10.0.0.0/8"</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">#无法访问 registry? </span></span><br><span class="line">docker save –o xxx.tgz <span class="variable">$&#123;imageId&#125;</span>   将镜像打包成文件</span><br><span class="line">docker load -i xxx.tgz              将镜像从文件中加到本地的docker存储</span><br></pre></td></tr></table></figure><h4 id="docker-run-做了什么？"><a href="#docker-run-做了什么？" class="headerlink" title="docker run 做了什么？"></a>docker run 做了什么？</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/docker_introduction_8.png" alt="docker_introduction_8"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker               客户端命令行工具</span><br><span class="line">dockerd              守护进程，容器的元数据管理、镜像管理、容器运行时及网络、存储等插件</span><br><span class="line">containerd           负责容器的生命周期管理，向上为Docker守护进程提供gRPC接口，屏蔽底层细节，向下通过containerd-shim操控RunC，使得上层Docker守护进程和底层容器运行时可独立升级发展</span><br><span class="line">containerd-shim      处理 <span class="built_in">exit</span> code，wait4() 等问题，实现daemonless容器</span><br><span class="line">runc                 专注于容器实现，包括环境隔离、资源限制、容器安全等</span><br></pre></td></tr></table></figure><h4 id="Docker-Client基础命令总览"><a href="#Docker-Client基础命令总览" class="headerlink" title="Docker Client基础命令总览"></a>Docker Client基础命令总览</h4><h5 id="Docker仓库相关"><a href="#Docker仓库相关" class="headerlink" title="Docker仓库相关"></a>Docker仓库相关</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search</span><br><span class="line">docker pull</span><br><span class="line">docker push</span><br><span class="line">docker login</span><br></pre></td></tr></table></figure><h5 id="查看镜像和容器信息"><a href="#查看镜像和容器信息" class="headerlink" title="查看镜像和容器信息"></a>查看镜像和容器信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker images</span><br><span class="line">docker logs</span><br><span class="line">docker port</span><br><span class="line">docker diff</span><br><span class="line">docker <span class="built_in">history</span></span><br></pre></td></tr></table></figure><h5 id="操作容器和镜像"><a href="#操作容器和镜像" class="headerlink" title="操作容器和镜像"></a>操作容器和镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run</span><br><span class="line">docker attach</span><br><span class="line">docker start</span><br><span class="line">docker stop</span><br><span class="line">docker rm</span><br><span class="line">docker rmi</span><br><span class="line">docker tag</span><br><span class="line">docker commit</span><br><span class="line">docker save</span><br><span class="line">docker build</span><br><span class="line">docker load</span><br><span class="line">docker <span class="built_in">exec</span></span><br></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是容器？</title>
      <link href="/2019/03/14/cloudnative/container/"/>
      <url>/2019/03/14/cloudnative/container/</url>
      
        <content type="html"><![CDATA[<p>容器是一种操作系统虚拟化技术，内核功能的集合，提供给应用独立的运行环境，并实现资源的控制和隔离。Docker 不等同于容器，容器历史要比Docker 长得多。</p><a id="more"></a><h4 id="1-容器技术发展历史"><a href="#1-容器技术发展历史" class="headerlink" title="1. 容器技术发展历史"></a>1. 容器技术发展历史</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/container_1.png" alt="container_1"></p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1972 </span>  UNIX发布了Chroot(Change Root)工具 </span><br><span class="line"><span class="symbol">2000 </span>  FreeBSD发布了Jails，它可以将服务器划分成多个称为Jail的虚拟分区，为⽤用户提供 ⼲干净独立的运⾏行行时环境 </span><br><span class="line"><span class="symbol">2005 </span>  SWsoft基于Linux <span class="number">2.6.15</span> 内核发布了OpenVZ，实现了操作系统层面的虚拟化 </span><br><span class="line"><span class="symbol">2006 </span>  Google发布了Process containers进程容器内核补丁，可以隔离进程 的CPU，内存， 磁盘IO，网络IO等资源; <span class="number">2008</span>更更名为 Cgroup(Control Groups )，Cgroup可以对进 程分组配置，从⽽而可以以组为单位来隔离资源</span><br><span class="line"><span class="symbol">2008 </span>  Linux社区合作开发了LXC (Linux Containers)容器器，利用Namespace来为容器提供 独立的名字空间，包括进程树、网络、用户组及文件系统等，再利用Capabilities限 制容器器内敏敏感系统调⽤用。 </span><br><span class="line"><span class="symbol">2011 </span>  CloudFoundry基于LXC构建了Warden容器器(后放弃LXC⾃自自研) </span><br><span class="line"><span class="symbol">2013 </span>  Google开源了了其鼎鼎有名的Borg平台使用的容器技术lmctfy (<span class="keyword">Let</span> me contain that <span class="keyword">for</span> you) </span><br><span class="line"><span class="symbol">2013 </span>  DotCloud开源了Docker容器，最初基于LXC构建，定义了Docker分层镜像格式</span><br><span class="line"><span class="symbol">2014 </span>  CoreOS推出了了了RKT(Rocket)容器 </span><br><span class="line"><span class="symbol">2015 </span>  OCI (<span class="keyword">Open</span> Container Initiative)组织成立，旨在推进容器技术的标准化工作</span><br><span class="line"><span class="symbol">2015 </span>  Docker的libcontainer演化出了RunC项目 </span><br><span class="line"><span class="symbol">2016 </span>  Docker在架构上分离出了容器器运⾏行行时环境Containered，原数据管理和运行时环境分离</span><br><span class="line"><span class="symbol">2017 </span>  Docker社区开源项目重命名为Moby，基于Moby开源项⽬目构建Docker社区版，在社 区版基础上构建 Docker企业版。从此Docker成为商业产品名字，而原Docker项目化 身Moby继续发展</span><br></pre></td></tr></table></figure><br><h4 id="2-容器与传统虚拟机的区别"><a href="#2-容器与传统虚拟机的区别" class="headerlink" title="2. 容器与传统虚拟机的区别"></a>2. 容器与传统虚拟机的区别</h4><ul><li>更高效的利用系统资源</li><li>一致的运行环境</li><li>持续交付和部署</li><li>更轻松的迁移</li><li>更轻松的维护和扩展<br><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/container_2.png" alt="container_2"></li></ul><p><strong>容器相比传统的虚拟机有如下几点优势：</strong></p><ol><li>是容器比虚拟机要小的多，镜像小，传统的一个虚拟机的镜像小的几G，大的上百G，而容器的镜像往往都是几十MB，轻量级的容器镜像意味着可以更方便的进行传输。</li><li>是可以更细粒度的划分CPU和内存等计算资源，虚拟机最小的也是1C1G，而容器可以划分成更小的单位比如 0.1核，128 MiB，非常适用于平时资源使用率不高的业务。因为容器做好了资源的隔离，通过容器在一台机器上混布，可以极大的提高资源利用率，降低成本。</li><li>是容器启动时间比虚拟机要快，虚拟机的启动时间是分钟级的，而容器理论上在1秒之内能启动成百上千个。非常适用于业务量动态变化快的业务。</li></ol><p>容器技术改变应用交付，在以前应用程序的交付是通过源码或可执行文件交付，同时必须包含一个如何部署应用程序的说明文档。往往部署一个稍复杂点的程序，都需要两到三天的时间。容器可以将应用程序和依赖环境打包起来，只要应用程序的容器在一个环境运行起来，在其他任何环境下也能运行，从交付代码变成交付容器，<span style="color:red">从两到三天的时间缩短到5分钟，</span>极大提高交付效率。</p><h4 id="3-Why-Docker？Build-Once-Run-Anywhere"><a href="#3-Why-Docker？Build-Once-Run-Anywhere" class="headerlink" title="3. Why Docker？Build Once, Run Anywhere"></a>3. Why Docker？Build Once, Run Anywhere</h4><p>创新性地解决了应用打包和分发技术难题。通过友好的设计和封装，大大降低了容器技术的使用门槛。</p><br>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1154. 一年中的第几天</title>
      <link href="/2018/07/10/leetcode-cn/1154/"/>
      <url>/2018/07/10/leetcode-cn/1154/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个字符串 date ，按 YYYY-MM-DD 格式表示一个 现行公元纪年法 日期。请你计算并返回该日期是当年的第几天。</p><p>通常情况下，我们认为 1 月 1 日是每年的第 1 天，1 月 2 日是每年的第 2 天，依此类推。每个月的天数与现行公元纪年法（格里高利历）一致。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">date.length == <span class="number">10</span></span><br><span class="line">date[<span class="number">4</span>] == date[<span class="number">7</span>] == <span class="string">'-'</span>，其他的 date[i] 都是数字</span><br><span class="line">date 表示的范围从 <span class="number">1900</span> 年 <span class="number">1</span> 月 <span class="number">1</span> 日至 <span class="number">2019</span> 年 <span class="number">12</span> 月 <span class="number">31</span> 日</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">date</span> = <span class="string">"2019-01-09"</span></span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">date</span> = <span class="string">"2019-02-10"</span></span><br><span class="line">输出：<span class="number">41</span></span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">date</span> = <span class="string">"2003-03-01"</span></span><br><span class="line">输出：<span class="number">60</span></span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">date</span> = <span class="string">"2004-03-01"</span></span><br><span class="line">输出：<span class="number">61</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="四年一闰，百年不闰，四百年再闰"><a href="#四年一闰，百年不闰，四百年再闰" class="headerlink" title="四年一闰，百年不闰，四百年再闰"></a>四年一闰，百年不闰，四百年再闰</h4><p>是否闰年：isLeap := year%400 == 0 || (year%4 == 0 &amp;&amp; year%100 != 0)</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dayOfYear</span><span class="params">(date <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := strings.Split(date, <span class="string">"-"</span>)</span><br><span class="line">year, _ := strconv.Atoi(res[<span class="number">0</span>])</span><br><span class="line">month, _ := strconv.Atoi(res[<span class="number">1</span>])</span><br><span class="line">day, _ := strconv.Atoi(res[<span class="number">2</span>])</span><br><span class="line">isLeap := year%<span class="number">400</span> == <span class="number">0</span> || (year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">monthDay := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; month; i++ &#123;</span><br><span class="line">day += monthDay[i]</span><br><span class="line"><span class="keyword">if</span> isLeap &amp;&amp; i == <span class="number">2</span> &#123;</span><br><span class="line">day += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> day</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(dayOfYear(<span class="string">"2019-01-09"</span>))</span><br><span class="line">fmt.Println(dayOfYear(<span class="string">"2019-02-10"</span>))</span><br><span class="line">fmt.Println(dayOfYear(<span class="string">"2003-03-01"</span>))</span><br><span class="line">fmt.Println(dayOfYear(<span class="string">"2004-03-01"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/day-of-the-year" target="_blank" rel="noopener">https://leetcode-cn.com/problems/day-of-the-year</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>475. 供暖器</title>
      <link href="/2018/06/10/leetcode-cn/475/"/>
      <url>/2018/06/10/leetcode-cn/475/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p><p>在加热器的加热半径范围内的每个房屋都可以获得供暖。</p><p>现在，给出位于一条水平线上的房屋 houses 和供暖器 heaters 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。</p><p>说明：所有供暖器都遵循你的半径标准，加热的半径也一样。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= houses.length, heaters.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="symbol">1 </span>&lt;= houses[i], heaters[i] &lt;= <span class="number">109</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: houses = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], heaters = [<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 仅在位置<span class="number">2</span>上有一个供暖器。如果我们将加热半径设为<span class="number">1</span>，那么所有房屋就都能得到供暖。</span><br><span class="line"></span><br><span class="line">输入: houses = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], heaters = [<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 在位置<span class="number">1</span>, <span class="number">4</span>上有两个供暖器。我们需要将加热半径设为<span class="number">1</span>，这样所有房屋就都能得到供暖。</span><br><span class="line"></span><br><span class="line">输入：houses = [<span class="number">1</span>,<span class="number">5</span>], heaters = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>分析：排序后从左开始遍历每一个房屋，求每个房屋到最近供暖器的距离，然后找出最大的值。<br>求每个房屋到最近供暖器的距离：相邻的左边供暖器和右边供暖器距离里取小的值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRadius</span><span class="params">(houses []<span class="keyword">int</span>, heaters []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">radius <span class="keyword">int</span></span><br><span class="line">i      <span class="keyword">int</span></span><br><span class="line">j      <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// sort</span></span><br><span class="line">sort.Ints(houses)</span><br><span class="line">sort.Ints(heaters)</span><br><span class="line">t := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="built_in">len</span>(houses); j++ &#123;</span><br><span class="line">tmp := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = t; i &lt; <span class="built_in">len</span>(heaters); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> heaters[i] &lt; houses[j] &#123;</span><br><span class="line">tmp = houses[j] - heaters[i]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tmp != <span class="number">0</span> &#123;</span><br><span class="line">tmp = <span class="keyword">int</span>(math.Min(<span class="keyword">float64</span>(tmp), <span class="keyword">float64</span>(heaters[i]-houses[j])))</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">t = i - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp = heaters[i] - houses[j]</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">t = i - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">radius = <span class="keyword">int</span>(math.Max(<span class="keyword">float64</span>(radius), <span class="keyword">float64</span>(tmp)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b []<span class="keyword">int</span></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = []<span class="keyword">int</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(findRadius(a, b))</span><br><span class="line"></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(findRadius(a, b))</span><br><span class="line"></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line">b = []<span class="keyword">int</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(findRadius(a, b))</span><br><span class="line"></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">282475249</span>, <span class="number">622650073</span>, <span class="number">984943658</span>, <span class="number">144108930</span>, <span class="number">470211272</span>, <span class="number">101027544</span>, <span class="number">457850878</span>, <span class="number">458777923</span>&#125;</span><br><span class="line">b = []<span class="keyword">int</span>&#123;<span class="number">823564440</span>, <span class="number">115438165</span>, <span class="number">784484492</span>, <span class="number">74243042</span>, <span class="number">114807987</span>, <span class="number">137522503</span>, <span class="number">441282327</span>, <span class="number">16531729</span>, <span class="number">823378840</span>, <span class="number">143542612</span>&#125;</span><br><span class="line">fmt.Println(findRadius(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/heaters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/heaters</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34. 在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/2018/04/04/leetcode-cn/34/"/>
      <url>/2018/04/04/leetcode-cn/34/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">105</span></span><br><span class="line"><span class="number">-109</span> &lt;= nums[i] &lt;= <span class="number">109</span></span><br><span class="line">nums 是一个非递减数组</span><br><span class="line"><span class="number">-109</span> &lt;= target &lt;= <span class="number">109</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">输入：nums = [], target = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>通过二分查找找到目标数字在数组中的下标，然后向该下标左右两边搜索</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line">targetIndex := searchIndex(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, target)</span><br><span class="line"><span class="keyword">if</span> targetIndex == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j = targetIndex; j &lt; <span class="built_in">len</span>(nums) &amp;&amp; nums[j] == target; j++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i = targetIndex; i &gt;= <span class="number">0</span> &amp;&amp; nums[i] == target; i-- &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;i + <span class="number">1</span>, j - <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchIndex</span><span class="params">(nums []<span class="keyword">int</span>, i, j, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := (i + j) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[index] == target &amp;&amp; i &lt; j &#123;</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[index] &gt; target &amp;&amp; i &lt; j &#123;</span><br><span class="line">j = index</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[index] &lt; target &amp;&amp; i &lt; j &#123;</span><br><span class="line">i = index + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> searchIndex(nums, i, j, target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ans is : "</span>, searchRange([]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, <span class="number">8</span>))</span><br><span class="line">fmt.Println(<span class="string">"ans is : "</span>, searchRange([]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, <span class="number">6</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>29. 两数相除</title>
      <link href="/2018/03/29/leetcode-cn/29/"/>
      <url>/2018/03/29/leetcode-cn/29/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend 除以除数 divisor 得到的商。<br>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>被除数和除数均为 32 位有符号整数。 除数不为 0。<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: dividend = <span class="number">10</span>, divisor = <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: <span class="number">10</span>/<span class="number">3</span> = truncate(<span class="number">3.33333</span>..) = truncate(<span class="number">3</span>) = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">7</span>, divisor = <span class="number">-3</span></span><br><span class="line">输出: <span class="number">-2</span></span><br><span class="line">解释: <span class="number">7</span>/<span class="number">-3</span> = truncate(<span class="number">-2.33333</span>..) = <span class="number">-2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>使用递归和位运算。除数以指数形式增长，计算速度快。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 每次找到最大的n保证 x &gt;= y * pow(<span class="number">2</span>, n)</span><br><span class="line"><span class="number">2.</span> divide(x, y) = pow(<span class="number">2</span>, n) + divide(x - y * pow(<span class="number">2</span>, n), y) </span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> x &lt; y: divide(x, y) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">比如 ：</span><br><span class="line">divide(<span class="number">14</span>, <span class="number">3</span>) = divide(<span class="number">14</span> - <span class="number">12</span>, <span class="number">3</span>) + pow(<span class="number">2</span>, <span class="number">2</span>) </span><br><span class="line">              = divide(<span class="number">2</span>, <span class="number">3</span>) + <span class="number">4</span></span><br><span class="line">              = <span class="number">0</span> + <span class="number">4</span> </span><br><span class="line">              = <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="keyword">int</span>, divisor <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">abs := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">pow := <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">s := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">s *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line">min := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">i, a, b := <span class="number">0</span>, abs(dividend), abs(divisor)</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span> || a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> b &lt;= a &#123;</span><br><span class="line">b = b &lt;&lt; <span class="number">1</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">res := pow(i<span class="number">-1</span>) + divide(a-(b&gt;&gt;<span class="number">1</span>), abs(divisor))</span><br><span class="line"><span class="keyword">if</span> (dividend ^ divisor) &lt; <span class="number">0</span> &#123;</span><br><span class="line">res = -res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(res, (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(divide(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">12</span>, <span class="number">-3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">14</span>, <span class="number">3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-2147483648</span>, <span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/divide-two-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/divide-two-integers</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28. 实现 strStr()</title>
      <link href="/2018/03/28/leetcode-cn/28/"/>
      <url>/2018/03/28/leetcode-cn/28/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现 strStr() 函数。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。<br>如果不存在，则返回 -1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"hello"</span>, <span class="attr">needle</span> = <span class="string">"ll"</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"aaaaa"</span>, <span class="attr">needle</span> = <span class="string">"bba"</span></span><br><span class="line">输出: -<span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l1, l2 := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line"><span class="keyword">if</span> l2 &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1 &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1 &lt; l2 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">x := i</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt;= l1 || j &gt;= l2 &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> haystack[i] == needle[j] &#123;</span><br><span class="line"><span class="keyword">if</span> j == l2<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i - l2 + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i = x + <span class="number">1</span></span><br><span class="line">x++</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="string">"hello"</span>, <span class="string">"ll"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"aaaaa"</span>, <span class="string">"bba"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"helllllo"</span>, <span class="string">"ll"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"mississippi"</span>, <span class="string">"issip"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/implement-strstr" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-strstr</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27. 移除元素</title>
      <link href="/2018/03/27/leetcode-cn/27/"/>
      <url>/2018/03/27/leetcode-cn/27/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。<br>你不需要考虑数组中超出新长度后面的元素。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。</span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> val != nums[i] &#123;</span><br><span class="line">nums[index] = nums[i]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums = nums[:index]</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n, k := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, <span class="number">3</span></span><br><span class="line">fmt.Println(removeElement(n, k))</span><br><span class="line">n, k = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, <span class="number">2</span></span><br><span class="line">fmt.Println(removeElement(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26. 删除排序数组中的重复项</title>
      <link href="/2018/03/26/leetcode-cn/26/"/>
      <url>/2018/03/26/leetcode-cn/26/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span>。 </span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> length == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">pre, index := nums[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> pre != nums[i] &#123;</span><br><span class="line">pre = nums[i]</span><br><span class="line">index++</span><br><span class="line">nums[index] = nums[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums = nums[:index+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25. K 个一组翻转链表</title>
      <link href="/2018/03/25/leetcode-cn/25/"/>
      <url>/2018/03/25/leetcode-cn/25/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。<br>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给你这个链表：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">2</span> 时，应当返回: <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">3</span> 时，应当返回: <span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lists    []ListNode</span><br><span class="line">newLists []ListNode</span><br><span class="line">)</span><br><span class="line">p := head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">length := <span class="built_in">len</span>(lists)</span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">1</span> || length &lt; k &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">newLists = <span class="built_in">make</span>([]ListNode, length)</span><br><span class="line">reverse := <span class="function"><span class="keyword">func</span><span class="params">(s []ListNode, x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt;= j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">newLists[x+i], newLists[x+j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length/k; i ++ &#123;</span><br><span class="line">x := i * k</span><br><span class="line">reverse(lists[x:k+x], x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := (length / k) * k; i &lt; length; i++ &#123;</span><br><span class="line">newLists[i] = lists[i]</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;newLists[<span class="number">0</span>]</span><br><span class="line">point := head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(newLists); i++ &#123;</span><br><span class="line">point.Next = &amp;newLists[i]</span><br><span class="line">point = point.Next</span><br><span class="line">&#125;</span><br><span class="line">point.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n, k := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">3</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), <span class="number">3</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">2</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;&#125;), <span class="number">2</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24. 两两交换链表中的节点</title>
      <link href="/2018/03/24/leetcode-cn/24/"/>
      <url>/2018/03/24/leetcode-cn/24/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, 你应该返回 <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lists []ListNode</span><br><span class="line">p := head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(lists)<span class="number">-1</span>; i += <span class="number">2</span> &#123;</span><br><span class="line">lists[i], lists[i+<span class="number">1</span>] = lists[i+<span class="number">1</span>], lists[i]</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;lists[<span class="number">0</span>]</span><br><span class="line">point := head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(lists); i++ &#123;</span><br><span class="line">point.Next = &amp;lists[i]</span><br><span class="line">point = point.Next</span><br><span class="line">&#125;</span><br><span class="line">point.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span><br><span class="line">printListNode(swapPairs(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23. 合并K个排序链表</title>
      <link href="/2018/03/23/leetcode-cn/23/"/>
      <url>/2018/03/23/leetcode-cn/23/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lists) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">mix    <span class="keyword">int</span></span><br><span class="line">nilNum <span class="keyword">int</span></span><br><span class="line">length <span class="keyword">int</span></span><br><span class="line">l      *ListNode</span><br><span class="line">p      *ListNode</span><br><span class="line">pre    *ListNode</span><br><span class="line">)</span><br><span class="line">length = <span class="built_in">len</span>(lists)</span><br><span class="line">l = &amp;ListNode&#123;&#125;</span><br><span class="line">p = l</span><br><span class="line">pre = p</span><br><span class="line"><span class="keyword">const</span> MaxNum = <span class="number">999999999</span></span><br><span class="line"><span class="keyword">for</span> nilNum &lt; length &#123;</span><br><span class="line">mix = MaxNum</span><br><span class="line">nilNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> lists[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">nilNum++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix &gt; lists[i].Val &#123;</span><br><span class="line">mix = lists[i].Val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> lists[i] != <span class="literal">nil</span> &amp;&amp; mix == lists[i].Val &#123;</span><br><span class="line">p.Val = mix</span><br><span class="line">lists[i] = lists[i].Next</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nilNum &lt; length &amp;&amp; mix != MaxNum &#123;</span><br><span class="line">p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">pre = p</span><br><span class="line">p = p.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix == MaxNum &#123;</span><br><span class="line">pre.Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nilNum == length &amp;&amp; mix == MaxNum &amp;&amp; p == pre &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">6</span>&#125;)&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22. 括号生成</title>
      <link href="/2018/03/22/leetcode-cn/22/"/>
      <url>/2018/03/22/leetcode-cn/22/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">3</span></span><br><span class="line">输出：[</span><br><span class="line">       <span class="string">"((()))"</span>,</span><br><span class="line">       <span class="string">"(()())"</span>,</span><br><span class="line">       <span class="string">"(())()"</span>,</span><br><span class="line">       <span class="string">"()(())"</span>,</span><br><span class="line">       <span class="string">"()()()"</span></span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-递归"><a href="#解法：-递归" class="headerlink" title="解法： 递归"></a>解法： 递归</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(l, r, n <span class="keyword">int</span>, str <span class="keyword">string</span>, strList *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> l &lt; r &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">2</span>*n &#123;</span><br><span class="line">*strList = <span class="built_in">append</span>(*strList, str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l &lt; n &#123;</span><br><span class="line">backtrack(l+<span class="number">1</span>, r, n, str+<span class="string">"("</span>, strList)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r &lt; n &#123;</span><br><span class="line">backtrack(l, r+<span class="number">1</span>, n, str+<span class="string">")"</span>, strList)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">strList := &amp;[]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">backtrack(<span class="number">0</span>, <span class="number">0</span>, n, <span class="string">""</span>, strList)</span><br><span class="line"><span class="keyword">return</span> *strList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">1</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">2</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">3</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/2018/03/21/leetcode-cn/21/"/>
      <url>/2018/03/21/leetcode-cn/21/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">l *ListNode</span><br><span class="line">p *ListNode</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">l = &amp;ListNode&#123;&#125;</span><br><span class="line">p = l</span><br><span class="line"><span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Val = l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Val = l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1.Val &gt; l2.Val &#123;</span><br><span class="line">p.Val = l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Val = l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</span><br><span class="line">printListNode(a)</span><br><span class="line">printListNode(b)</span><br><span class="line">printListNode(mergeTwoLists(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="/2018/03/20/leetcode-cn/20/"/>
      <url>/2018/03/20/leetcode-cn/20/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">"()"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"(]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"([)]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-栈"><a href="#解法：-栈" class="headerlink" title="解法： 栈"></a>解法： 栈</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">stack *list.List</span><br><span class="line">)</span><br><span class="line">stack = list.New()</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> item == <span class="number">40</span> || item == <span class="number">91</span> || item == <span class="number">123</span> &#123;</span><br><span class="line">stack.PushBack(item)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">x := stack.Back()</span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">r := x.Value.(<span class="keyword">int32</span>)</span><br><span class="line"><span class="keyword">if</span> item == <span class="number">41</span> &amp;&amp; r == <span class="number">40</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">93</span> &amp;&amp; r == <span class="number">91</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">125</span> &amp;&amp; r == <span class="number">123</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"container/list"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"()"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"[()]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"(&#123;)&#125;"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"()[]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"([&#123;&#125;])"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"(])"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19. 删除链表的倒数第N个节点</title>
      <link href="/2018/03/19/leetcode-cn/19/"/>
      <url>/2018/03/19/leetcode-cn/19/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。给定的 n 保证是有效的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定一个链表: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, 和 n = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><p>扫描一遍，使用数组存储所有节点</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">p     *ListNode</span><br><span class="line">pList []*ListNode</span><br><span class="line">)</span><br><span class="line">p = head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">pList = <span class="built_in">append</span>(pList, p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">l := <span class="built_in">len</span>(pList)</span><br><span class="line"><span class="keyword">if</span> l == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">pre := l - n - <span class="number">1</span></span><br><span class="line">next := l - n + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> next &gt;= l &#123;</span><br><span class="line">pList[pre].Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> pre &lt; <span class="number">0</span> &#123;</span><br><span class="line">head = head.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pList[pre].Next = pList[next]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h5><p>i, j 双指针初始化为表头和表头后 n 个节点。i 和 j 双指针保持窗口大小为 n （间距）同时向后移动，当 j 移动到表尾， i 指向的就是我们要找的倒数第 n 个节点。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;)</span><br><span class="line">printListNode(a)</span><br><span class="line">printListNode(removeNthFromEnd(a, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. 四数之和</title>
      <link href="/2018/03/18/leetcode-cn/18/"/>
      <url>/2018/03/18/leetcode-cn/18/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>答案中不可以包含重复的四元组。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>]，和 target = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">-2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">retNum := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">retMiddleNums := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">retNumStr := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">numLength := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; numLength<span class="number">-3</span>; x++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := x + <span class="number">1</span>; i &lt; numLength<span class="number">-2</span>; i++ &#123;</span><br><span class="line">k := i + <span class="number">1</span></span><br><span class="line">j := numLength - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k &lt; j &#123;</span><br><span class="line">a, b, c, d := nums[i], nums[k], nums[j], nums[x]</span><br><span class="line"><span class="keyword">if</span> a+b+c+d &lt; target &#123;</span><br><span class="line">k++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a+b+c+d &gt; target &#123;</span><br><span class="line">j--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">subRet := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, a, b, c, d)</span><br><span class="line">sort.Ints(subRet)</span><br><span class="line"><span class="keyword">var</span> numStrList []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> numStr <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(subRet); i++ &#123;</span><br><span class="line">numStrList = <span class="built_in">append</span>(numStrList, strconv.Itoa(subRet[i]))</span><br><span class="line">&#125;</span><br><span class="line">numStr = strings.Join(numStrList, <span class="string">","</span>)</span><br><span class="line">retMiddleNums[numStr] = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (b == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (c == nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">k++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> numStr := <span class="keyword">range</span> retMiddleNums &#123;</span><br><span class="line">retNumStr = <span class="built_in">append</span>(retNumStr, numStr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(retNumStr); index++ &#123;</span><br><span class="line">strNumList := strings.Split(retNumStr[index], <span class="string">","</span>)</span><br><span class="line"><span class="keyword">var</span> retNumItem []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strNumList); i++ &#123;</span><br><span class="line">numItem, _ := strconv.Atoi(strNumList[i])</span><br><span class="line">retNumItem = <span class="built_in">append</span>(retNumItem, numItem)</span><br><span class="line">&#125;</span><br><span class="line">retNum = <span class="built_in">append</span>(retNum, retNumItem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums, target := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">4</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/4sum</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17. 电话号码的字母组合</title>
      <link href="/2018/03/17/leetcode-cn/17/"/>
      <url>/2018/03/17/leetcode-cn/17/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>给出数字到字母的映射如下（与电话按键相同）。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1 不对应任何字母。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：<span class="string">"23"</span></span><br><span class="line">输出：[<span class="string">"ad"</span>, <span class="string">"ae"</span>, <span class="string">"af"</span>, <span class="string">"bd"</span>, <span class="string">"be"</span>, <span class="string">"bf"</span>, <span class="string">"cd"</span>, <span class="string">"ce"</span>, <span class="string">"cf"</span>].</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法（递归求解）"><a href="#解法（递归求解）" class="headerlink" title="解法（递归求解）"></a>解法（递归求解）</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">all []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(digits) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">numMap := <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"2"</span>: &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;,</span><br><span class="line"><span class="string">"3"</span>: &#123;<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;,</span><br><span class="line"><span class="string">"4"</span>: &#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;,</span><br><span class="line"><span class="string">"5"</span>: &#123;<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>&#125;,</span><br><span class="line"><span class="string">"6"</span>: &#123;<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>&#125;,</span><br><span class="line"><span class="string">"7"</span>: &#123;<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>&#125;,</span><br><span class="line"><span class="string">"8"</span>: &#123;<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>&#125;,</span><br><span class="line"><span class="string">"9"</span>: &#123;<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">getTwoLetterCombinations := <span class="function"><span class="keyword">func</span><span class="params">(num1, num2 []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">strList []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">l1, l2 := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; l1 &#123;</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j &lt; l2 &#123;</span><br><span class="line">strList = <span class="built_in">append</span>(strList, num1[i])</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; l2*l1 &#123;</span><br><span class="line">strList[i] += num2[i%l2]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strList</span><br><span class="line">&#125;</span><br><span class="line">numStr := <span class="keyword">string</span>(digits[<span class="number">0</span>])</span><br><span class="line">all = numMap[numStr]</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">1</span>; index &lt; <span class="built_in">len</span>(digits); index++ &#123;</span><br><span class="line">numStr := <span class="keyword">string</span>(digits[index])</span><br><span class="line">numStrList := numMap[numStr]</span><br><span class="line">all = getTwoLetterCombinations(all, numStrList)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"23"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"2"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"27"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"234"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"34"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16. 最接近的三数之和</title>
      <link href="/2018/03/16/leetcode-cn/16/"/>
      <url>/2018/03/16/leetcode-cn/16/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">-1</span>，<span class="number">2</span>，<span class="number">1</span>，<span class="number">-4</span>], 和 target = <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 <span class="number">2.</span> (<span class="number">-1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>).</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">l       <span class="keyword">int</span></span><br><span class="line">r       <span class="keyword">int</span></span><br><span class="line">t       <span class="keyword">int</span></span><br><span class="line">sumList []<span class="keyword">int</span></span><br><span class="line">sum     <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">abs := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">-1</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">length := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> x &lt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> y - x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> y - x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> r &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> l &gt;= r &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">m := nums[l] + nums[r]</span><br><span class="line">perfectValue := target - m</span><br><span class="line">dValue, direction := <span class="number">-1</span>, <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(nums); index++ &#123;</span><br><span class="line"><span class="keyword">if</span> index == l || index == r &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[index] == perfectValue &#123;</span><br><span class="line"><span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line">x, y := abs(nums[index] - perfectValue)</span><br><span class="line"><span class="keyword">if</span> dValue &lt; <span class="number">0</span> &#123;</span><br><span class="line">dValue, direction, t = x, y, nums[index]</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> dValue &gt; x &#123;</span><br><span class="line">dValue, direction, t = x, y, nums[index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sumList = <span class="built_in">append</span>(sumList, m+t)</span><br><span class="line"><span class="keyword">if</span> direction &#123;</span><br><span class="line">l++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(sumList)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sumList) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(sumList) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sumList[<span class="number">0</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum = sumList[<span class="number">0</span>]</span><br><span class="line">dValue := length(sum, target)</span><br><span class="line">index := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> index &lt; <span class="built_in">len</span>(sumList) &#123;</span><br><span class="line"><span class="keyword">if</span> dValue &gt; length(sumList[index], target) &#123;</span><br><span class="line">sum = sumList[index]</span><br><span class="line">dValue = length(sum, target)</span><br><span class="line">&#125;</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums, target := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-4</span>&#125;, <span class="number">1</span></span><br><span class="line">fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">55</span>&#125;, <span class="number">3</span></span><br><span class="line">fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>&#125;, <span class="number">12</span></span><br><span class="line">fmt.Println(threeSumClosest(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和</title>
      <link href="/2018/03/15/leetcode-cn/15/"/>
      <url>/2018/03/15/leetcode-cn/15/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>答案中不可以包含重复的三元组。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">retNum := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">numLength := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; (i &lt; numLength<span class="number">-2</span>) &amp;&amp; (nums[i] &lt;= <span class="number">0</span>); i++ &#123;</span><br><span class="line">k := i + <span class="number">1</span></span><br><span class="line">j := numLength - <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &amp;&amp; (nums[i] == nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k &lt; j &#123;</span><br><span class="line">a, b, c := nums[i], nums[k], nums[j]</span><br><span class="line"><span class="keyword">if</span> a+b+c &lt; <span class="number">0</span> &#123;</span><br><span class="line">k++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a+b+c &gt; <span class="number">0</span> &#123;</span><br><span class="line">j--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">subRet := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, a, b, c)</span><br><span class="line">retNum = <span class="built_in">append</span>(retNum, subRet)</span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (b == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (c == nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">k++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">nums = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">nums = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-2</span>&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">nums = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">nums = []<span class="keyword">int</span>&#123;<span class="number">-4</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">nums = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">fmt.Println(threeSum(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. 最长公共前缀</title>
      <link href="/2018/03/14/leetcode-cn/14/"/>
      <url>/2018/03/14/leetcode-cn/14/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>所有输入只包含小写字母 a-z。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span><br><span class="line">输出: <span class="string">"fl"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: [<span class="string">"dog"</span>,<span class="string">"racecar"</span>,<span class="string">"car"</span>]</span><br><span class="line">输出: <span class="string">""</span></span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">index     <span class="keyword">int</span></span><br><span class="line">prefixStr <span class="keyword">uint8</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs[<span class="number">0</span>]) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(strs[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> strIndex := <span class="number">1</span>; strIndex &lt; <span class="built_in">len</span>(strs); strIndex++ &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(strs[strIndex]) &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">&#125;</span><br><span class="line">prefixStr = strs[<span class="number">0</span>][index]</span><br><span class="line"><span class="keyword">if</span> strs[strIndex][index] != prefixStr &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>][:index]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">string</span>&#123;<span class="string">"flower"</span>, <span class="string">"flow"</span>, <span class="string">"flight"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">s = []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"area"</span>, <span class="string">"car"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">s = []<span class="keyword">string</span>&#123;<span class="string">"abcd"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">s = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"ac"</span>&#125;</span><br><span class="line">fmt.Println(longestCommonPrefix(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13. 罗马数字转整数</title>
      <link href="/2018/03/13/leetcode-cn/13/"/>
      <url>/2018/03/13/leetcode-cn/13/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">I 可以放在 V (<span class="number">5</span>) 和 X (<span class="number">10</span>) 的左边，来表示 <span class="number">4</span> 和 <span class="number">9</span>。</span><br><span class="line">X 可以放在 L (<span class="number">50</span>) 和 C (<span class="number">100</span>) 的左边，来表示 <span class="number">40</span> 和 <span class="number">90</span>。 </span><br><span class="line">C 可以放在 D (<span class="number">500</span>) 和 M (<span class="number">1000</span>) 的左边，来表示 <span class="number">400</span> 和 <span class="number">900</span>。</span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 <span class="number">1</span> 到 <span class="number">3999</span> 的范围内。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="string">"III"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="string">"IV"</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="string">"LVIII"</span></span><br><span class="line">输出: <span class="number">58</span></span><br><span class="line">解释: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line">输入: <span class="string">"MCMXCIV"</span></span><br><span class="line">输出: <span class="number">1994</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">num  <span class="keyword">int</span></span><br><span class="line">b    <span class="keyword">int</span></span><br><span class="line">e    <span class="keyword">int</span></span><br><span class="line">flag <span class="keyword">bool</span> <span class="comment">// 用来判断最后一位有效罗马数字是否计算过</span></span><br><span class="line">)</span><br><span class="line">numMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"II"</span>: <span class="number">2</span>, <span class="string">"III"</span>: <span class="number">3</span>, <span class="string">"IV"</span>: <span class="number">4</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"VI"</span>: <span class="number">6</span>, <span class="string">"VII"</span>: <span class="number">7</span>, <span class="string">"VIII"</span>: <span class="number">8</span>, <span class="string">"IX"</span>: <span class="number">9</span>,</span><br><span class="line"><span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"XX"</span>: <span class="number">20</span>, <span class="string">"XXX"</span>: <span class="number">30</span>, <span class="string">"XL"</span>: <span class="number">40</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"LX"</span>: <span class="number">60</span>, <span class="string">"LXX"</span>: <span class="number">70</span>, <span class="string">"LXXX"</span>: <span class="number">80</span>, <span class="string">"XC"</span>: <span class="number">90</span>,</span><br><span class="line"><span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"CC"</span>: <span class="number">200</span>, <span class="string">"CCC"</span>: <span class="number">300</span>, <span class="string">"CD"</span>: <span class="number">400</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"DC"</span>: <span class="number">600</span>, <span class="string">"DCC"</span>: <span class="number">700</span>, <span class="string">"DCCC"</span>: <span class="number">800</span>, <span class="string">"CM"</span>: <span class="number">900</span>,</span><br><span class="line"><span class="string">"M"</span>: <span class="number">1000</span>, <span class="string">"MM"</span>: <span class="number">2000</span>, <span class="string">"MMM"</span>: <span class="number">3000</span>,</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> b, e = <span class="number">0</span>, <span class="number">1</span>; e &lt;= <span class="built_in">len</span>(s); e++ &#123;</span><br><span class="line"><span class="keyword">if</span> numMap[s[b:e]] == <span class="number">0</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line">num += numMap[s[b:e<span class="number">-1</span>]]</span><br><span class="line">b = e - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line">num += numMap[s[b:e]]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">num += numMap[s[b:e<span class="number">-1</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"III"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"IV"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"IX"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"LVIII"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"MCMXCIV"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"DCXXI"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"XIII"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">s = <span class="string">"XI"</span></span><br><span class="line">fmt.Println(romanToInt(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/roman-to-integer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. 整数转罗马数字</title>
      <link href="/2018/03/12/leetcode-cn/12/"/>
      <url>/2018/03/12/leetcode-cn/12/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">I 可以放在 V (<span class="number">5</span>) 和 X (<span class="number">10</span>) 的左边，来表示 <span class="number">4</span> 和 <span class="number">9</span>。</span><br><span class="line">X 可以放在 L (<span class="number">50</span>) 和 C (<span class="number">100</span>) 的左边，来表示 <span class="number">40</span> 和 <span class="number">90</span>。 </span><br><span class="line">C 可以放在 D (<span class="number">500</span>) 和 M (<span class="number">1000</span>) 的左边，来表示 <span class="number">400</span> 和 <span class="number">900</span>。</span><br><span class="line">给定一个整数，将其转为罗马数字。输入确保在 <span class="number">1</span> 到 <span class="number">3999</span> 的范围内。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">3</span></span><br><span class="line">输出: <span class="string">"III"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="number">4</span></span><br><span class="line">输出: <span class="string">"IV"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">9</span></span><br><span class="line">输出: <span class="string">"IX"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line">输入: <span class="number">58</span></span><br><span class="line">输出: <span class="string">"LVIII"</span></span><br><span class="line">解释: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">5</span>:</span><br><span class="line">输入: <span class="number">1994</span></span><br><span class="line">输出: <span class="string">"MCMXCIV"</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">numStr <span class="keyword">string</span></span><br><span class="line">k      <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line">numMap := <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="number">0</span>: &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;,</span><br><span class="line"><span class="number">1</span>: &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;,</span><br><span class="line"><span class="number">2</span>: &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;,</span><br><span class="line"><span class="number">3</span>: &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">1</span> || num &gt; <span class="number">3999</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">numStr = numMap[k][num%<span class="number">10</span>] + numStr</span><br><span class="line">num /= <span class="number">10</span></span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> numStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">3</span></span><br><span class="line">fmt.Println(intToRoman(n))</span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">fmt.Println(intToRoman(n))</span><br><span class="line">n = <span class="number">9</span></span><br><span class="line">fmt.Println(intToRoman(n))</span><br><span class="line">n = <span class="number">58</span></span><br><span class="line">fmt.Println(intToRoman(n))</span><br><span class="line">n = <span class="number">1994</span></span><br><span class="line">fmt.Println(intToRoman(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/integer-to-roman" target="_blank" rel="noopener">https://leetcode-cn.com/problems/integer-to-roman</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11. 盛最多水的容器</title>
      <link href="/2018/03/11/leetcode-cn/11/"/>
      <url>/2018/03/11/leetcode-cn/11/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>你不能倾斜容器，且 n 的值至少为 2。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">49</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">b    <span class="keyword">int</span></span><br><span class="line">e    <span class="keyword">int</span></span><br><span class="line">area <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line">getArea := <span class="function"><span class="keyword">func</span><span class="params">(x1, x2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">x := x1 - x2</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">x *= <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> height[x1] &gt; height[x2] &#123;</span><br><span class="line"><span class="keyword">return</span> height[x2] * x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> height[x1] * x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getMax := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line">b, e = <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> b &lt; e &#123;</span><br><span class="line">area = getMax(getArea(b, e), area)</span><br><span class="line"><span class="keyword">if</span> height[b] &lt; height[e] &#123;</span><br><span class="line">b++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(maxArea(n))</span><br><span class="line">n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(maxArea(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10. 正则表达式匹配</title>
      <link href="/2018/03/10/leetcode-cn/10/"/>
      <url>/2018/03/10/leetcode-cn/10/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aa"</span></span><br><span class="line">p = <span class="string">"a"</span></span><br><span class="line"><span class="section">输出: false</span></span><br><span class="line"><span class="section">解释: "a" 无法匹配 "aa" 整个字符串。</span></span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aa"</span></span><br><span class="line">p = <span class="string">"a*"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span></span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"ab"</span></span><br><span class="line">p = <span class="string">".*"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。</span></span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"aab"</span></span><br><span class="line">p = <span class="string">"c*a*b"</span></span><br><span class="line"><span class="section">输出: true</span></span><br><span class="line"><span class="section">解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。</span></span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">s = <span class="string">"mississippi"</span></span><br><span class="line">p = <span class="string">"mis*is*p*."</span></span><br><span class="line"><span class="section">输出: false</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">strList := regexp.MustCompile(p).FindAllString(s, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(strList); index++ &#123;</span><br><span class="line"><span class="keyword">if</span> strList[index] == s &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">    matches := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'.'</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f := <span class="built_in">make</span>([][]<span class="keyword">bool</span>, m + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(f); i++ &#123;</span><br><span class="line">        f[i] = <span class="built_in">make</span>([]<span class="keyword">bool</span>, n + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'*'</span> &#123;</span><br><span class="line">                f[i][j] = f[i][j] || f[i][j<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">if</span> matches(i, j - <span class="number">1</span>) &#123;</span><br><span class="line">                    f[i][j] = f[i][j] || f[i<span class="number">-1</span>][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> matches(i, j) &#123;</span><br><span class="line">                f[i][j] = f[i][j] || f[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// . 46, * 42</span></span><br><span class="line">s, p := <span class="string">"aa"</span>, <span class="string">"a"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">s, p = <span class="string">"aa"</span>, <span class="string">"a*"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"ab"</span>, <span class="string">".*"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"ab"</span>, <span class="string">".*c"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">s, p = <span class="string">"aab"</span>, <span class="string">"c*a*b"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"mississippi"</span>, <span class="string">"mis*is*p*."</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">false</span>)</span><br><span class="line">s, p = <span class="string">"bbcacbabbcbaaccabc"</span>, <span class="string">"b*a*a*.c*bb*b*.*.*"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"aaacb"</span>, <span class="string">"a*acb"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"aaa"</span>, <span class="string">"a*a"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">s, p = <span class="string">"aaa"</span>, <span class="string">"ab*a*c*a"</span></span><br><span class="line">fmt.Println(isMatch(s, p) == <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/regular-expression-matching" target="_blank" rel="noopener">https://leetcode-cn.com/problems/regular-expression-matching</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9. 回文数</title>
      <link href="/2018/03/09/leetcode-cn/9/"/>
      <url>/2018/03/09/leetcode-cn/9/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">示例</span> <span class="attr">1:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">2:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">-121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从左向右读,</span> <span class="string">为</span> <span class="number">-121</span> <span class="string">。</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">121</span><span class="bullet">-</span> <span class="string">。因此它不是一个回文数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">3:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">10</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">01</span> <span class="string">。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">str := strconv.Itoa(x)</span><br><span class="line">strLength := <span class="built_in">len</span>(str)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; strLength; index++ &#123;</span><br><span class="line"><span class="keyword">if</span> str[index] != str[strLength-index<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">121</span></span><br><span class="line">fmt.Println(isPalindrome(n), <span class="literal">true</span>)</span><br><span class="line">n = <span class="number">-121</span></span><br><span class="line">fmt.Println(isPalindrome(n), <span class="literal">false</span>)</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">fmt.Println(isPalindrome(n), <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. 字符串转换整数 (atoi)</title>
      <link href="/2018/03/08/leetcode-cn/8/"/>
      <url>/2018/03/08/leetcode-cn/8/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><p>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。<br>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。<br>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。<br>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。<br>如果数值超过这个范围，请返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入: "42"</span></span><br><span class="line"><span class="section">输出: 42</span></span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入: "   -42"</span></span><br><span class="line"><span class="section">输出: -42</span></span><br><span class="line"><span class="section">解释: 第一个非空白字符为 '-', 它是一个负号。</span></span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line"><span class="section">输入: "4193 with words"</span></span><br><span class="line"><span class="section">输出: 4193</span></span><br><span class="line"><span class="section">解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。</span></span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line"><span class="section">输入: "words and 987"</span></span><br><span class="line"><span class="section">输出: 0</span></span><br><span class="line"><span class="section">解释: 第一个非空字符是 'w', 但它不是数字或正、负号。</span></span><br><span class="line">     因此无法执行有效的转换。</span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line"><span class="section">输入: "-91283472332"</span></span><br><span class="line"><span class="section">输出: -2147483648</span></span><br><span class="line"><span class="section">解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 </span></span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">f      <span class="keyword">int</span></span><br><span class="line">numStr <span class="keyword">string</span></span><br><span class="line">num    <span class="keyword">int</span></span><br><span class="line">k      <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">ch := str[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> ch == <span class="number">32</span> &#123;</span><br><span class="line">str = str[<span class="number">1</span>:]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ch := str[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> ch == <span class="number">45</span> &#123;</span><br><span class="line">str = str[<span class="number">1</span>:]</span><br><span class="line">f = <span class="number">-1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ch == <span class="number">43</span> &#123;</span><br><span class="line">str = str[<span class="number">1</span>:]</span><br><span class="line">f = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ch &gt;= <span class="number">48</span> &amp;&amp; ch &lt;= <span class="number">57</span> &#123;</span><br><span class="line">f = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">f = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> f == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(str); index++ &#123;</span><br><span class="line"><span class="keyword">if</span> str[index] &gt;= <span class="number">48</span> &amp;&amp; str[index] &lt;= <span class="number">57</span> &#123;</span><br><span class="line">numStr += <span class="keyword">string</span>(str[index])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newNumLength := <span class="built_in">len</span>(numStr)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; newNumLength; index++ &#123;</span><br><span class="line"><span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">num *= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">num += <span class="keyword">int</span>(numStr[index]) - <span class="number">48</span></span><br><span class="line">k++</span><br><span class="line"><span class="keyword">if</span> num*f &gt;= <span class="number">2147483648</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> num*f &lt; <span class="number">-2147483648</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2147483648</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num = num * f</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"42"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">42</span>)</span><br><span class="line">s = <span class="string">" "</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">s = <span class="string">"  "</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">s = <span class="string">"-42"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">-42</span>)</span><br><span class="line">s = <span class="string">" -42"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">-42</span>)</span><br><span class="line">s = <span class="string">"+42"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">42</span>)</span><br><span class="line">s = <span class="string">"0"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">s = <span class="string">"9"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">9</span>)</span><br><span class="line">s = <span class="string">"4193 with words"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">4193</span>)</span><br><span class="line">s = <span class="string">"words and 987"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">0</span>)</span><br><span class="line">s = <span class="string">"-91283472332"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">-2147483648</span>)</span><br><span class="line">s = <span class="string">"2147483648"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">2147483647</span>)</span><br><span class="line">s = <span class="string">"9223372036854775808"</span></span><br><span class="line">fmt.Println(myAtoi(s), <span class="number">2147483647</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-to-integer-atoi</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 整数反转</title>
      <link href="/2018/03/07/leetcode-cn/7/"/>
      <url>/2018/03/07/leetcode-cn/7/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">123</span></span><br><span class="line">输出: <span class="number">321</span></span><br><span class="line"></span><br><span class="line"> 示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="number">-123</span></span><br><span class="line">输出: <span class="number">-321</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">120</span></span><br><span class="line">输出: <span class="number">21</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">n <span class="keyword">int</span></span><br><span class="line">k <span class="keyword">int</span></span><br><span class="line">f <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line">f = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">f = <span class="number">-1</span></span><br><span class="line">x *= f</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">n *= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">n += x % <span class="number">10</span></span><br><span class="line">x /= <span class="number">10</span></span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line">n *= f</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">2147483648</span> || n &lt; <span class="number">-2147483648</span> &#123;</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">123</span></span><br><span class="line">fmt.Println(reverse(n), n)</span><br><span class="line">n = <span class="number">-123</span></span><br><span class="line">fmt.Println(reverse(n), n)</span><br><span class="line">n = <span class="number">120</span></span><br><span class="line">fmt.Println(reverse(n), n)</span><br><span class="line">n = <span class="number">1534236469</span></span><br><span class="line">fmt.Println(reverse(n), n)</span><br><span class="line">n = <span class="number">1563847412</span></span><br><span class="line">fmt.Println(reverse(n), n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Z 字形变换</title>
      <link href="/2018/03/06/leetcode-cn/6/"/>
      <url>/2018/03/06/leetcode-cn/6/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><p>L C I R<br>E T O E S I I G<br>E D H N<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p><p>请你实现这个将字符串进行指定行数变换的函数：<br>string convert(string s, int numRows);</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">"LEETCODEISHIRING"</span>, <span class="attr">numRows</span> = <span class="number">3</span></span><br><span class="line">输出: <span class="string">"LCIRETOESIIGEDHN"</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">"LEETCODEISHIRING"</span>, <span class="attr">numRows</span> = <span class="number">4</span></span><br><span class="line">输出: <span class="string">"LDREOEIIECIHNTSG"</span></span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="keyword">string</span>, numRows <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">convertStr        = <span class="string">""</span></span><br><span class="line">convertSubStrList = <span class="built_in">make</span>([]<span class="keyword">string</span>, numRows)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> numRows &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> numRows == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(s); index++ &#123;</span><br><span class="line">k := index % (<span class="number">2</span>*numRows - <span class="number">2</span>)</span><br><span class="line">y := <span class="number">2</span>*numRows - <span class="number">2</span> - k</span><br><span class="line"><span class="keyword">if</span> k &gt;= <span class="number">0</span> &amp;&amp; k &lt; numRows &#123;</span><br><span class="line">convertSubStrList[k] += <span class="keyword">string</span>(s[index])</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> y &gt;= <span class="number">0</span> &amp;&amp; y &lt; numRows &#123;</span><br><span class="line">convertSubStrList[y] += <span class="keyword">string</span>(s[index])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">convertStr = strings.Join(convertSubStrList, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> convertStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s, l := <span class="string">"LEETCODEISHIRING"</span>, <span class="number">3</span></span><br><span class="line">fmt.Println(convert(s, l), <span class="string">"LCIRETOESIIGEDHN"</span>)</span><br><span class="line">s, l = <span class="string">"LEETCODEISHIRING"</span>, <span class="number">4</span></span><br><span class="line">fmt.Println(convert(s, l), <span class="string">"LDREOEIIECIHNTSG"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/zigzag-conversion" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zigzag-conversion</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/2018/03/05/leetcode-cn/5/"/>
      <url>/2018/03/05/leetcode-cn/5/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入: <span class="string">"babad"</span></span><br><span class="line">输出: <span class="string">"bab"</span></span><br><span class="line">注意: <span class="string">"aba"</span> 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入: <span class="string">"cbbd"</span></span><br><span class="line">输出: <span class="string">"bb"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">subStr        = <span class="string">""</span></span><br><span class="line">lenS          <span class="keyword">int</span></span><br><span class="line">index         <span class="keyword">int</span></span><br><span class="line">subK          <span class="keyword">int</span></span><br><span class="line">maxLeftIndex  <span class="keyword">int</span></span><br><span class="line">maxRightIndex <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line">lenS = <span class="number">2</span>*<span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> index &lt; lenS &#123;</span><br><span class="line">subK = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">leftIndex, rightIndex := index-subK, index+subK</span><br><span class="line"><span class="keyword">if</span> leftIndex%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">leftIndex--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rightIndex%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">rightIndex++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> leftIndex &lt; <span class="number">0</span> || rightIndex &gt;= lenS &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s[leftIndex/<span class="number">2</span>] == s[rightIndex/<span class="number">2</span>] &#123;</span><br><span class="line"><span class="keyword">if</span> maxRightIndex-maxLeftIndex &lt; rightIndex/<span class="number">2</span>-leftIndex/<span class="number">2</span> &#123;</span><br><span class="line">maxLeftIndex, maxRightIndex = leftIndex/<span class="number">2</span>, rightIndex/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">subK++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> maxRightIndex &lt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">subStr = s[maxLeftIndex:maxRightIndex+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> subStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"babad"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"cbbd"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"abcd"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"cbbb"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"bbbc"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"ababa"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">s = <span class="string">"bbbb"</span></span><br><span class="line">fmt.Println(longestPalindrome(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. 寻找两个正序数组的中位数</title>
      <link href="/2018/03/04/leetcode-cn/4/"/>
      <url>/2018/03/04/leetcode-cn/4/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。<br>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 <span class="number">2.0</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">nums   []<span class="keyword">int</span></span><br><span class="line">minNum <span class="keyword">int</span></span><br><span class="line">index  <span class="keyword">int</span></span><br><span class="line">index1 <span class="keyword">int</span></span><br><span class="line">index2 <span class="keyword">int</span></span><br><span class="line">m      <span class="keyword">float64</span></span><br><span class="line">)</span><br><span class="line">nums1Len, nums2Len := <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">numsTotal := nums1Len + nums2Len</span><br><span class="line"><span class="keyword">for</span> index = <span class="number">0</span>; index &lt; numsTotal; index++ &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt; numsTotal/<span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index1 &lt; nums1Len &amp;&amp; index2 &lt; nums2Len &#123;</span><br><span class="line"><span class="keyword">if</span> nums1[index1] &lt; nums2[index2] &#123;</span><br><span class="line">minNum = nums1[index1]</span><br><span class="line">index1++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">minNum = nums2[index2]</span><br><span class="line">index2++</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index1 &lt; nums1Len &#123;</span><br><span class="line">minNum = nums1[index1]</span><br><span class="line">index1++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index2 &lt; nums2Len &#123;</span><br><span class="line">minNum = nums2[index2]</span><br><span class="line">index2++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">nums = <span class="built_in">append</span>(nums, minNum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> numsTotal%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">m = <span class="keyword">float64</span>(nums[index<span class="number">-1</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m = <span class="keyword">float64</span>(nums[index<span class="number">-1</span>]+nums[index<span class="number">-2</span>]) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">a, b = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">fmt.Println(findMedianSortedArrays(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 无重复字符的最长子串</title>
      <link href="/2018/03/03/leetcode-cn/3/"/>
      <url>/2018/03/03/leetcode-cn/3/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "abcabcbb"</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line"><span class="section">输入: "bbbbb"</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line"><span class="section">输入: "pwwkew"</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">"pwke"</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">maxX = <span class="number">0</span></span><br><span class="line">maxY = <span class="number">1</span></span><br><span class="line">x    = <span class="number">0</span></span><br><span class="line">y    = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">charList := []<span class="keyword">byte</span>(s)</span><br><span class="line"><span class="keyword">for</span> x &lt;= y &amp;&amp; y &lt; <span class="built_in">len</span>(charList) &#123;</span><br><span class="line">isIn := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> charList[x:y] &#123;</span><br><span class="line"><span class="keyword">if</span> i == charList[y] &#123;</span><br><span class="line">isIn = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isIn &#123;</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> y-x &gt; maxY-maxX &#123;</span><br><span class="line">maxY, maxX = y, x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxY - maxX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="string">"abcabcbb"</span></span><br><span class="line">fmt.Println(lengthOfLongestSubstring(a))</span><br><span class="line">b := <span class="string">"bbbbb"</span></span><br><span class="line">fmt.Println(lengthOfLongestSubstring(b))</span><br><span class="line">c := <span class="string">"pwwkew"</span></span><br><span class="line">fmt.Println(lengthOfLongestSubstring(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 两数相加</title>
      <link href="/2018/03/02/leetcode-cn/2/"/>
      <url>/2018/03/02/leetcode-cn/2/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)  </span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span>  </span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">h := &amp;ListNode&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> s := h; l1 != <span class="literal">nil</span>; l1 = l1.Next &#123;</span><br><span class="line">s.Val = l1.Val</span><br><span class="line"><span class="keyword">if</span> l1.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">s.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">s = s.Next</span><br><span class="line">&#125;</span><br><span class="line">k := <span class="number">0</span></span><br><span class="line">s, e := h, h</span><br><span class="line"><span class="keyword">for</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">s.Val += l2.Val + k</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> s.Val &gt;= <span class="number">10</span> &#123;</span><br><span class="line">s.Val -= <span class="number">10</span></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">s.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">e = s</span><br><span class="line">s = s.Next</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k != <span class="number">0</span> &amp;&amp; s != <span class="literal">nil</span> &#123;</span><br><span class="line">s.Val += k</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> s.Val &gt;= <span class="number">10</span> &#123;</span><br><span class="line">s.Val -= <span class="number">10</span></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">s = s.Next</span><br><span class="line">e = e.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Next.Val += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.Next = &amp;ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> s != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s.Val == <span class="number">0</span> &amp;&amp; s.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">e.Next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">s = s.Next</span><br><span class="line">e = e.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(h *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> h != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(h.Val)</span><br><span class="line">h = h.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">l1 := ListNode&#123;Val: <span class="number">2</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>, Next: &amp;ListNode&#123;Val: <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">l2 := ListNode&#123;Val: <span class="number">5</span>, Next: &amp;ListNode&#123;Val: <span class="number">6</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>&#125;&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">l1 = ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">l2 = ListNode&#123;Val: <span class="number">5</span>, Next: &amp;ListNode&#123;Val: <span class="number">6</span>, Next: &amp;ListNode&#123;Val: <span class="number">4</span>&#125;&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">l1 = ListNode&#123;Val: <span class="number">9</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>&#125;&#125;</span><br><span class="line">l2 = ListNode&#123;Val: <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">l1 = ListNode&#123;Val: <span class="number">8</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>, Next: &amp;ListNode&#123;Val: <span class="number">9</span>&#125;&#125;&#125;</span><br><span class="line">l2 = ListNode&#123;Val: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(addTwoNumbers(&amp;l1, &amp;l2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 两数之和</title>
      <link href="/2018/03/01/leetcode-cn/1/"/>
      <url>/2018/03/01/leetcode-cn/1/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>  </span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>  </span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ret []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> index1, num1 := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">for</span> index2, num2 := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> index1 != index2 &amp;&amp; num1+num2 == target &#123;</span><br><span class="line">ret = []<span class="keyword">int</span>&#123;index2, index1&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(n^2)</li><li>空间复杂度： O(1)</li></ul><h5 id="一遍哈希表"><a href="#一遍哈希表" class="headerlink" title="一遍哈希表"></a>一遍哈希表</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ret     []<span class="keyword">int</span></span><br><span class="line">numsMap <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line">numsMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"><span class="keyword">for</span> index, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := numsMap[num]; ok &#123;</span><br><span class="line">numsMap[num] = <span class="built_in">append</span>(numsMap[num], index)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">numsMap[num] = []<span class="keyword">int</span>&#123;index&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> indexList, ok := numsMap[target-num]; ok &#123;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> indexList &#123;</span><br><span class="line"><span class="keyword">if</span> i != index &#123;</span><br><span class="line">ret = []<span class="keyword">int</span>&#123;i, index&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API 网关 - Kong 简介</title>
      <link href="/2017/09/12/backend/common/kong_study/"/>
      <url>/2017/09/12/backend/common/kong_study/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Kong 是由 Mashape 公司开源的，基于 Nginx 的 API Gateway （ Nginx 中运行的 Lua 应用程序 ）。</p><a id="more"></a><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>功能：授权、日志、IP 限制、限流、API 统计分析、请求转化、跨域（CORS）等等。<br>可扩展： 支持分布式</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>Upstream</td><td>负载均衡策略</td></tr><tr><td>Target</td><td>处理请求的 Backend 服务</td></tr><tr><td>Service</td><td>多个 Upstream 的集合</td></tr><tr><td>Route</td><td>转发规则，将请求转发给 Service</td></tr><tr><td>Consumer</td><td>用户，里面记录用户的一些信息</td></tr><tr><td>Certificate</td><td>Https 证书</td></tr><tr><td>Sni</td><td>域名与 Certificate 的绑定</td></tr><tr><td>Plugin</td><td>插件</td></tr></tbody></table><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>测试服务器：192.168.0.1</p><h5 id="Create-a-Docker-network"><a href="#Create-a-Docker-network" class="headerlink" title="Create a Docker network"></a>Create a Docker network</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure><h5 id="Start-Database"><a href="#Start-Database" class="headerlink" title="Start Database"></a>Start Database</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p 5432:5432 \</span><br><span class="line">               -e <span class="string">"POSTGRES_USER=kong"</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_DB=kong"</span> \</span><br><span class="line">               postgres:9.6</span><br></pre></td></tr></table></figure><h5 id="Prepare-Database"><a href="#Prepare-Database" class="headerlink" title="Prepare Database"></a>Prepare Database</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> \</span><br><span class="line">     kong:latest kong migrations up</span><br></pre></td></tr></table></figure><h5 id="Start-Kong"><a href="#Start-Kong" class="headerlink" title="Start Kong"></a>Start Kong</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"</span> \</span><br><span class="line">     -p 8000:8000 \</span><br><span class="line">     -p 8443:8443 \</span><br><span class="line">     -p 8001:8001 \</span><br><span class="line">     -p 8444:8444 \</span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure><h5 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i http://192.168.0.1:8001/</span><br></pre></td></tr></table></figure><h4 id="API-调用"><a href="#API-调用" class="headerlink" title="API 调用"></a>API 调用</h4><p><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">官网文档</a></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Kong 部署在 <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> 机器上</span><br><span class="line">另有 <span class="number">2</span> 台机器部署了 web 服务： </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">web 服务地址测试接口： </span><br><span class="line">http:<span class="comment">//192.168.0.2:9100/api/v1/test/</span></span><br><span class="line">http:<span class="comment">//192.168.0.3:9100/api/v1/test/</span></span><br></pre></td></tr></table></figure><h5 id="创建-Upstream"><a href="#创建-Upstream" class="headerlink" title="创建 Upstream"></a>创建 Upstream</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">--url http://192.168.0.1:8001/upstreams/ \</span><br><span class="line">--data <span class="string">"name=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="给-Upstream-添加-Targets"><a href="#给-Upstream-添加-Targets" class="headerlink" title="给 Upstream 添加 Targets"></a>给 Upstream 添加 Targets</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">--url http://192.168.0.1:8001/upstreams/backend1/targets \</span><br><span class="line">--data <span class="string">"target=192.168.0.2:9100"</span></span><br><span class="line"></span><br><span class="line">curl -i -X POST \</span><br><span class="line">--url http://192.168.0.1:8001/upstreams/backend1/targets \</span><br><span class="line">--data <span class="string">"target=192.168.0.3:9100"</span></span><br></pre></td></tr></table></figure><h5 id="查看-Upstream-的-Targets-是否添加成功"><a href="#查看-Upstream-的-Targets-是否添加成功" class="headerlink" title="查看 Upstream 的 Targets 是否添加成功"></a>查看 Upstream 的 Targets 是否添加成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">--url http://10.25.98.128:8001/upstreams/backend1/targets</span><br></pre></td></tr></table></figure><h5 id="创建-Service"><a href="#创建-Service" class="headerlink" title="创建 Service"></a>创建 Service</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">--url http://192.168.0.1:8001/services/ \</span><br><span class="line">--data <span class="string">"name=backend1"</span> \</span><br><span class="line">--data <span class="string">"host=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="查看-Service"><a href="#查看-Service" class="headerlink" title="查看 Service"></a>查看 Service</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">--url http://192.168.0.1:8001/services/backend1</span><br></pre></td></tr></table></figure><h5 id="给-Service-添加-Routes"><a href="#给-Service-添加-Routes" class="headerlink" title="给 Service 添加 Routes"></a>给 Service 添加 Routes</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST --url http://192.168.0.1:8001/routes/ -d </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"service"</span>: &#123;</span><br><span class="line"><span class="string">"id"</span>: <span class="string">"2bc5f78b-02f8-4109-96c0-0888cbee7ccb"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"methods"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看-Service-下的-Routes"><a href="#查看-Service-下的-Routes" class="headerlink" title="查看 Service 下的 Routes"></a>查看 Service 下的 Routes</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">--url http://192.168.0.1:8001/services/manageone-cmdb/routes</span><br></pre></td></tr></table></figure><h5 id="通过-Kong-API-访问-backend1-服务"><a href="#通过-Kong-API-访问-backend1-服务" class="headerlink" title="通过 Kong API 访问 backend1 服务"></a>通过 Kong API 访问 backend1 服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X GET http://192.168.0.1:8000/api/v1/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx location 匹配规则</title>
      <link href="/2017/08/15/ops/nginx/nginx_location/"/>
      <url>/2017/08/15/ops/nginx/nginx_location/</url>
      
        <content type="html"><![CDATA[<h4 id="匹配命令"><a href="#匹配命令" class="headerlink" title="匹配命令"></a>匹配命令</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">~   正则匹配，区分大小写</span><br><span class="line">~*  正则匹配，不区分大小写</span><br><span class="line"><span class="section">=   普通字符精确匹配，如果找到，停止搜索</span></span><br><span class="line">^~  普通字符匹配（如果该选项匹配，只匹配该选项，一般用来匹配目录）</span><br><span class="line">/   通用匹配，如果没有其它匹配，任何请求都会匹配到</span><br><span class="line">@   定义命名的 location，使用在内部定向时，例如：error<span class="emphasis">_page、try_</span>files</span><br></pre></td></tr></table></figure><h4 id="匹配优先级（与在配置文件中的顺序无关）"><a href="#匹配优先级（与在配置文件中的顺序无关）" class="headerlink" title="匹配优先级（与在配置文件中的顺序无关）"></a>匹配优先级（与在配置文件中的顺序无关）</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 精确匹配 ”=“ 会第一个被处理。如果发现精确匹配，停止搜索。</span><br><span class="line"><span class="number">2.</span> 匹配最长的规则，如果这个规则带有 ^~ 修饰符，停止搜索。</span><br><span class="line"><span class="number">3.</span> 存储 #<span class="number">2</span> 的最长匹配规则，然后按在配置文件中的定义顺序匹配正则表达，若匹配到正则表达式，停止搜索。</span><br><span class="line"><span class="number">4.</span> 若没有匹配到正则表达式，使用存储的 #<span class="number">2</span> 的最长匹配。</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h5><ol><li>Directives with the = prefix that match the query exactly. If found, searching stops.</li><li>All remaining directives with conventional strings, longest match first. If this match used the ^~ prefix, searching stops.</li><li>Regular expressions, in order of definition in the configuration file.</li><li>If #3 yielded a match, that result is used. Else the match from #2 is used.</li></ol><ol><li>= 前缀的指令严格匹配这个查询。如果找到，停止搜索。</li><li>所有剩下的常规字符串，最长的匹配。如果这个匹配使用 ^〜 前缀，搜索停止。</li><li>正则表达式，在配置文件中定义的顺序。</li><li>如果第三条规则产生匹配的话，结果被使用。否则，使用第二条规则的结果。</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @location 例子</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@fetch</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="variable">@fetch</span> &#123;</span><br><span class="line">    [ configuration X ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span>  = / &#123;</span><br><span class="line">    <span class="comment"># 精确匹配 / </span></span><br><span class="line">    [ configuration A ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span>  / &#123;</span><br><span class="line">    <span class="comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></span><br><span class="line">    <span class="comment"># 但是正则和最长字符串会优先匹配</span></span><br><span class="line">    [ configuration B ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /documents/ &#123;</span><br><span class="line">    <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></span><br><span class="line">    <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span><br><span class="line">    [ configuration C ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /documents/Abc</span> &#123;</span><br><span class="line">    [ configuration CC ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /images/ &#123;</span><br><span class="line">    <span class="comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索，采用这一条</span></span><br><span class="line">    [ configuration D ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">    <span class="comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span></span><br><span class="line">    <span class="comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span></span><br><span class="line">    [ configuration E ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /images/ &#123;</span><br><span class="line">    <span class="comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span></span><br><span class="line">    [ configuration F ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /images/abc &#123;</span><br><span class="line">    <span class="comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span></span><br><span class="line">    <span class="comment"># F 与 G 的放置顺序是没有关系的</span></span><br><span class="line">    [ configuration G ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /images/abc/</span> &#123;</span><br><span class="line">    <span class="comment"># 只有去掉 config D 才有效</span></span><br><span class="line">    <span class="comment"># 先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span></span><br><span class="line">    [ configuration H ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* /js/.*/\.js</span></span><br></pre></td></tr></table></figure><h4 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h4><h5 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h5><p>处理静态文件请求，这是 nginx 作为 http 服务器的强项，有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录匹配</span></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后缀匹配</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;</span><br><span class="line">    <span class="attribute">alias</span> /webroot/res/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.nginx.cn/115.html" target="_blank" rel="noopener">https://www.nginx.cn/115.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 长连接</title>
      <link href="/2017/08/14/ops/nginx/keepalive/"/>
      <url>/2017/08/14/ops/nginx/keepalive/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是长连接？"><a href="#什么是长连接？" class="headerlink" title="什么是长连接？"></a>什么是长连接？</h4><p>HTTP请求是基于TCP协议的，客户端向服务器发送一个 TCP 请求需要三次握手，服务端响应完毕后断开连接。 HTTP请求请求是应答式的，如果能知道每个请求头与响应体的长度，那么就可以在一个连接上面执行多个请求的，这就是所谓的长连接。 但前提条件是我们先得确定请求头与响应体的长度。</p><br><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><p>Nginx 使用 <code>keepalive_timeout</code> 来指定客户端和 Nginx 之间的超时时间。指定每个 TCP 连接最多可以保持多长时间。Nginx 的默认值是 75 秒，有些浏览器最多只保持 60 秒，所以可以设定为 60 秒。若将它设置为 0，就禁止了 keepalive 连接。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置段: http, server, location</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">75s</span>;</span><br></pre></td></tr></table></figure><blockquote><p>通常 keepalive_timeout 应该比 client_body_timeout 大。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 超时配置</title>
      <link href="/2017/08/13/ops/nginx/timeout/"/>
      <url>/2017/08/13/ops/nginx/timeout/</url>
      
        <content type="html"><![CDATA[<h5 id="client-header-timeout"><a href="#client-header-timeout" class="headerlink" title="client_header_timeout"></a>client_header_timeout</h5><p>客户端向服务端发送一个完整的 <code>request header</code> 的超时时间。如果客户端在指定时间内没有发送一个完整的 request header，Nginx 返回 HTTP 408（Request Timed Out）。</p><blockquote><p>Defines a timeout for reading client request header. If a client does not transmit the entire header within this time,<br>the 408 (Request Time-out) error is returned to the client.</p></blockquote><br><a id="more"></a><h5 id="client-body-timeout"><a href="#client-body-timeout" class="headerlink" title="client_body_timeout"></a>client_body_timeout</h5><p>指定客户端与服务端建立连接后发送 <code>request body</code> 的超时时间。如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）。</p><blockquote><p>Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body.<br>If a client does not transmit anything within this time,<br>the 408 (Request Time-out) error is returned to the client.</p></blockquote><br><h5 id="send-timeout"><a href="#send-timeout" class="headerlink" title="send_timeout"></a>send_timeout</h5><p>服务端向客户端传输数据的超时时间，是连续两次发送数据的间隔时间，非整个请求传输时间。</p><blockquote><p>Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations,<br>not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.</p></blockquote><br><h5 id="proxy-connect-timeout"><a href="#proxy-connect-timeout" class="headerlink" title="proxy_connect_timeout"></a>proxy_connect_timeout</h5><p>Nginx 与 <code>upstream server</code> 的连接超时时间。</p><blockquote><p>Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.</p></blockquote><br><h5 id="proxy-read-timeout"><a href="#proxy-read-timeout" class="headerlink" title="proxy_read_timeout"></a>proxy_read_timeout</h5><p>Nginx 接收 <code>upstream server</code> 数据超时， 默认<code>60s</code>， 如果连续的<code>60s</code>内没有收到1个字节， 连接关闭。</p><blockquote><p>Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the proxied server does not transmit anything within this time, the connection is closed.</p></blockquote><br><h5 id="proxy-send-timeout"><a href="#proxy-send-timeout" class="headerlink" title="proxy_send_timeout"></a>proxy_send_timeout</h5><p>Nginx 发送数据至 <code>upstream server</code> 超时，默认<code>60s</code>， 如果连续的<code>60s</code>内没有发送1个字节， 连接关闭。</p><blockquote><p>Sets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed.</p></blockquote><br><h5 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h5><p>Nginx 和客户端之间的长连接保持时间，指定每个 TCP 连接最多可以保持多长时间。Nginx 的默认值是<code>75</code>秒，若将它设置为<code>0</code>，就禁止了 keepalive 连接。</p><blockquote><p>The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections.<br>The optional second parameter sets a value in the “Keep-Alive: timeout=time” response header field. Two parameters may differ.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡</title>
      <link href="/2017/08/12/ops/nginx/study_notes/"/>
      <url>/2017/08/12/ops/nginx/study_notes/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>nginx 通过 upstream 实现负载均衡， upstream 目前支持5种方式。</p><a id="more"></a><h5 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h5><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.14</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.15</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指定权重"><a href="#指定权重" class="headerlink" title="指定权重"></a>指定权重</h5><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.14</span> weight=<span class="number">10</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.15</span> weight=<span class="number">10</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- more --><h5 id="IP-绑定-ip-hash"><a href="#IP-绑定-ip-hash" class="headerlink" title="IP 绑定 ip_hash"></a>IP 绑定 ip_hash</h5><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.14:88</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.15:80</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="fair（第三方）"><a href="#fair（第三方）" class="headerlink" title="fair（第三方）"></a>fair（第三方）</h5><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123; </span><br><span class="line">    <span class="attribute">server</span> server1; </span><br><span class="line">    <span class="attribute">server</span> server2; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="url-hash（第三方）"><a href="#url-hash（第三方）" class="headerlink" title="url_hash（第三方）"></a>url_hash（第三方）</h5><p>按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123; </span><br><span class="line">    <span class="attribute">server</span> squid1:<span class="number">3128</span>; </span><br><span class="line">    <span class="attribute">server</span> squid2:<span class="number">3128</span>; </span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>; </span><br><span class="line">    <span class="attribute">hash_method</span> crc32; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>upstream</code> 还可以为每个设备设置状态值，这些状态值的含义分别如下：</p><table><thead><tr><th>状态值</th><th>含义</th></tr></thead><tbody><tr><td>down</td><td>表示单前的 server 暂时不参与负载</td></tr><tr><td>weight</td><td>默认为1， weight 越大负载的权重就越大</td></tr><tr><td>max_fails</td><td>允许请求失败的次数默认为1，当超过最大次数时返回 proxy_next_upstream 模块定义的错误</td></tr><tr><td>fail_timeout</td><td>max_fails 次失败后，暂停的时间</td></tr><tr><td>backup</td><td>其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器，所以这台机器压力会最轻</td></tr></tbody></table><p>例如：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> bakend&#123;  </span><br><span class="line">      <span class="comment"># 定义负载均衡设备的 Ip 及设备状态 </span></span><br><span class="line">      ip_hash; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">10.0.0.11:9090</span> down; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">10.0.0.11:8080</span> weight=<span class="number">2</span>; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">10.0.0.11:6060</span>; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">10.0.0.11:7070</span> backup; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h4><p><strong>django + uwsgi + nginx</strong> 部署的 web 站点运行时报504 ， 可能是超时时间设置有问题。<br><strong>nginx</strong> 和 <strong>uwsgi</strong> 整合时有三个参数可以用于设置超时时间，在 nginx 配置文件 <strong>http -&gt; server -&gt; location</strong> 中设置。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uwsgi_connect_timeout</span>    ：默认<span class="number">60</span>秒，与 uwsgi-server 连接的超时时间，该值不能超过<span class="number">75</span>秒.若在超时时间内未能成功连接则断开连接尝试。 </span><br><span class="line">uwsgi_read_timeout       ：默认<span class="number">60</span>秒，nginx等待 uwsgi 进程发送响应数据的超时时间。若有需要长时间运行才能产生输出结果的uwsgi进程则需将此参数调高。若在错误日志文件中看到 upstream timed out 需将此参数调高。若超过超时时间还未收到响应则 nginx 关闭连接。 </span><br><span class="line">uwsgi_send_timeout       ：默认<span class="number">60</span>秒，nginx 向 uwsgi 进程发送请求的超时时间。超时时间由两次写操作的时间间隔算，而非整个请求。若超过超时时间仍没写入动作则 nginx 关闭连接。</span><br></pre></td></tr></table></figure><p><span style="color:red">注：这里还需要排除其他原因，根据具体环境而定，如使用 aws 的 LB 就会有空闲时间的限制</span></p><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">504 </span>   网关超时 Gateway timeout（例如nginx正在处理但是程序执行过程太长，nginx配置的等待时间较短，于是时间到了超时返回<span class="number">504</span>，排查超时时间等因素）</span><br><span class="line"><span class="symbol">502 </span>   网关错误 Bad Gateway  服务不给nginx任何响应 （例如uwsgi最多只能处理<span class="number">300</span>个请求，但nginx转发了<span class="number">600</span>个请求，uwsgi不给nginx任何响应，<span class="number">502</span>）</span><br><span class="line"><span class="symbol">500 </span>   服务器内部错误，可能是服务内部有问题（例如代码内部有问题）</span><br><span class="line"><span class="symbol">404 </span>   找不到该网页（可能web 路径有问题    ）</span><br><span class="line"><span class="symbol">200 </span>   正常状态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF 简介</title>
      <link href="/2017/06/14/frontend/csrf/"/>
      <url>/2017/06/14/frontend/csrf/</url>
      
        <content type="html"><![CDATA[<h4 id="CSRF-是什么？"><a href="#CSRF-是什么？" class="headerlink" title="CSRF 是什么？"></a>CSRF 是什么？</h4><p>CSRF（Cross-site Request Forgery）跨站请求伪造，缩写为：CSRF/XSRF。 也被称为：one click attack/session riding。</p><a id="more"></a><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>利用了 <code>web</code> 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">背景：有网站 <span class="selector-tag">a</span>, b</span><br><span class="line"><span class="number">1</span>. a网站通过标签 &lt;<span class="selector-tag">img</span> src=<span class="string">"http://b?xx=xx&amp;x=x"</span>&gt; 构造了一个 get 请求,这个请求为 <span class="selector-tag">b</span> 的地址并且携带了一些请求参数</span><br><span class="line"><span class="number">2</span>. 浏览器发起请求的时候看到的域名是 <span class="selector-tag">b</span> 的域名就会携带 <span class="selector-tag">b</span> 网站下的 cookie</span><br><span class="line"><span class="number">3</span>. 如果 cookie 里携带了一些认证信息，<span class="selector-tag">b</span> 网站就会认为这是一个正常的请求从而导致了一些安全问题</span><br></pre></td></tr></table></figure><p>该攻击可以实施的点在于：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. 浏览器在发起 <span class="builtin-name">get</span> 请求的时候会默认携带该请求域名下的 cookie</span><br><span class="line">2. 一般而言浏览器有同源策略的限制，但是通过标签 &lt;img <span class="attribute">src</span>=<span class="string">""</span>&gt; 或者<span class="built_in"> script </span>所构造的请求不会有这个限制</span><br><span class="line">3. b 网站允许 <span class="builtin-name">get</span> 请求去执行一些操作</span><br></pre></td></tr></table></figure><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><ol><li>检查 Referer</li><li>添加校验 Token</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>siege 压测工具</title>
      <link href="/2017/05/21/ops/common/siege/"/>
      <url>/2017/05/21/ops/common/siege/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>siege 是一款高性能的 http 压力测试工具。<br>siege 支持身份验证、 cookies、 http、 https 和 ftp 协议。</p><h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 对指定站点进行压测</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s URL</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>文件中包含的若干URL进行批量测试</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s -f URL_File_Name</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 支持多个Header参数</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s -H <span class="string">"Authorization: XXXX"</span> -H <span class="string">"SX: 1212"</span> URL</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 支持application/json方式请求</span><br><span class="line"></span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s 'URL POST &lt; data.json' </span><br><span class="line">siege -c <span class="number">300</span> -t <span class="number">5</span>s 'URL PUT &lt; data.json'</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-c</td><td>并发数</td></tr><tr><td>-t</td><td>压力测试时间，可以在时间后加单位</td></tr><tr><td>-r</td><td>重复次数。与-t含义相同，设一个即可</td></tr><tr><td>-f</td><td>包含URL的文本名字</td></tr><tr><td>-b</td><td>BENCHMARK模式，请求之间无需延迟</td></tr><tr><td>-p</td><td>打印整个页面的内容</td></tr><tr><td>-H</td><td>给请求添加头，支持多个</td></tr><tr><td>-A</td><td>给请求设置User-Agent</td></tr><tr><td>-T</td><td>给请求设置Content-Type</td></tr></tbody></table><h4 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h4><table><thead><tr><th>性能参数</th><th>描述</th></tr></thead><tbody><tr><td>Transactions</td><td>总共测试次数</td></tr><tr><td>Availability</td><td>成功次数百分比</td></tr><tr><td>Elapsed time</td><td>总共耗时多少秒</td></tr><tr><td>Data transferred</td><td>总共数据传输</td></tr><tr><td>Response time</td><td>等到响应耗时</td></tr><tr><td>Transaction rate</td><td>平均每秒处理请求数</td></tr><tr><td>Throughput</td><td>吞吐率</td></tr><tr><td>Concurrency</td><td>最高并发</td></tr><tr><td>Successful transactions</td><td>成功的请求数</td></tr><tr><td>Failed transactions</td><td>失败的请求数</td></tr></tbody></table><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.joedog.org/siege-manual/" target="_blank" rel="noopener">https://www.joedog.org/siege-manual/</a></li><li><a href="https://www.jianshu.com/p/74c465ff136f/" target="_blank" rel="noopener">https://www.jianshu.com/p/74c465ff136f/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sanic 实践（0.6.0）</title>
      <link href="/2016/12/21/backend/python/Sanic%E5%88%9D%E8%AF%86/"/>
      <url>/2016/12/21/backend/python/Sanic%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Sanic is a Python 3.7+ web server and web framework that’s written to go fast. It allows the usage of the <strong>async/await</strong> syntax added in Python 3.5, which makes your code non-blocking and speedy.</p><a id="more"></a><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>下面是一个简单的例子，使用到如下库：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">sanic (<span class="name">sanic</span> is a flask-like python3.<span class="number">5</span>+ web server)</span><br><span class="line">peewee (<span class="name">simple</span> and small ORM)</span><br><span class="line">PyMySQL (<span class="name">mysql</span> database driver)</span><br><span class="line">marshmallow (<span class="name">serialize</span> and deserialize models)</span><br><span class="line">AoikLiveReload (<span class="name">automatic</span> reload app in development)</span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/sanic_example_1.png" alt="sanic_example_1"></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(sanic) [blazehu@MacBook ~]$ python3 app.py</span><br><span class="line">2018-12-21 10:53:50 - (sanic)[INFO]: Goin<span class="string">' Fast @ http://0.0.0.0:8000</span></span><br><span class="line"><span class="string">2018-12-21 10:53:50 - (sanic)[INFO]: Starting worker [44832]</span></span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>create a new employee</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/sanic_example_2.png" alt="sanic_example_2"></p><p>list employees</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/sanic_example_3.png" alt="sanic_example_3"><br>logs</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">(sanic) [blazehu@MacBook ~]$ python3 app.py</span><br><span class="line">2018-12-21 10:53:50 - (sanic)[INFO]: Goin' Fast @ http://0.0.0.0:8000</span><br><span class="line">2018-12-21 10:53:50 - (sanic)[INFO]: Starting worker [44832]</span><br><span class="line">2018-12-21 10:59:54 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:55817</span>]: GET http://127.0.0.1:8000/employee/  200 267</span><br><span class="line">2018-12-21 11:00:03 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:55865</span>]: GET http://127.0.0.1:8000/employee/  200 267</span><br><span class="line">2018-12-21 11:01:05 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56135</span>]: GET http://127.0.0.1:8000/employee/  200 38</span><br><span class="line">2018-12-21 11:01:44 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56325</span>]: POST http://127.0.0.1:8000/employee/  200 28</span><br><span class="line">2018-12-21 11:02:38 - (network)[<span class="string">INFO</span>][<span class="symbol">127.0.0.1:56562</span>]: GET http://127.0.0.1:8000/employee/  200 95</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><h5 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> playhouse.pool <span class="keyword">import</span> MySQLDatabase</span><br><span class="line"><span class="keyword">from</span> playhouse.shortcuts <span class="keyword">import</span> RetryOperationalError</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetryMysqlDatabase</span><span class="params">(RetryOperationalError, MySQLDatabase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, database, **kwargs)</span>:</span></span><br><span class="line">        super(MySQLDatabase, self).__init__(database, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sequence_exists</span><span class="params">(self, seq)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = RetryMysqlDatabase(</span><br><span class="line">    database=config.DB_NAME, host=config.DB_HOST,</span><br><span class="line">    user=config.DB_USER, passwd=config.DB_PASSWORD, port=config.DB_PORT,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="string">"""A base model that will use our MySQL database"""</span></span><br><span class="line">    is_deleted = BooleanField(<span class="string">u'是否删除'</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        database = db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="comment"># base info</span></span><br><span class="line">    number = CharField(verbose_name=<span class="string">u'编号'</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    name = CharField(verbose_name=<span class="string">u'姓名'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    email = CharField(verbose_name=<span class="string">u'邮箱'</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="serialize-py"><a href="#serialize-py" class="headerlink" title="serialize.py"></a>serialize.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    <span class="comment"># 基本信息</span></span><br><span class="line">    number = fields.String()</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.Email()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_employee</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> models.Employee(**data)</span><br></pre></td></tr></table></figure><h5 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sanic.views <span class="keyword">import</span> HTTPMethodView</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Blueprint, response</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Employee</span><br><span class="line"><span class="keyword">import</span> serialize</span><br><span class="line"></span><br><span class="line">employee_bp = Blueprint(<span class="string">"employee_bp"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeView</span><span class="params">(HTTPMethodView)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        employees = Employee.select().where(Employee.is_deleted == <span class="number">0</span>)</span><br><span class="line">        schema = serialize.EmployeeSchema()</span><br><span class="line">        data = schema.dump(employees, many=<span class="literal">True</span>).data</span><br><span class="line">        <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">200</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"data"</span>: data&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = request[<span class="string">"POST"</span>]</span><br><span class="line">        employee_schema = serialize.EmployeeSchema()</span><br><span class="line">        _, error = employee_schema.load(data)</span><br><span class="line">        <span class="keyword">if</span> error:</span><br><span class="line">            msg = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> error_item <span class="keyword">in</span> error:</span><br><span class="line">                error_detail = error.get(error_item)</span><br><span class="line">                <span class="keyword">if</span> isinstance(error_detail, list):</span><br><span class="line">                    error_detail = <span class="string">','</span>.join(error_detail)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    error_detail = str(error_detail)</span><br><span class="line">                msg += <span class="string">"&#123;0&#125;: &#123;1&#125;"</span>.format(error_item, error_detail)</span><br><span class="line">            <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">500</span>, <span class="string">"msg"</span>: msg&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            number = data.get(<span class="string">"number"</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                Employee.get(Employee.number == number)</span><br><span class="line">                <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">500</span>, <span class="string">"msg"</span>: <span class="string">"the number is uniq"</span>&#125;)</span><br><span class="line">            <span class="keyword">except</span> Employee.DoesNotExist:</span><br><span class="line">                employee = Employee()</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> data:</span><br><span class="line">                    value = data.get(key)</span><br><span class="line">                    <span class="keyword">if</span> hasattr(employee, key):</span><br><span class="line">                        setattr(employee, key, value)</span><br><span class="line">                employee.save()</span><br><span class="line">        <span class="keyword">return</span> response.json(&#123;<span class="string">"code"</span>: <span class="number">201</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">employee_bp.add_route(EmployeeView.as_view(), <span class="string">"/"</span>)</span><br></pre></td></tr></table></figure><h5 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> aoiklivereload <span class="keyword">import</span> LiveReloader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> employee_bp</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> db, Employee</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.blueprint(employee_bp, url_prefix=<span class="string">'/employee'</span>)</span><br><span class="line">CORS(app, automatic_options=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware('request')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">transform_data_request</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request[<span class="string">'POST'</span>] = request.json <span class="keyword">if</span> request.json <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        request[<span class="string">'GET'</span>] = request.args <span class="keyword">if</span> request.args <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(repr(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware('response')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(request, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db.is_closed():</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># application config</span></span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># init the database</span></span><br><span class="line">db.create_tables([Employee, ], safe=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># reload the app</span></span><br><span class="line">    reloader = LiveReloader()</span><br><span class="line">    reloader.start_watcher_thread()</span><br><span class="line">    <span class="comment"># run server debug</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 关闭长连接</span></span><br><span class="line">KEEP_ALIVE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 关闭启动logo</span></span><br><span class="line">LOGO = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql Database for dev</span></span><br><span class="line">DB_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">DB_PORT = <span class="number">3306</span></span><br><span class="line">DB_NAME = <span class="string">'sanic'</span></span><br><span class="line">DB_USER = <span class="string">'root'</span></span><br><span class="line">DB_PASSWORD = <span class="string">'123456'</span></span><br></pre></td></tr></table></figure><h5 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># python <span class="number">3.7</span><span class="number">.2</span></span><br><span class="line">PyMySQL==<span class="number">0.7</span><span class="number">.11</span></span><br><span class="line">AoikLiveReload==<span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">peewee==<span class="number">2.8</span><span class="number">.5</span></span><br><span class="line">marshmallow==<span class="number">2.13</span><span class="number">.6</span></span><br><span class="line">sanic-crud==<span class="number">0.2</span><span class="number">.4</span></span><br><span class="line">Sanic-Cors==<span class="number">0.6</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">sanic==<span class="number">0.6</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h5 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev, demo debug </span></span><br><span class="line">python3 app.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy</span></span><br><span class="line">gunicorn app:app --<span class="built_in">bind</span> 0.0.0.0:8000 --worker-class sanic.worker.GunicornWorker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible 简介</title>
      <link href="/2016/10/10/ops/common/ansible_intro/"/>
      <url>/2016/10/10/ops/common/ansible_intro/</url>
      
        <content type="html"><![CDATA[<p>Ansible 是基于python开发的，对于客户端的要求是需要有SSH和Python(如果python版本过低则 需要安装python-simplejson module)。</p><a id="more"></a><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>定义配置⽂件，配置⽂文件可以从多个地⽅方加载，其优先级顺序为:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>ANSIBLE_CONFIG (环境变量量) </span><br><span class="line"><span class="bullet">- </span>ansible.cfg (当前⽬目录)</span><br><span class="line"><span class="bullet">- </span>.ansible.cfg (home⽬目录)</span><br><span class="line"><span class="bullet">- </span>/etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p>参考: <a href="http://docs.ansible.com/ansible/intro_configuration.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/intro_configuration.html</a></p><h4 id="ansible命令"><a href="#ansible命令" class="headerlink" title="ansible命令"></a>ansible命令</h4><p>ansible 执⾏行行简单的临时命令 (ad-hoc命令)<br>ansible-playbook 执⾏行行playbook，playbook是yaml⽂文件<br>ansible-doc 查询ansible module ⽂文档</p><h5 id="ad-hoc命令"><a href="#ad-hoc命令" class="headerlink" title="ad-hoc命令"></a>ad-hoc命令</h5><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/ansible_intro_1.png" alt="ansible_intro_1"></p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">参数:</span><br><span class="line">-i 指定hosts⽂文件的位置，hosts是yaml⽂文件，all表示hosts⽂文件中的所有的组</span><br><span class="line">-m 指定ansible的<span class="keyword">module</span>，这⾥里里的<span class="keyword">command</span>表示ansible的<span class="keyword">command</span>模块，还有很多其他的模块例例如shell -a 指定args参数</span><br><span class="line">-u 指定⽤用户(因为这⾥里里是基于<span class="type">SSH</span>认证的)</span><br></pre></td></tr></table></figure><h5 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h5><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/ansible_intro_2.png" alt="ansible_intro_2"></p><p><strong>执行结果如下：</strong></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/ansible_intro_3.png" alt="ansible_intro_3"></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># test.yml 文件中 </span></span><br><span class="line"><span class="symbol">hosts:</span> 指定设备组 </span><br><span class="line"><span class="symbol">user:</span> 指定ssh⽤用户 </span><br><span class="line"><span class="symbol">tasks:</span> 关键词指明执⾏行行动作 </span><br><span class="line"><span class="symbol">name:</span> 给动作命名 </span><br><span class="line"><span class="symbol">yum:</span> ansible指定模块</span><br></pre></td></tr></table></figure><h5 id="role"><a href="#role" class="headerlink" title="role"></a>role</h5><p>使⽤用roles可以更更好的组织框架，如下:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">roles</span></span><br><span class="line">│   ├── <span class="selector-tag">copy</span></span><br><span class="line">│   │   └── <span class="selector-tag">tasks</span></span><br><span class="line">│   │       └── <span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br><span class="line">│   └── <span class="selector-tag">dmcrypt</span></span><br><span class="line">│       └── <span class="selector-tag">tasks</span></span><br><span class="line">│           └── <span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br><span class="line">└── <span class="selector-tag">site</span><span class="selector-class">.yml</span></span><br><span class="line"></span><br><span class="line">5 <span class="selector-tag">directories</span>, 3 <span class="selector-tag">files</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">site</span><span class="selector-class">.yml</span>⽂件是⼊口 </span><br><span class="line"><span class="selector-tag">tasks</span>下⽂件名必须为<span class="selector-tag">main</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><p>role下有很多结构，ansible会⾃自动按照⽂文件结构进⾏行行加载解析。具体⽬目录结构如下:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── defaults</span><br><span class="line">├── files</span><br><span class="line">├── handlers</span><br><span class="line">├── meta</span><br><span class="line">├── tasks</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/ansible_intro_4.png" alt="ansible_intro_4"></p><h5 id="python调用ansible模块"><a href="#python调用ansible模块" class="headerlink" title="python调用ansible模块"></a>python调用ansible模块</h5><h6 id="ansible-runner模块"><a href="#ansible-runner模块" class="headerlink" title="ansible.runner模块"></a>ansible.runner模块</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ansible.runner</span><br><span class="line"></span><br><span class="line">r = ansible.runner.Runner(</span><br><span class="line">    host_list=<span class="string">"/etc/ansible/hosts"</span>,</span><br><span class="line">    module_name=<span class="string">"command"</span>,</span><br><span class="line">    module_args=<span class="string">"ls"</span>,</span><br><span class="line">    forks=<span class="number">10</span>,</span><br><span class="line">    pattern=<span class="string">"cmdb"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res = r.run()</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h6 id="ansible-playbook模块"><a href="#ansible-playbook模块" class="headerlink" title="ansible.playbook模块"></a>ansible.playbook模块</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ansible.playbook</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">example_host = ansible.inventory.host.Host(name=<span class="string">'10.204.186.92'</span>, port=<span class="number">22</span>)</span><br><span class="line">example_group = ansible.inventory.group.Group(name=<span class="string">'simple_group_name'</span>)</span><br><span class="line">example_group.add_host(example_host)</span><br><span class="line">example_inventory = ansible.inventory.Inventory()</span><br><span class="line">example_inventory.add_group(example_group)</span><br><span class="line"></span><br><span class="line">stats = callbacks.AggregateStats()</span><br><span class="line">playbook_cb = = callbacks.PlaybookCallbacks(verbose=<span class="number">1</span>)</span><br><span class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=<span class="number">1</span>)</span><br><span class="line">vars = &#123;<span class="string">'ID'</span>: <span class="number">39</span>&#125;</span><br><span class="line"></span><br><span class="line">pb = ansible.playbook.PlayBook(</span><br><span class="line">    playbook=<span class="string">'playbook.yml'</span>,</span><br><span class="line">    stats=stats,</span><br><span class="line">    callbacks=playbook_cb,</span><br><span class="line">    runner_callbacks=runner_cb,</span><br><span class="line">    inventory=example_inventory,</span><br><span class="line">    subset=<span class="string">'simple_group_name'</span>,</span><br><span class="line">    extra_vars=vars</span><br><span class="line">)</span><br><span class="line">res = pb.run()</span><br></pre></td></tr></table></figure><p>具体可以查看ansible的源码</p><h6 id="yaml模块"><a href="#yaml模块" class="headerlink" title="yaml模块"></a>yaml模块</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'C:/Users/sks/Desktop/project/test/1.yml'</span>, <span class="string">'r'</span>)</span><br><span class="line">str_1 = f.read()</span><br><span class="line">str_2 = yaml.load(str_1)</span><br><span class="line">f.close()</span><br><span class="line">str_3 = yaml.dump(str_2)</span><br><span class="line">f = open(<span class="string">'C:/Users/sks/Desktop/project/test/2.yml'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str_3)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 高阶函数</title>
      <link href="/2016/05/21/backend/python/base/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2016/05/21/backend/python/base/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>高阶函数是一种将函数作为参数，或者把函数作为结果返回的函数。map 、 reduce 、 filter 、 sorted 就是高阶函数的典型例子。</p><a id="more"></a><h4 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h4><p><span style="color:red">map 函数的作用是将一个列表映射到另一个列表。</span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map(function, sequence)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>] + t[<span class="number">1</span>] + t[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x, x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">s2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s3 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(map(function1, s1))</span><br><span class="line"><span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line">print(map(function2, s1, s2))</span><br><span class="line"><span class="comment"># [2, 6, 12, 20]</span></span><br><span class="line"></span><br><span class="line">print(map(function3, zip(s1, s2, s3)))</span><br><span class="line"><span class="comment"># [6, 9, 12, 15]</span></span><br><span class="line"></span><br><span class="line">print(map(function4, s1))</span><br><span class="line"><span class="comment"># [(1, 1), (2, 4), (3, 9), (4, 16)]</span></span><br></pre></td></tr></table></figure><p>上面的四个函数，根据参数的个数，参数的类型，返回值的个数，返回值的类型来测试map函数。</p><h4 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce 函数"></a>reduce 函数</h4><p><span style="color:red">reduce 的作用是将一个列表归纳为一个输出。</span></p><p>有三个参数分别是 fucntion 、 sequence 、 startValue 。function 必须是带有两个参数的函数。startValue 可以不设置，初始化值，如果不设置那么初始化运算使用 sequence 的 s[0] 和 s[1] 进行运算，设置则是startValue 和 s[0] 运算，然后依次计算 fucntion(s[1], s[2]) ……</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reduce(function, sequence, startValue)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>] + t[<span class="number">1</span>] + t[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x, x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">s2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s3 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(reduce(function2, s1))</span><br><span class="line"><span class="comment"># 24</span></span><br><span class="line"></span><br><span class="line">print(reduce(function2, s1, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 48</span></span><br></pre></td></tr></table></figure><h4 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter 函数"></a>filter 函数</h4><p><span style="color:red">filter 函数是过滤掉列表中的一些元素。</span></p><p>这里要注意的是 filter 通过函数的返回的 bool 值来判断是否过滤，最好设置为 true or false。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function5</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">print(filter(function5, s1))</span><br><span class="line"><span class="comment"># [1, 3]</span></span><br></pre></td></tr></table></figure><h4 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted 函数"></a>sorted 函数</h4><p><span style="color:red">接收一个 key 函数来实现自定义的排序。</span></p><h5 id="普通排序"><a href="#普通排序" class="headerlink" title="普通排序"></a>普通排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sorted(iterable, key=None, reverse=False)  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><h5 id="绝对值排序"><a href="#绝对值排序" class="headerlink" title="绝对值排序"></a>绝对值排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 匿名函数</title>
      <link href="/2016/05/20/backend/python/base/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2016/05/20/backend/python/base/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>有些时候我们只是为了定义一些简单的操作，显式地定义函数略显麻烦，这时候我们可以直接使用匿名函数。</p><a id="more"></a><h4 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h4><p><span style="color:red">lambda 表达式又称为匿名函数，通常和其他高阶函数配合使用。</span>匿名函数不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda &lt;参数&gt;: 函数体</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function3</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function4</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">f1 = <span class="keyword">lambda</span> x: x*<span class="number">2</span></span><br><span class="line">f2 = <span class="keyword">lambda</span> x, y: x * y</span><br><span class="line">f3 = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line">f4 = <span class="keyword">lambda</span> x: x%<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(f1(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">print(f2(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">print(f3(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">print(f4(<span class="number">4</span>), f4(<span class="number">7</span>))</span><br><span class="line"><span class="comment"># 0, 1</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 内置函数</title>
      <link href="/2016/05/18/backend/python/base/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2016/05/18/backend/python/base/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 解释器内置了很多函数和类型，以便于我们使用。</p><a id="more"></a><table style="color:#0090c0"><tr><td colspan="5" style="text-align:center;font-weight:700;color:#000">内置函数</td></tr><tr><td>abs()</td><td>delattr()</td><td>hash()</td><td>memoryview()</td><td>set()</td></tr><tr><td>all()</td><td>dict()</td><td>help()</td><td>min()</td><td>setattr()</td></tr><tr><td>any()</td><td>dir()</td><td>hex()</td><td>next()</td><td>slice()</td></tr><tr><td>ascii()</td><td>divmod()</td><td>id()</td><td>object()</td><td>sorted()</td></tr><tr><td>bin()</td><td>enumerate()</td><td>input()</td><td>oct()</td><td>staticmethod()</td></tr><tr><td>bool()</td><td>eval()</td><td>int()</td><td>open()</td><td>str()</td></tr><tr><td>breakpoint()</td><td>exec()</td><td>isinstance()</td><td>ord()</td><td>sum()</td></tr><tr><td>bytearray()</td><td>filter()</td><td>issubclass()</td><td>pow()</td><td>super()</td></tr><tr><td>bytes()</td><td>float()</td><td>iter()</td><td>print()</td><td>tuple()</td></tr><tr><td>callable()</td><td>format()</td><td>len()</td><td>property()</td><td>type()</td></tr><tr><td>chr()</td><td>frozenset()</td><td>list()</td><td>range()</td><td>vars()</td></tr><tr><td>classmethod()</td><td>getattr()</td><td>locals()</td><td>repr()</td><td>zip()</td></tr><tr><td>compile()</td><td>globals()</td><td>map()</td><td>reversed()</td><td>__import__()</td></tr><tr><td>complex()</td><td>hasattr()</td><td>max()</td><td>round()</td><td></td></tr></table><h4 id="常用函数介绍"><a href="#常用函数介绍" class="headerlink" title="常用函数介绍"></a>常用函数介绍</h4><h5 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h5><h6 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h6><p>返回一个数的绝对值。实参可以是整数或浮点数。如果实参是一个复数，返回它的模。</p><h6 id="pow"><a href="#pow" class="headerlink" title="pow()"></a>pow()</h6><p>pow() 方法返回 xy（x的y次方） 的值。</p><h6 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h6><p>min() 方法返回给定参数的最小值，参数可以为序列。</p><h6 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h6><p>max() 方法返回给定参数的最大值，参数可以为序列。</p><h6 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h6><p>sum() 方法对系列进行求和计算。</p><h5 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h5><h6 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h6><p>getattr() 函数用于返回一个对象属性值。</p><h6 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr()"></a>hasattr()</h6><p>hasattr() 函数用于判断对象是否包含对应的属性。</p><h6 id="setattr"><a href="#setattr" class="headerlink" title="setattr()"></a>setattr()</h6><p>setattr() 函数对应函数 getattr()，用于设置属性值，该属性不一定是存在的。</p><h6 id="delattr"><a href="#delattr" class="headerlink" title="delattr()"></a>delattr()</h6><p>delattr 函数用于删除属性。delattr(x, ‘foobar’) 相等于 del x.foobar。</p><h5 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h5><h6 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h6><p>chr() 用一个整数作参数，返回一个对应的字符。</p><h6 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h6><p>ord() 函数是 chr() 函数（对于 8 位的 ASCII 字符串）的配对函数，它以一个字符串（Unicode 字符）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值。</p><h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><h6 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h6><p>sorted() 函数对所有可迭代的对象进行排序操作。</p><h6 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h6><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><h6 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h6><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><h5 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h5><h6 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h6><p>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><h6 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h6><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><h6 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h6><p>id() 函数返回对象的唯一标识符，标识符是一个整数。</p><h6 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h6><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.python.org/zh-cn/3.7/library/functions.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.7/library/functions.html</a></li><li><a href="https://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-built-in-functions.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 正则表达式</title>
      <link href="/2016/05/12/backend/python/base/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2016/05/12/backend/python/base/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它 “匹配” 了，否则，该字符串就是不合法的。</p><h4 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h4><p>Python 自1.5版本起增加了 re 模块，它提供 Perl 风格的正则表达式模式。 re 模块使 Python 语言拥有全部的正则表达式功能。</p><a id="more"></a><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>可以匹配任意单个字符除了 \n</td></tr><tr><td>*</td><td>匹配前一个字符0次或者n次</td></tr><tr><td>?</td><td>匹配前一个字符0次或者1次</td></tr><tr><td>^</td><td>表示匹配的字符必须在最前面</td></tr><tr><td>$</td><td>表示匹配的字符必须在最后面</td></tr><tr><td>+</td><td>表示匹配前一个字符1次或者n次</td></tr><tr><td>\d+</td><td>匹配数字</td></tr><tr><td>\d</td><td>匹配单个数字</td></tr><tr><td>.*</td><td>贪心算法，提取最多的内容</td></tr><tr><td>.*?</td><td>非贪心算法，提取内容</td></tr><tr><td>x\</td><td>y</td></tr><tr><td>[abc]</td><td>表示匹配 abc 当中的任意一个字符，可以使用连接符- ：例如 [a-z]</td></tr><tr><td>[^abc]</td><td>表示匹配除了列出字符以外的所有字符，是[abc]的补集</td></tr><tr><td>{n}</td><td>表示匹配前面n个字符</td></tr><tr><td>{n,}</td><td>表示匹配至少n个前面的字符</td></tr><tr><td>{n, m}</td><td>表示匹配至少n个最多m个前面的字符</td></tr></tbody></table><p>使用括号的话，括号内的是返回的结果。</p><h5 id="re-函数"><a href="#re-函数" class="headerlink" title="re 函数"></a>re 函数</h5><p>re.S : 正则匹配的时候包括 \n<br>findall() : 返回匹配的所有结果列表<br>search() : 返回匹配到的第一个结果<br>sub() ： 替换匹配的结果<br>compile() ： 把正则表达式编译为正则表达式对象</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">secret_code = <span class="string">'hadkfalifexxIxxasdasdaxxsdasdxxasadasdaxxsdaxxs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . 的使用举例</span></span><br><span class="line">a = <span class="string">'xz123'</span></span><br><span class="line">b = re.findall(<span class="string">'x.'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前一个字符0次或无限次</span></span><br><span class="line"><span class="comment"># * 的使用举例</span></span><br><span class="line">a = <span class="string">'xyxy123'</span></span><br><span class="line">b = re.findall(<span class="string">'x*'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前一个字符0次或者1次</span></span><br><span class="line"><span class="comment"># ? 的使用举例</span></span><br><span class="line">a = <span class="string">'xyx123'</span></span><br><span class="line">b = re.findall(<span class="string">'x?'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合方式</span></span><br><span class="line"><span class="comment"># .* 贪心算法，提取最多的内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx.*xx'</span>, secret_code)</span><br><span class="line"><span class="comment"># .*? 非贪心算法，提取内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx.*?xx'</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用括号和不适用括号的区别</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*)xx'</span>, secret_code)</span><br><span class="line"><span class="comment"># .*? 非贪心算法，提取内容</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># re.S 的作用是使 find 包括 \n</span></span><br><span class="line">secret_code = <span class="string">'''hadkfalifexxIxxasdasdaxxs</span></span><br><span class="line"><span class="string">dasdxxasadasdaxxsdaxxs'''</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code, re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 findall 和 search 的区别</span></span><br><span class="line">b = re.findall(<span class="string">'xx(.*?)xx'</span>, secret_code)</span><br><span class="line">b = re.search(<span class="string">'xx(.*?)xx(.*?)xx'</span>, secret_code).group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub 的使用举例</span></span><br><span class="line"><span class="comment">#替换</span></span><br><span class="line">b = re.sub(<span class="string">'xx(.*?)xx(.*?)xx'</span>, <span class="string">"123%d123"</span>, secret_code)</span><br><span class="line">b = re.sub(<span class="string">'xx(.*?)xx(.*?)xx'</span>, <span class="string">"123%d123"</span> % <span class="number">789</span>, secret_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile 的用法</span></span><br><span class="line">pattern = <span class="string">'xx(.*?)xx'</span></span><br><span class="line">new_pattern = re.compile(pattern, re.S)</span><br><span class="line">b = re.findall(new_pattern, secret_code)</span><br><span class="line"><span class="comment"># ['I', 's\ndasd', 'sda']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配数字( \d+ 匹配数字连续的依旧连续, \d 匹配数字分成一个一个数字)</span></span><br><span class="line">a = <span class="string">'asdasd123123vvvdsdfsd76989aowoie'</span></span><br><span class="line">b = re.findall(<span class="string">'(\d+)'</span>, a)</span><br><span class="line"><span class="comment"># ['123123', '76989']</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 列表推导式</title>
      <link href="/2016/05/10/backend/python/base/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
      <url>/2016/05/10/backend/python/base/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>列表推导式即 List Comprehensions ，简单却强大。</p><h4 id="列表推导式的格式"><a href="#列表推导式的格式" class="headerlink" title="列表推导式的格式"></a>列表推导式的格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x <span class="keyword">for</span> item <span class="keyword">in</span> sequence &lt;<span class="keyword">if</span> (conditions)&gt;]  <span class="comment"># 这里的x是对 item进行的操作</span></span><br><span class="line">[表达式  <span class="keyword">for</span>  变量  <span class="keyword">in</span> 列表  <span class="keyword">if</span>  条件]         <span class="comment"># 列表推导式会比for循环快很多</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x &lt; <span class="number">2</span>]</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略条件语句</span></span><br><span class="line">In [<span class="number">2</span>]: [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义表达式和条件语句</span></span><br><span class="line">In [<span class="number">3</span>]: [(x, x**<span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="keyword">if</span> x % <span class="number">3</span>]</span><br><span class="line">Out[<span class="number">3</span>]: [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个 for 和多个 if </span></span><br><span class="line">In [<span class="number">4</span>]: [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> <span class="keyword">not</span> x % <span class="number">3</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> <span class="keyword">not</span> y % <span class="number">2</span>]</span><br><span class="line">Out[<span class="number">4</span>]: [(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">0</span>), (<span class="number">3</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表达式可以是函数</span></span><br><span class="line">In [<span class="number">7</span>]: [sum([x, y]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: [sum([x, y]) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])]</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017317609699776" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017317609699776</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 动态类型</title>
      <link href="/2016/05/08/backend/python/base/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B/"/>
      <url>/2016/05/08/backend/python/base/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 的数据类型分为 mutable 和 immutable ， mutable 和 immutable 字面意思理解就是说数据可变和数据不可变。<br>mutable: list、dict<br>inmutable: int、 string、 float、 tuple…</p><a id="more"></a><h4 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h4><p>由于 Python 的变量 (variable) 不需要声明，而在赋值的时候，变量可以重新赋值为任意值，这就涉及到 Python 的一个重要的核心概念：<span style="color:red"> 动态类型 (dynamic typing) 。</span></p><h5 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h5><p>在这里重复强调一下在 Python 中一切皆对象，Python 是纯血统的面向对象的编程语言，与 java 不同。我们知道 Java 中有装箱和拆箱，基本数据类型 int 在持久化的过程中是需要封装为 Integer 的。</p><p>但是在 Python 中，一切皆对象。什么都是对象，包括你的代码，对象是存储在内存中的实体，我们在程序中使用的都是对象名，只是指向这个对象的一个引用 (reference)。</p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p><span style="color:red">引用和对象分离，是动态类型的核心，引用可以随时的指向一个新的对象。</span> 这不同于 C++ 中的指针和引用的概念，在 C++ 中指针在逻辑上是独立存在的，但是引用是和对象绑定在一起的。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'blazehu'</span></span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>第一行：在内存中建立了对象 ‘blazehu’(字符串类型)，通过赋值让引用 a 指向它。<br>第二行：2是在内存中存在的整数对象，将引用 a 指向2，于是 ‘blazehu’ 就没有引用指向它， Python 会自动的将这种没有引用指向的垃圾销毁掉，释放相应的内存空间。</p><h5 id="immutable（不可变数据类型）"><a href="#immutable（不可变数据类型）" class="headerlink" title="immutable（不可变数据类型）"></a>immutable（不可变数据类型）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(x)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这样类似于 C/C++ 中的值传递，即传递的引用不能改变自身，只是改变了引用的指向。</p><h5 id="mutable（可变数据类型）"><a href="#mutable（可变数据类型）" class="headerlink" title="mutable（可变数据类型）"></a>mutable（可变数据类型）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(x)</span><br><span class="line">[<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>这就类似于 C/C++ 中的指针传递，即传递的引用可以引用自身的元素改变自身，改变了引用的值。 但是元组 (tuple) ，尽管可以调用引用元素，但不可以赋值，因此不能改变对象自身，所以也算是 immutable object 。</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>对于较小的整数和短字符 Python 会缓存这些对象，而不是频繁的创建和销毁。<br><span style="color:red">256 is an existing object but 257 isn’t.</span> When you start up python the numbers from <span style="color:red">-5 to 256 </span>will be allocated. These numbers are used a lot, so it makes sense just to have them ready.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">256</span>)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">257</span>)</span><br><span class="line"><span class="number">140084850247312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">140084850247440</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">140084850247344</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><span style="color:red">对于 inmutable object 我们在函数参数传递是值传递</span><br><span style="color:red">对于 mutable object 我们在函数参数传递是指针传递</span></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://github.com/satwikkansal/wtfpython" target="_blank" rel="noopener">https://github.com/satwikkansal/wtfpython</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html" target="_blank" rel="noopener">https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 包裹传递和解包裹</title>
      <link href="/2016/05/07/backend/python/base/%E5%8C%85%E8%A3%B9%E4%BC%A0%E9%80%92%E5%92%8C%E8%A7%A3%E5%8C%85%E8%A3%B9/"/>
      <url>/2016/05/07/backend/python/base/%E5%8C%85%E8%A3%B9%E4%BC%A0%E9%80%92%E5%92%8C%E8%A7%A3%E5%8C%85%E8%A3%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="包裹传递"><a href="#包裹传递" class="headerlink" title="包裹传递"></a>包裹传递</h4><p>在定义函数时，我们有时候并不知道调用的时候会传递多少个参数。 这时候，包裹 (packing) 位置参数，或者包裹关键字参数，来进行参数传递，会非常有用。</p><a id="more"></a><h5 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*name)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(type(name))</span><br><span class="line"><span class="meta">... </span>    print(name)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">func</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>)</span></span></span><br></pre></td></tr></table></figure><p>两次调用，尽管参数个数不同，都基于同一个 func 定义。在 func 的参数表中，所有的参数被 name 收集，根据位置合并成一个元组 (tuple) ，这就是包裹位置传递。<br>name 是包裹位置传递所用的元组名，在定义 func 时，在 name 前加 * 号。</p><h5 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(type(x))</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'a': 1, 'b': 2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'a': 1, 'b': 2, 'c': 3&#125;</span><br></pre></td></tr></table></figure><p>与上面一个例子类似， dict 是一个字典，收集所有的关键字，传递给函数 func 。参数 dict 是包裹关键字传递所用的字典，在 dict 前加 **。</p><h4 id="解包裹"><a href="#解包裹" class="headerlink" title="解包裹"></a>解包裹</h4><p>* 和 ** ，也可以在调用的时候使用，即解包裹 (unpacking) ，下面为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b ,c)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, b, c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*args)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(**kwargs)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><span style="color:red">包裹传递在定义函数时，元组前加 * 、字典前加 ** 。</span><br><span style="color:red">包裹和解包裹并不是相反操作，是两个相对独立的过程。</span></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 执行系统命令</title>
      <link href="/2016/05/02/backend/python/base/%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/05/02/backend/python/base/%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python 执行系统命令有很多种方法，下面给出了常见的四种方式。</p><a id="more"></a><h4 id="os-system"><a href="#os-system" class="headerlink" title="os.system"></a>os.system</h4><p>os.system 直接调用标准 C 的 system() 函数，仅仅在一个子终端运行系统命令，而不能获取命令执行后的返回信息，返回脚本的退出状态码。</p><h5 id="用于测试的-shell-脚本-test-sh"><a href="#用于测试的-shell-脚本-test-sh" class="headerlink" title="用于测试的 shell 脚本 test.sh"></a>用于测试的 shell 脚本 test.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "Hello World!!!"</span><br><span class="line">exit 3</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status = os.system(<span class="string">"bash test.sh"</span>)</span><br><span class="line">Hello World!!!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status</span><br><span class="line"><span class="number">768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status &gt;&gt; <span class="number">8</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>该方法在调用完 shell 脚本后，返回一个16位的二进制数，<span style="color:red">低位为杀死所调用脚本的信号号码，高位为脚本的退出状态码。</span> 返回的结果都是0（使用位运算向右位移8位得到的结果就是高位值），代表代码正常退出。我们如果需要的到脚本执行后返回的状态码，可以使用位运算得到。</p><h4 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a>os.popen</h4><p>这种调用方法是通过管道的方式来实现的，函数返回一个 file-like 的对象，里面的内容是脚本输出的内容（可以简单的理解为 echo 的输出内容）。</p><h5 id="用于测试的-shell-脚本-test-sh-1"><a href="#用于测试的-shell-脚本-test-sh-1" class="headerlink" title="用于测试的 shell 脚本 test.sh"></a>用于测试的 shell 脚本 test.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "Hello World!!!"</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = os.popen(<span class="string">"bash test.sh"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output</span><br><span class="line">&lt;open file <span class="string">'bash test.sh'</span>, mode <span class="string">'r'</span> at <span class="number">0x1031bd780</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output.read()</span><br><span class="line"><span class="string">'Hello World!!!\n'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="commands-模块"><a href="#commands-模块" class="headerlink" title="commands 模块"></a>commands 模块</h4><p><strong>1. getstatusoutput(cmd)</strong><br>使用 os.popen() 执行命令 cmd ，然后返回两个元素的元组（status, result）。<span style="color:red">执行方式： { cmd; } 2&gt;&amp;1 ，返回结果里包含标准输出和标准错误。</span></p><p><strong>2. getoutput(cmd)</strong><br>只返回执行的结果，忽略状态码。</p><p><strong>3. getstatus(file)</strong><br>返回 ls -ld file 执行的结果</p><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status, output = commands.getstatusoutput(<span class="string">"bash test.sh"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status</span><br><span class="line"><span class="number">768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output</span><br><span class="line"><span class="string">'Hello World!!!'</span></span><br></pre></td></tr></table></figure><h4 id="subprocess-模块"><a href="#subprocess-模块" class="headerlink" title="subprocess 模块"></a>subprocess 模块</h4><p>功能强大的子进程管理模块。</p><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">"bash test.sh"</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stdout.read()</span><br><span class="line"><span class="string">'Hello World!!!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stderr.read()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 第三方模块</title>
      <link href="/2016/05/01/backend/python/base/%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85/"/>
      <url>/2016/05/01/backend/python/base/%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h4><p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。Mac 或 Linux 预安装了 pip 和 Python。</p><a id="more"></a><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><h6 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 pika 模块</span></span><br><span class="line"><span class="attr">easy_install</span> <span class="string">pika</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install pika</span></span><br></pre></td></tr></table></figure><h6 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h6><p>Linux 上如果没有安装 pip 工具的话可以在官网上下载 pip 的源码包安装。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">tar -zxvf <span class="module-access"><span class="module"><span class="identifier">XXXX</span>.</span></span>tar.gz (<span class="keyword">or</span> tar jxvf <span class="module-access"><span class="module"><span class="identifier">XXXX</span>.</span></span>tar.bz2)  </span><br><span class="line">cd XXXX</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><span style="color:red">如果 Windows 提示未找到命令，需要配置环境变量。</span>即将 C:\Python27\Scripts 配置到 path 里。然后在 cmd 命令行使用 pip 或者 easy_install 命令安装需要的模块。</p><h6 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h6><p>在官网上下载对应版本的 module 模块，直接安装。</p><h6 id="pip-安装-1"><a href="#pip-安装-1" class="headerlink" title="pip 安装"></a>pip 安装</h6><h6 id="easy-install-安装"><a href="#easy-install-安装" class="headerlink" title="easy_install 安装"></a>easy_install 安装</h6><h4 id="第三方模块安装路径"><a href="#第三方模块安装路径" class="headerlink" title="第三方模块安装路径"></a>第三方模块安装路径</h4><p>Python 默认将三方模块安装到 site-packages ，但是如果使用 Debian 软件管理器安装，模块将被安装到 dist-packages 。</p><h5 id="查看第三方模块安装路径"><a href="#查看第三方模块安装路径" class="headerlink" title="查看第三方模块安装路径"></a>查看第三方模块安装路径</h5><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.sysconfig <span class="keyword">import</span> get_python_lib</span><br><span class="line"><span class="built_in">print</span> (get_python_lib())</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/kevin922/p/3161411.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevin922/p/3161411.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 之 AWS RDS 查看慢日志</title>
      <link href="/2015/12/10/ops/mysql/aws_rds_slow_log/"/>
      <url>/2015/12/10/ops/mysql/aws_rds_slow_log/</url>
      
        <content type="html"><![CDATA[<h4 id="查看慢日志"><a href="#查看慢日志" class="headerlink" title="查看慢日志"></a>查看慢日志</h4><p>需要修改 RDS 的参数组，开启记录慢查询日志。</p><a id="more"></a><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>开启 RDS 记录慢查询日志，然后再次按照之前的文档查询日志，参考步骤如下：</p><ol><li>登陆 AWS Console 页面，打开 RDS 服务。</li><li>左侧导航栏中找到参数组，修改参数组 sys-mysql，依次修改如下参数：<table><tr><td>slow_query_log</td><td>要创建慢速查询日志，请设置为 1。默认值为 0。</td></tr><tr><td>long_query_time</td><td>要防止在慢速查询日志中记录快速运行的查询，请指定需要记录的最短查询执行时间值，以秒为单位。默认值为 10 秒，最小值为 0。如果大于这个规定的时间就会记录。</td></tr><tr><td>log_output option</td><td>可以指定为 FILE，TABLE 或者 NONE。NONE 为不记录，FILE 是以文件的形式保存，一小时一次。TABLE 是存储到 MySQL 的一个表当中，慢速查询写入 mysql.slow_log 表。</td></tr></table></li><li>如果配置的是 table 可以通过如下方式查看：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  mysql.slow_log;</span><br></pre></td></tr></table></figure></li></ol><h5 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h5><ul><li><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_LogAccess.Concepts.MySQL.html" target="_blank" rel="noopener">慢查询日志</a></li><li><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html#USER_WorkingWithParamGroups.Modifying" target="_blank" rel="noopener">修改参数组</a></li><li><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/mysql_rds_set_external_master.html" target="_blank" rel="noopener">mysql_rds_set_external_master</a></li><li><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/Appendix.MySQL.CommonDBATasks.html" target="_blank" rel="noopener">common_dba_tasks</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 主从同步</title>
      <link href="/2015/10/23/ops/mysql/master_slave/"/>
      <url>/2015/10/23/ops/mysql/master_slave/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>主从同步分三个步骤：</p><ol><li>master 将改变记录到二进制日志 <code>binary log</code> 中（这些记录叫做二进制日志事件，binary log events）。</li><li>slave 将 master 的 binary log events 拷贝到它的中继日志 relay log 中。</li><li>slave 重做中继日志中的事件，将改变反映它自己的数据。</li></ol><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="https://ftp.bmp.ovh/imgs/2020/06/6cc1471efd7bdf88.png" alt></p><a id="more"></a><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><h5 id="生成快照"><a href="#生成快照" class="headerlink" title="生成快照"></a>生成快照</h5><p>如果数据库是 <code>MYISAM</code> 或者既有 <code>MYISAM</code> 又有 <code>INNODB</code> 的话使用如下命令导出一个快照：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --lock-tables --events --triggers --routines --flush-logs --master-data=2 --databases <span class="built_in">test</span> &gt; db.sql</span><br></pre></td></tr></table></figure><table><tr><td>--locl-tables</td><td>导出数据时锁表</td></tr><tr><td>--events</td><td>会把创建的所有事件也导出来</td></tr><tr><td>--triggers</td><td>会把创建的事务也导出来</td></tr><tr><td>--routines</td><td>这个是存储过程和存储方法</td></tr><tr><td>--flush-log</td><td>导出时先刷新下 binglog 日志</td></tr><tr><td>--master-data=2</td><td>导出的文件里 change master 是被注释掉的 ，等于1时不是注释的，这个根据自己的要求改，一般都会选择2因为在从服务器上需要 change 一下 主服务器的ip，端口 ，账号 ，密码</td></tr></table><p>如果数据库只有 <code>INNODB</code>，可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --single-transaction --events --triggers --routines --flush-logs --master-data=2 --databases <span class="built_in">test</span> &gt; db.sql</span><br></pre></td></tr></table></figure><table><tr><td>--single-transaction</td><td>这个参数只对 innodb 适用</td></tr><tr><td>--databases</td><td>后面跟除 mysql 以后的其他所有数据库的库名，我这里只有一个 test 库</td></tr><tr><td>--master-data</td><td>参数会记录导出快照时候的 mysql 二进制日志位置，下面会用到</td></tr></table><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>修改 mysql 的配置文件 my.cnf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 [mysqld] 配置段下添加如下字段</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log-bin</span>=log</span><br><span class="line"><span class="attr">binlog-do-db</span>=database_name    //需要同步的数据库，如果没有这一行那么表示同步所有的数据库</span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql        //被忽略的数据库</span><br></pre></td></tr></table></figure><h5 id="新建同步账号"><a href="#新建同步账号" class="headerlink" title="新建同步账号"></a>新建同步账号</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.*  <span class="keyword">to</span> repl@<span class="number">192.168</span><span class="number">.80</span><span class="number">.35</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h5 id="查看日志情况"><a href="#查看日志情况" class="headerlink" title="查看日志情况"></a>查看日志情况</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span></span><br></pre></td></tr></table></figure><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>修改 mysql 的配置文件 my.cnf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 [mysqld] 配置段下添加如下字段</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">master-host</span>=<span class="number">192.168</span>.<span class="number">80.35</span></span><br><span class="line"><span class="attr">master-user</span>=repl</span><br><span class="line"><span class="attr">master-password</span>=password</span><br><span class="line"><span class="attr">master-port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">master-connect-retry</span>=<span class="number">60</span>       //如果从服务器发现主服务器断掉，重新连接的时间差（秒）</span><br><span class="line"><span class="comment">#replicate-ignore-db=mysql    //忽略的数据库</span></span><br><span class="line"><span class="comment">#replicate-do-db=repl         //同步的数据库（需要备份的数据库名），不写本行代表需要同步所有的数据库</span></span><br></pre></td></tr></table></figure><h5 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h5 id="快照还原，开始同步"><a href="#快照还原，开始同步" class="headerlink" title="快照还原，开始同步"></a>快照还原，开始同步</h5><p>先将从主库生成的快照文件还原，然后在 master 主机上使用 grep 命令查找到二进制日志 <code>binglog</code> 的名称以及位置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -i <span class="string">"change master"</span> db.sql</span><br><span class="line"><span class="comment"># -- CHANGE MASTER TO  MASTER_LOG_FILE='log.xxxx', MASTER_LOG_POS=98;</span></span><br></pre></td></tr></table></figure><p><strong>change master</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>;</span><br><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'192.168.80.35'</span>, master_user=<span class="string">'repl'</span>, master_password=<span class="string">'password'</span>, master_log_file=<span class="string">'log.xxxx'</span>, master_log_pos=<span class="number">98</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure><p>如果 Slave_IO_Running 、 Slave_SQL_Running 状态为 Yes，则表明设置成功。</p><h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><h5 id="start-slave-报错"><a href="#start-slave-报错" class="headerlink" title="start slave 报错"></a>start slave 报错</h5><h6 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h6><p><span style="color:red">ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO</span></p><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">执行 <span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span> 提示 <span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line">原因：<span class="keyword">slave</span> 已经默认开启，要先关闭再开启</span><br></pre></td></tr></table></figure><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. 先执行 slave <span class="keyword">stop</span></span><br><span class="line"><span class="number">2.</span> 再执行 <span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'192.168.80.35'</span>,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'password'</span>, master_log_file=<span class="string">'log.000003'</span> ,master_log_pos=<span class="number">98</span>;</span><br><span class="line">3. 再执行 slave <span class="keyword">start</span></span><br><span class="line"><span class="number">4.</span> 最后查看状态 <span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G</span><br></pre></td></tr></table></figure><h4 id="测试主从同步"><a href="#测试主从同步" class="headerlink" title="测试主从同步"></a>测试主从同步</h4><p>在我们配置的主从同步的数据库下建测试表，对数据进行操作，然后在另一边查看是否同步。</p><h4 id="清除主从同步配置信息"><a href="#清除主从同步配置信息" class="headerlink" title="清除主从同步配置信息"></a>清除主从同步配置信息</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; slave stop;</span><br><span class="line">mysql&gt; reset slave;</span><br><span class="line">mysql&gt; change master to master_user='', master_host='', master_password='';</span><br></pre></td></tr></table></figure><h5 id="清除失败"><a href="#清除失败" class="headerlink" title="清除失败"></a>清除失败</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可能报错：ERROR 1210 (HY000): Incorrect arguments to MASTER_HOST 。解决办法如下：</span></span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host=' ';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令报错的原因，为 master_host=' ' 里面必须有内容，即使为空，也应该用空格代替，而不能什么都不写。</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/myIvan/p/10164926.html" target="_blank" rel="noopener">https://www.cnblogs.com/myIvan/p/10164926.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 学习笔记</title>
      <link href="/2015/09/01/ops/mysql/study_notes/"/>
      <url>/2015/09/01/ops/mysql/study_notes/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统) 应用软件之一。</p><a id="more"></a><p><span style="color:red">Server version: 5.7.17 MySQL Community Server (GPL)</span></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u用户名 -p用户密码 （如果连接远端机器加上参数 -h 远端机器IP  -P 端口）</span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">mysql -h 127.0.0.1 -P 3306 -uroot -ppassword</span><br></pre></td></tr></table></figure><h5 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h4><h5 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user 'blazehu'@'127.0.0.1' identified by 'readonly';</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select Host, User from mysql.user;</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">| Host      | User      |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">| %         | root      |</span><br><span class="line">| 127.0.0.1 | blazehu   |</span><br><span class="line">| 127.0.0.1 | root      |</span><br><span class="line">| localhost | mysql.sys |</span><br><span class="line">| localhost | root      |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop user 'blazehu'@'127.0.0.1';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="用户赋权"><a href="#用户赋权" class="headerlink" title="用户赋权"></a>用户赋权</h5><p>使用 <code>grant</code> 增加新用户设置用户权限等 （可以直接对 <code>mysql.user</code> 用户表操作，来修改用户密码等）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant select, update, insert, delete on test.* to 'blazehu'@'127.0.0.1' identified by '123456';</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show grants for 'blazehu'@'127.0.0.1';</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line">| Grants for blazehu@127.0.0.1                                              |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line">| <span class="keyword">GRANT</span> <span class="keyword">USAGE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span>                               |</span><br><span class="line">| <span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">`test`</span>.* <span class="keyword">TO</span> <span class="string">'blazehu'</span>@<span class="string">'127.0.0.1'</span> |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="用户重命名"><a href="#用户重命名" class="headerlink" title="用户重命名"></a>用户重命名</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; rename user 'blazehu'@'127.0.0.1' to 'blaze'@'127.0.0.1';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=password('123456') where user='blaze';</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; set password for 'blaze'@'127.0.0.1'=password('123456');</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>也可以使用 <code>mysqladmin</code> 命令来修改密码。</p><h4 id="数据库基础操作"><a href="#数据库基础操作" class="headerlink" title="数据库基础操作"></a>数据库基础操作</h4><h5 id="显示数据库列表"><a href="#显示数据库列表" class="headerlink" title="显示数据库列表"></a>显示数据库列表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database test default character set utf8;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use test</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database test;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="数据表基础操作"><a href="#数据表基础操作" class="headerlink" title="数据表基础操作"></a>数据表基础操作</h4><h5 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+<span class="comment">-----------------------------------+</span></span><br><span class="line">| Tables_in_test                    |</span><br><span class="line">+<span class="comment">-----------------------------------+</span></span><br><span class="line">| account_permission                |</span><br><span class="line">| account_userpermission            |</span><br><span class="line">| auth_group                        |</span><br><span class="line">| auth_group_permissions            |</span><br><span class="line">| auth_permission                   |</span><br><span class="line">| auth_user                         |</span><br><span class="line">| auth_user_groups                  |</span><br><span class="line">| auth_user_user_permissions        |</span><br><span class="line">| authtoken_token                   |</span><br><span class="line">| django_admin_log                  |</span><br><span class="line">| django_cas_ng_proxygrantingticket |</span><br><span class="line">| django_cas_ng_sessionticket       |</span><br><span class="line">| django_content_type               |</span><br><span class="line">| django_migrations                 |</span><br><span class="line">| django_session                    |</span><br><span class="line">+<span class="comment">-----------------------------------+</span></span><br><span class="line">15 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="查看数据库表结构"><a href="#查看数据库表结构" class="headerlink" title="查看数据库表结构"></a>查看数据库表结构</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc auth_user;</span><br><span class="line">+<span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field        | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| id           | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| password     | varchar(128) | NO   |     | NULL    |                |</span><br><span class="line">| last_login   | datetime(6)  | YES  |     | NULL    |                |</span><br><span class="line">| is_superuser | tinyint(1)   | NO   |     | NULL    |                |</span><br><span class="line">| username     | varchar(150) | NO   | UNI | NULL    |                |</span><br><span class="line">| first_name   | varchar(30)  | NO   |     | NULL    |                |</span><br><span class="line">| last_name    | varchar(150) | NO   |     | NULL    |                |</span><br><span class="line">| email        | varchar(254) | NO   |     | NULL    |                |</span><br><span class="line">| is_staff     | tinyint(1)   | NO   |     | NULL    |                |</span><br><span class="line">| is_active    | tinyint(1)   | NO   |     | NULL    |                |</span><br><span class="line">| date_joined  | datetime(6)  | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table auth_user;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><h5 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table auth_user \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: auth_user</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_login`</span> datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`is_superuser`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`is_staff`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`is_active`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`date_joined`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR</span>:</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">query</span> specified</span><br></pre></td></tr></table></figure><h5 id="数据库表增删改查"><a href="#数据库表增删改查" class="headerlink" title="数据库表增删改查"></a>数据库表增删改查</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">插入： <span class="keyword">insert</span> <span class="keyword">into</span> tablename <span class="keyword">values</span>(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">删除： <span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span>  ...;</span><br><span class="line">更新： <span class="keyword">update</span> tablename <span class="keyword">set</span> a=<span class="string">""</span> <span class="keyword">where</span> ...;</span><br><span class="line">查找： <span class="keyword">select</span> * <span class="keyword">from</span> tablename <span class="keyword">where</span> ...;</span><br></pre></td></tr></table></figure><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table auth_user add key test__name(name) using btree;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><h5 id="查看数据库变量信息"><a href="#查看数据库变量信息" class="headerlink" title="查看数据库变量信息"></a>查看数据库变量信息</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like "character%";</span><br><span class="line">+<span class="comment">--------------------------+----------------------------+</span></span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+<span class="comment">--------------------------+----------------------------+</span></span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | utf8mb4                    |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+<span class="comment">--------------------------+----------------------------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h5 id="查看数据库大小"><a href="#查看数据库大小" class="headerlink" title="查看数据库大小"></a>查看数据库大小</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from information_schema.TABLES where table_schema='test';</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| data   |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| 0.56MB |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h5 id="查看数据表大小"><a href="#查看数据表大小" class="headerlink" title="查看数据表大小"></a>查看数据表大小</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT TABLE_NAME, round(DATA_LENGTH/1024/1024,2) as data ,TABLE_ROWS FROM information_schema.TABLES WHERE TABLE_SCHEMA='test' order by data desc limit 10;</span><br><span class="line">+<span class="comment">---------------------------+------+------------+</span></span><br><span class="line">| TABLE_NAME                | data | TABLE_ROWS |</span><br><span class="line">+<span class="comment">---------------------------+------+------------+</span></span><br><span class="line">| django_session            | 4.45 |        410 |</span><br><span class="line">| cloud_hostmaintenanceuser | 1.52 |       7648 |</span><br><span class="line">| storage_cephbucket        | 1.52 |       1284 |</span><br><span class="line">| redis_draft_service_log   | 0.52 |        990 |</span><br><span class="line">| kubemetrics_nodeinfos     | 0.42 |       1235 |</span><br><span class="line">| saltstack_saltgrainsitems | 0.30 |       1409 |</span><br><span class="line">| auth_user_groups          | 0.23 |       3055 |</span><br><span class="line">| storage_glusterbrick      | 0.22 |       1328 |</span><br><span class="line">| saltstack_addonversion    | 0.17 |       1283 |</span><br><span class="line">| auth_user                 | 0.14 |       1171 |</span><br><span class="line">+<span class="comment">---------------------------+------+------------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h5 id="修改默认分隔符"><a href="#修改默认分隔符" class="headerlink" title="修改默认分隔符"></a>修改默认分隔符</h5><p>默认分隔符为 “;”</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br></pre></td></tr></table></figure><h5 id="MySQL-主从，跳过一个错误"><a href="#MySQL-主从，跳过一个错误" class="headerlink" title="MySQL 主从，跳过一个错误"></a>MySQL 主从，跳过一个错误</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> SQL_SLAVE_SKIP_COUNTER = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="通过脚本操作数据库"><a href="#通过脚本操作数据库" class="headerlink" title="通过脚本操作数据库"></a>通过脚本操作数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h host -P port -uUsername -pPassword -e <span class="string">"command"</span></span><br></pre></td></tr></table></figure><h4 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h4><h5 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h5><h6 id="mysqldump-命令"><a href="#mysqldump-命令" class="headerlink" title="mysqldump 命令"></a>mysqldump 命令</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包括数据库中的数据</span></span><br><span class="line">root@demo:/<span class="comment"># mysqldump -uroot -ppassword test &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不包括数据库中的数据</span></span><br><span class="line">root@demo:/<span class="comment"># mysqldump -uroot -ppassword -d test &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库中的某张表（包含数据）</span></span><br><span class="line">root@demo:/<span class="comment"># mysqldump -uroot -ppassword test auth_user &gt; test.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库中的某张表（不包含数据）</span></span><br><span class="line">root@demo:/<span class="comment"># mysqldump -uroot -ppassword -d test auth_user &gt; test.sql</span></span><br></pre></td></tr></table></figure><h5 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h5><h6 id="mysql-命令"><a href="#mysql-命令" class="headerlink" title="mysql 命令"></a>mysql 命令</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@demo:/<span class="comment"># mysql -uroot -ppassword test &lt; test.sql</span></span><br></pre></td></tr></table></figure><h6 id="source-命令"><a href="#source-命令" class="headerlink" title="source 命令"></a>source 命令</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; source test.sql;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="备份数据表"><a href="#备份数据表" class="headerlink" title="备份数据表"></a>备份数据表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table auth_user_bak as select * from auth_user;</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h5 id="热备工具"><a href="#热备工具" class="headerlink" title="热备工具"></a>热备工具</h5><p>qpress 解压工具<br>percona-xtrabackup 热备工具</p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="在做数据库主从和备份的时候发现-dump-失败-？"><a href="#在做数据库主从和备份的时候发现-dump-失败-？" class="headerlink" title="在做数据库主从和备份的时候发现 dump 失败 ？"></a>在做数据库主从和备份的时候发现 dump 失败 ？</h5><p>mysqldump 失败的原因可能是 my.cnf <span style="color:red">“#innodb_force_recovery=1”</span> 参数没有注释掉，这个参数放开会导致数据库不能做 insert、update、dump 数据库等操作。</p><h5 id="Ubuntu-12-04-安装-mysql-python-提示找不到-mysql-config-？"><a href="#Ubuntu-12-04-安装-mysql-python-提示找不到-mysql-config-？" class="headerlink" title="Ubuntu 12.04 安装 mysql-python 提示找不到 mysql_config ？"></a>Ubuntu 12.04 安装 mysql-python 提示找不到 mysql_config ？</h5><p>安装 libmysqlclient-dev 库： <span style="color:red">sudo apt-get install libmysqlclient-dev </span>。安装完成之后在 /etc/mysql 下会生成默认的 my.cnf 配置文件 ，系统优先读取该路径下的配置文件信息，这时候需要注意检查配置文件是否正确。</p><h5 id="通过-shell-watch-mysql-的一些参数，发现-mysql-连接断开，报错-too-many-connection-？"><a href="#通过-shell-watch-mysql-的一些参数，发现-mysql-连接断开，报错-too-many-connection-？" class="headerlink" title="通过 shell watch mysql 的一些参数，发现 mysql 连接断开，报错 too many connection ？"></a>通过 shell watch mysql 的一些参数，发现 mysql 连接断开，报错 too many connection ？</h5><p>watch 每隔2秒钟 连接一次 mysql 导致数据库连接过多，数据库自动断开连不上。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-tutorial.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双机热备（keepalived）</title>
      <link href="/2015/08/16/ops/linux/keepalived/"/>
      <url>/2015/08/16/ops/linux/keepalived/</url>
      
        <content type="html"><![CDATA[<h4 id="keepalived是什么？"><a href="#keepalived是什么？" class="headerlink" title="keepalived是什么？"></a>keepalived是什么？</h4><p>Keepalived 是Linux下一个轻量级别的高可用解决方案。除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件。</p><a id="more"></a><blockquote><p>Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。<br>keepalived官网: <a href="http://www.keepalived.org" target="_blank" rel="noopener">http://www.keepalived.org</a></p></blockquote><h4 id="keepalived高可用架构示意图"><a href="#keepalived高可用架构示意图" class="headerlink" title="keepalived高可用架构示意图"></a>keepalived高可用架构示意图</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/keepalived_1.png" alt="keepalived_1"></p><h4 id="keepalived实践"><a href="#keepalived实践" class="headerlink" title="keepalived实践"></a>keepalived实践</h4><p>提供2台物理机，3个内网ip分别为：<span style="color:red">10.10.10.126（主节点），10.10.10.127（备用节点），10.10.10.129 （对外提供服务的虚拟IP）</span><br>在这种模式下，虚拟IP：<span style="color:red">10.10.10.129</span>，在某时刻只能属于某一个节点，另一个节点作为备用节点存在。当主节点不可用时，备用节点接管虚拟IP（即虚拟IP漂移至节点B），提供正常服务。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在两台服务器上分别安装 keepalived，使用源码包安装。</p><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#10.10.10.126</span></span><br><span class="line">sudo vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state MASTER         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    interface eth0       #虚IP地址放置的网卡位置</span><br><span class="line">    virtual_router_id 51 #保持主从服务器一致</span><br><span class="line">    priority 100         #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    advert_int 1         #心跳广播（VRRP Multicast）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    authentication &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass 1234    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.10.129      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red">注意：备份服务器 10.10.10.127 配置中 state 要改成 BACKUP，同时调低 priority。</span></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#10.10.10.127</span></span><br><span class="line">sudo vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state BACKUP         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    interface eth0       #虚IP地址放置的网卡位置</span><br><span class="line">    virtual_router_id 51 #保持主从服务器一致</span><br><span class="line">    priority 99          #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    advert_int 1         #心跳广播（VRRP Multicast）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    authentication &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass 1234    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.10.129      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动keepalived服务"><a href="#启动keepalived服务" class="headerlink" title="启动keepalived服务"></a>启动keepalived服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service keepalived start</span><br><span class="line">keepalived -D -f /usr/<span class="built_in">local</span>/etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><p>查看log消息:</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">tail -f /<span class="built_in">var</span>/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure><p>启动主节点 10.10.10.126 后, messages日志为: <code>广播ARP消息</code>，重启keepalived服务之后使用: <code>ip a</code> 查看虚拟IP信息</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.126</span> 机器上有两个ip ： 本机IP <span class="number">10.10</span><span class="number">.10</span><span class="number">.126</span> 和 虚拟IP <span class="number">10.10</span><span class="number">.10</span><span class="number">.129</span> </span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.127</span> 机器上有一个ip ： 本机IP <span class="number">10.10</span><span class="number">.10</span><span class="number">.127</span>\</span><br></pre></td></tr></table></figure><p>在第三台机器上进行访问</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">curl <span class="string">http:</span><span class="comment">//10.10.10.126</span></span><br><span class="line">curl <span class="string">http:</span><span class="comment">//10.10.10.127</span></span><br><span class="line">curl <span class="string">http:</span><span class="comment">//10.10.10.129</span></span><br></pre></td></tr></table></figure><p>为了防止备用节点浪费资源，可以使用相互热备<br>分别修改126和127的机器的keepalived 配置文件，增加一个新的配置：VI_2</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;     </span><br><span class="line">    state BACKUP         #设置为备服务器（状态参数 MASTER/BACKUP</span><br><span class="line">    interface eth0       #虚IP地址放置的网卡位置</span><br><span class="line">    virtual_router_id 51 #保持主从服务器一致</span><br><span class="line">    priority 99          #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    advert_int 1         #心跳广播（VRRP Multicast）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    authentication &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass 1234    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.10.129      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;     </span><br><span class="line">    state MASTER         #设置为主服务器（状态参数 master/backup）</span><br><span class="line">    interface eth0       #虚IP地址放置的网卡位置</span><br><span class="line">    virtual_router_id 52 #保持主从服务器一致</span><br><span class="line">    priority 100         #优先级（决定是主还是备，越大越优先）</span><br><span class="line">    advert_int 1         #心跳广播（VRRP Multicast）间隔（秒）</span><br><span class="line">    </span><br><span class="line">    authentication &#123;    </span><br><span class="line">        auth_type PASS    #VRRP认证方式，主备必须一致</span><br><span class="line">        auth_pass 1234    #认证密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.10.130      #设备之间使用的虚拟ip地址，可以多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>磁盘挂载（aws）</title>
      <link href="/2015/08/15/ops/linux/aws_mount_disk/"/>
      <url>/2015/08/15/ops/linux/aws_mount_disk/</url>
      
        <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>在AWS上新建一块磁盘，需要选择分区，大小等，然后关联在相关的机器上面；创建完成后远程登陆到该机器上进行一系列的挂载操作。</p><a id="more"></a><h4 id="创建磁盘"><a href="#创建磁盘" class="headerlink" title="创建磁盘"></a>创建磁盘</h4><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/aws_mount_disk_1.png" alt="aws_mount_disk_1"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/aws_mount_disk_2.png" alt="aws_mount_disk_2"></p><p>一般使用通用（SSD），注意对应服务器的区域</p><h4 id="远程连接上服务器"><a href="#远程连接上服务器" class="headerlink" title="远程连接上服务器"></a>远程连接上服务器</h4><p>fdisk -l 查看磁盘的信息 （可以看到磁盘的信息）</p><h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk  /dev/XXX</span><br><span class="line">选择 add a now partition</span><br><span class="line">然后 w write（保存）</span><br></pre></td></tr></table></figure><p>当硬盘大于2T的时候，用parted命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/xxx                 （ 用parted命令对/dev/xxx进行分区 ）</span><br><span class="line">mklabel gpt                     （ 用gpt格式将硬盘弄到一个分区里 ）</span><br><span class="line">unit TB                         （ 设置单位为TB ）</span><br><span class="line">mkpart  primary  0  3           （ 设置一个主分区，大小为3TB，开始为0，结束威3 ）</span><br><span class="line"><span class="built_in">print</span>                           （ 显示设置的分区大小 ）</span><br><span class="line">quit                            （ 退出parted程序 ）</span><br></pre></td></tr></table></figure><h4 id="新建文件系统"><a href="#新建文件系统" class="headerlink" title="新建文件系统"></a>新建文件系统</h4><p>分好区之后需要新建文件系统</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4   /dev/xxx</span><br></pre></td></tr></table></figure><h4 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h4><p>新建文件系统之后需要 mount 该磁盘到一个目录下，我们需要新建一个目录，然后执行挂载命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount  /dev/xxx   /xxxxxxxx（我们需要的目录）</span><br></pre></td></tr></table></figure><p>查看磁盘是否挂载成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h4 id="自动挂载设置"><a href="#自动挂载设置" class="headerlink" title="自动挂载设置"></a>自动挂载设置</h4><p>然后我们需要在 <code>/etc/fstab</code> 下添加重启自动挂载信息（这里比较重要的是，如果这里出错，机器重启时将启动不成功，所以配置完成之后我们需要测试看我们的配置是否正确，<code>mount -a</code> 加载所有的磁盘）。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘加密（dm-crypt）</title>
      <link href="/2015/08/10/ops/linux/linux_dm-crypt/"/>
      <url>/2015/08/10/ops/linux/linux_dm-crypt/</url>
      
        <content type="html"><![CDATA[<p>dm-crypt是建立在2.6版本内核的device-mapper特性之上的。 device-mapper是设计用来为在实际的块设备之上添加虚拟层提供一种通用灵活的方法，以方便开发人员实现镜像、快照、级联和加密等处理。dm-crypt使用了内核密码应用编程接口实现了透明的加密，并且兼容cryptloop系统。</p><a id="more"></a><h3 id="初始化安装脚本"><a href="#初始化安装脚本" class="headerlink" title="初始化安装脚本"></a>初始化安装脚本</h3><p><span style="color:red">(注： 初始化加密磁盘的时候需要建立回送磁盘映像，在这里我们自己分配我们所需的大小下脚本是100M)</span></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_1.png" alt="linux_dm-crypt_1"></p><h3 id="重新挂载脚本"><a href="#重新挂载脚本" class="headerlink" title="重新挂载脚本"></a>重新挂载脚本</h3><p><span style="color:red">（注：这里需要注意的是如果重新创建逻辑卷的时候密码输入不正确的话，那么生成的逻辑卷将是新的逻辑卷需要重新建立文件系统，加密映像内文件不可见）</span></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_2.png" alt="linux_dm-crypt_2"></p><h3 id="磁盘卸载脚本"><a href="#磁盘卸载脚本" class="headerlink" title="磁盘卸载脚本"></a>磁盘卸载脚本</h3><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_3.png" alt="linux_dm-crypt_3"></p><h3 id="脚本指令的详解"><a href="#脚本指令的详解" class="headerlink" title="脚本指令的详解"></a>脚本指令的详解</h3><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_4.png" alt="linux_dm-crypt_4"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_5.png" alt="linux_dm-crypt_5"></p><h3 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h3><p>由于使用cryptsetup 创建的逻辑卷重启之后就会消失，所以在/etc/fstab下添加自动挂载没有用。我们在/etc/fstab 文件中添加<span style="color:red"> /dev/mapper/deploy /home/prod/deploy ext3 defaults 1 2 </span>（系统启动时将会自动的挂载 /etc/fstab 下的所有分区）</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_6.png" alt="linux_dm-crypt_6"></p><p><span style="color:red">添加完成后执行命令：mount -a ，系统将会挂载fstab文件下的所有选项</span></p><h3 id="编写脚本自动挂载"><a href="#编写脚本自动挂载" class="headerlink" title="编写脚本自动挂载"></a>编写脚本自动挂载</h3><p>修改remount脚本 ，添加自动输入密码，密文存放在.cry文件中，经过openssl解密之后 传给 创建逻辑卷的命令</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_dm-crypt_7.png" alt="linux_dm-crypt_7"></p><p>完成之后，对shell脚本进行加密，使用SHC 将shell脚本转化为二进制文件，<span style="color:red">但是使用SHC加密shell脚本的缺点是可以在ps上看到进程。</span></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell中的反引号，单引号，双引号</title>
      <link href="/2015/06/21/ops/linux/linux_shell/"/>
      <url>/2015/06/21/ops/linux/linux_shell/</url>
      
        <content type="html"><![CDATA[<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">反引号位 (`) 位于键盘的Tab键的上方、<span class="number">1</span>键的左方。</span><br><span class="line">反引号在Linux中起着<span class="string">"命令替换"</span>的作用。</span><br><span class="line">命令替换是指<span class="keyword">shell</span><span class="bash">能够将一个命令的标准输出插在一个命令行中任何位置。</span></span><br><span class="line">如下，<span class="keyword">shell</span><span class="bash">会执行反引号中的date命令，把结果插入到<span class="built_in">echo</span>命令显示的内容中。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_1.png" alt="linux_shell_1"></p><h4 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h4><p>单引号、双引号用于<span style="color:red">用户把带有空格的字符串赋值给变量事的分界符。</span></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_2.png" alt="linux_shell_2"></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_3.png" alt="linux_shell_3"></p><p>如果没有单引号或双引号，shell会把空格后的字符串解释为命令。</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_4.png" alt="linux_shell_4"></p><h4 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h4><p>单引号告诉shell忽略所有特殊字符</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_5.png" alt="linux_shell_5"></p><p>双引号忽略大多数，但不包括<span style="color:red"> $、\、`</span></p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_shell_6.png" alt="linux_shell_6"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ctrl+z、d、c的区别</title>
      <link href="/2015/06/19/ops/linux/linux_learn/"/>
      <url>/2015/06/19/ops/linux/linux_learn/</url>
      
        <content type="html"><![CDATA[<h4 id="ctrl-z、d、c的区别"><a href="#ctrl-z、d、c的区别" class="headerlink" title="ctrl+z、d、c的区别"></a>ctrl+z、d、c的区别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。</span><br><span class="line">ctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程。</span><br><span class="line">ctrl<span class="_">-d</span> 不是发送信号，而是表示一个特殊的二进制值，表示 EOF。</span><br><span class="line">ctrl-\ 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Key-Function"><a href="#Key-Function" class="headerlink" title="Key Function"></a>Key Function</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Ctrl-c <span class="keyword">Kill</span> foreground process</span><br><span class="line">Ctrl-z <span class="keyword">Suspend</span> foreground process</span><br><span class="line">Ctrl-d Terminate <span class="keyword">input</span>, <span class="keyword">or</span> <span class="keyword">exit</span> shell</span><br><span class="line">Ctrl-s <span class="keyword">Suspend</span> <span class="keyword">output</span></span><br><span class="line">Ctrl-q <span class="keyword">Resume</span> <span class="keyword">output</span></span><br><span class="line">Ctrl-o Discard <span class="keyword">output</span> </span><br><span class="line">Ctrl-l <span class="keyword">Clear</span> screen  ( <span class="keyword">clear</span>命令 ) 清屏</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>进入 python ctrl+z 挂起 python</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_learn_1.png" alt="linux_learn_1"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bg</span> 查看后台挂起的服务  </span><br><span class="line"><span class="built_in">fg</span> 回复挂起的服务</span><br></pre></td></tr></table></figure><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_learn_2.png" alt="linux_learn_2"></p><p>ctrl+d 输入EOF退出 python</p><p><img src="https://image-1251762279.cos.ap-shanghai.myqcloud.com/blog/linux_learn_3.png" alt="linux_learn_3"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2015/04/20/backend/c++/BubbleSort/"/>
      <url>/2015/04/20/backend/c++/BubbleSort/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        a[j] = a[j] + a[j + <span class="number">1</span>];</span><br><span class="line">        a[j + <span class="number">1</span>] = a[j] - a[j + <span class="number">1</span>];</span><br><span class="line">        a[j] = a[j] - a[j + <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BubbleSort(a, N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(pow(n,2))</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o BubbleSort BubbleSort.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./BubbleSort</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">[blazehu@MacBook ~]$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序 (大顶堆)</title>
      <link href="/2015/04/20/backend/c++/HeapSort/"/>
      <url>/2015/04/20/backend/c++/HeapSort/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="堆排序-大顶堆"><a href="#堆排序-大顶堆" class="headerlink" title="堆排序 (大顶堆)"></a>堆排序 (大顶堆)</h4><p>不稳定，建堆需要时间较长</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  t = *x;</span><br><span class="line">  *x = *y;</span><br><span class="line">  *y = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> i, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lchild = <span class="number">2</span> * i;</span><br><span class="line">  <span class="keyword">int</span> rchild = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> max = i;</span><br><span class="line">  <span class="keyword">if</span> (i &lt;= size / <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (lchild &lt;= size &amp;&amp; a[lchild] &gt; a[max])</span><br><span class="line">    &#123;</span><br><span class="line">      max = lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rchild &lt;= size &amp;&amp; a[rchild] &gt; a[max])</span><br><span class="line">    &#123;</span><br><span class="line">      max = rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max != i)</span><br><span class="line">    &#123;</span><br><span class="line">      Swap(&amp;a[i], &amp;a[max]);</span><br><span class="line">      HeapAdjust(a, max, size);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildHeap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = size / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    HeapAdjust(a, i, size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BuildHeap(a, size);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    Swap(&amp;a[<span class="number">1</span>], &amp;a[i]);</span><br><span class="line">    HeapAdjust(a, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, i;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  HeapSort(a, n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(n*log2(n))</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o HeapSort HeapSort.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./HeapSort</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">2</span><br><span class="line">2 3 6 7 8</span><br><span class="line">[blazehu@MacBook ~]$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接选择排序</title>
      <link href="/2015/04/20/backend/c++/SimpleSelectionSort/"/>
      <url>/2015/04/20/backend/c++/SimpleSelectionSort/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SimpleSelectionSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, min_i, t;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    min_i = i;</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[min_i] &gt; a[j])</span><br><span class="line">      &#123;</span><br><span class="line">        min_i = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min_i != i)</span><br><span class="line">    &#123;</span><br><span class="line">      t = a[i];</span><br><span class="line">      a[i] = a[min_i];</span><br><span class="line">      a[min_i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *a;</span><br><span class="line">  a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SimpleSelectionSort(a, N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： O(pow(n,2))</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o SimpleSelectionSort SimpleSelectionSort.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./SimpleSelectionSort</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2015/04/20/backend/c++/QuickSort/"/>
      <url>/2015/04/20/backend/c++/QuickSort/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  temp = a[low];</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; temp &lt; a[high])</span><br><span class="line">    &#123;</span><br><span class="line">      high--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">      a[low] = a[high];</span><br><span class="line">      low++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">      low++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">      a[high] = a[low];</span><br><span class="line">      high--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a[low] = temp;</span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">  &#123;</span><br><span class="line">    i = Partition(a, low, high);</span><br><span class="line">    QuickSort(a, low, i - <span class="number">1</span>);</span><br><span class="line">    QuickSort(a, i + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> low, high, temp;</span><br><span class="line">  <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  QuickSort(a, <span class="number">0</span>, N - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： 最好的情况是 O(n*log2(n)) ，最坏的情况将退化为冒泡排序为 O(pow(2,n))</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o QuickSort QuickSort.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./QuickSort</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">[blazehu@MacBook ~]$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接插入排序</title>
      <link href="/2015/04/20/backend/c++/StraightInsertion/"/>
      <url>/2015/04/20/backend/c++/StraightInsertion/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StraightInsertion</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, t;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    t = a[i];</span><br><span class="line">    <span class="keyword">while</span> (t &lt; a[i - <span class="number">1</span>] &amp;&amp; i)</span><br><span class="line">    &#123;</span><br><span class="line">      a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  StraightInsertion(a, N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度： 最好的情况是 O(n) 只需要扫一遍，最坏的情况是 O(pow(n,2))</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blazehu@MacBook ~]$ g++ -o StraightInsertion StraightInsertion.cpp</span><br><span class="line">[blazehu@MacBook ~]$ ./StraightInsertion</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">0</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
