<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小千世界</title>
  
  
  <link href="https://blazehu.github.io/atom.xml" rel="self"/>
  
  <link href="https://blazehu.github.io/"/>
  <updated>2021-11-29T13:57:02.665Z</updated>
  <id>https://blazehu.github.io/</id>
  
  <author>
    <name>BlazeHu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostgreSQL 主从同步</title>
    <link href="https://blazehu.github.io/2019/11/23/pgsql/PostgreSQL%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    <id>https://blazehu.github.io/2019/11/23/pgsql/PostgreSQL%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2021-11-29T13:57:02.665Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>PostgreSQL 9.0 引入了主备流复制机制，流复制每次传输单位是 WAL 日志的 record。通过流复制备库不断的从主库同步相应的数据，并在备库 apply 每个 WAL record 。</p><a id="more"></a><p>PostgreSQL 9.0 之前提供的方法是主库写完一个 WAL 日志文件后，才把 WAL 日志文件传送到备库，这样的方式会导致主备延迟特别大。同时 PostgreSQL 9.0 之后提供了 Hot Standby ，备库在应用 WAL record 的同时也能够提供只读服务，大大提升了用户体验。</p><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><p>pgsql 通过容器部署，这里使用 docker-compose<br>主库： 192.168.0.1<br>从库： 192.168.0.2</p><h5 id="启动主库"><a href="#启动主库" class="headerlink" title="启动主库"></a>启动主库</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">pgsql:</span></span><br><span class="line"><span class="symbol">  image:</span> postgres:<span class="number">9.6</span></span><br><span class="line"><span class="symbol">  restart:</span> always</span><br><span class="line"><span class="symbol">  container_name:</span> pgsql</span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">   - <span class="number">5432</span>:<span class="number">5432</span></span><br><span class="line"><span class="symbol">  environment:</span></span><br><span class="line">   - POSTGRES_PASSWORD=postgres</span><br><span class="line"><span class="symbol">  volumes:</span></span><br><span class="line">   - <span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data:<span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data</span><br></pre></td></tr></table></figure><h5 id="新建归档日志目录"><a href="#新建归档日志目录" class="headerlink" title="新建归档日志目录"></a>新建归档日志目录</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti pgsql bash</span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/<span class="title">pg_archive</span></span></span><br></pre></td></tr></table></figure><h5 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> <span class="keyword">replica</span> <span class="keyword">login</span> <span class="keyword">replication</span> <span class="keyword">encrypted</span> <span class="keyword">password</span> <span class="string">'replica'</span>;</span><br><span class="line"></span><br><span class="line"># 查看是否创建成功</span><br><span class="line">\du</span><br></pre></td></tr></table></figure><h5 id="修改-pg-hba-conf-文件-从库ip"><a href="#修改-pg-hba-conf-文件-从库ip" class="headerlink" title="修改 pg_hba.conf 文件 (从库ip)"></a>修改 pg_hba.conf 文件 (从库ip)</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host <span class="keyword">replication</span> <span class="keyword">replica</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> trust</span><br></pre></td></tr></table></figure><h5 id="修改-postgresql-conf"><a href="#修改-postgresql-conf" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listen_addresses</span> = <span class="string">'*'</span>     <span class="comment"># 监听所有 IP</span></span><br><span class="line"><span class="attr">wal_level</span> = hot_standby    <span class="comment"># 开启热备</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">32</span>       <span class="comment"># 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">64</span>     <span class="comment"># 设置流复制保留的最多的 xlog 数目，一份是 16M，注意机器磁盘 16M * 64 = 1G</span></span><br><span class="line"><span class="attr">wal_sender_timeout</span> = <span class="number">60</span>    <span class="comment"># 设置流复制主机发送数据的超时时间</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">500</span>      <span class="comment"># 这个设置要注意下，从库的 max_connections 必须要大于主库的</span></span><br><span class="line"><span class="attr">archive_mode</span> = <span class="literal">on</span>          <span class="comment"># 允许归档</span></span><br><span class="line">                           <span class="comment"># 用该命令来归档logfile segment</span></span><br><span class="line"><span class="attr">archive_command</span> = <span class="string">'cp %p /var/lib/postgresql/data/pg_archive/%f'</span></span><br></pre></td></tr></table></figure><h5 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart pgsql</span></span><br></pre></td></tr></table></figure><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><h5 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h5><p>拷贝 docker-compose 文件, 并拉起容器</p><h5 id="拷贝主服务器数据"><a href="#拷贝主服务器数据" class="headerlink" title="拷贝主服务器数据"></a>拷贝主服务器数据</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除从库数据</span></span><br><span class="line">rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/*  </span></span><br><span class="line"></span><br><span class="line">pg_basebackup -h <span class="number">192.168</span>.<span class="number">0.1</span> -U replica -D /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span> -<span class="title">X</span> <span class="title">stream</span> -<span class="title">P</span></span></span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span>/<span class="title">pg_archive</span></span></span><br></pre></td></tr></table></figure><h5 id="添加-recovery-conf-文件"><a href="#添加-recovery-conf-文件" class="headerlink" title="添加 recovery.conf 文件"></a>添加 recovery.conf 文件</h5><p>recovery.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">standby_mode</span> = <span class="literal">on</span>    </span><br><span class="line"><span class="attr">primary_conninfo</span> = <span class="string">'host=192.168.0.1 port=5432 user=replica password=replica'</span> </span><br><span class="line"><span class="attr">recovery_target_timeline</span> = <span class="string">'latest'</span></span><br></pre></td></tr></table></figure><h5 id="修改-postgresql-conf-1"><a href="#修改-postgresql-conf-1" class="headerlink" title="修改 postgresql.conf"></a>修改 postgresql.conf</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wal_level</span> = hot_standby</span><br><span class="line"><span class="attr">hot_standby_feedback</span> = <span class="literal">on</span>             <span class="comment"># 如果有错误的数据复制，是否向主进行反馈</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">1000</span>                <span class="comment"># 一般查多于写的应用从库的最大连接数要比较大</span></span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span>                      <span class="comment"># 说明这台机器不仅仅是用于数据归档，也用于数据查询</span></span><br><span class="line"><span class="attr">max_standby_streaming_delay</span> = <span class="number">30</span>s     <span class="comment"># 数据流备份的最大延迟时间</span></span><br><span class="line"><span class="attr">wal_receiver_status_interval</span> = <span class="number">10</span>s    <span class="comment"># 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</span></span><br></pre></td></tr></table></figure><h5 id="重启从库"><a href="#重启从库" class="headerlink" title="重启从库"></a>重启从库</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart pgsql-<span class="literal">slave</span></span><br></pre></td></tr></table></figure><h4 id="验证主从"><a href="#验证主从" class="headerlink" title="验证主从"></a>验证主从</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> client_addr, sync_state <span class="keyword">from</span> pg_stat_replication;</span><br><span class="line"></span><br><span class="line">ps -ef 查看进程是否存在</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/9.6/<span class="title">bin</span>/<span class="title">pg_ctl</span> -<span class="title">D</span> /<span class="title">var</span>/<span class="title">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span> <span class="title">status</span></span></span><br><span class="line"></span><br><span class="line">pg_controldata /var/<span class="class"><span class="keyword">lib</span>/<span class="title">postgresql</span>/<span class="title">data</span></span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li><li><a href="http://mysql.taobao.org/monthly/2015/10/04/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2015/10/04/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;PostgreSQL 9.0 引入了主备流复制机制，流复制每次传输单位是 WAL 日志的 record。通过流复制备库不断的从主库同步相应的数据，并在备库 apply 每个 WAL record 。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://blazehu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://blazehu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="PostgreSQL" scheme="https://blazehu.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL 之 pg_stat_statements</title>
    <link href="https://blazehu.github.io/2019/11/22/pgsql/PostgreSQL%20%E4%B9%8B%20pg_stat_statements/"/>
    <id>https://blazehu.github.io/2019/11/22/pgsql/PostgreSQL%20%E4%B9%8B%20pg_stat_statements/</id>
    <published>2019-11-21T16:00:00.000Z</published>
    <updated>2021-11-29T13:56:36.132Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>pg_stat_statements 模块提供了一种跟踪执行的所有 SQL 语句的统计信息的方法。</p><a id="more"></a><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>ubuntu 16.04 安装：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> -y update &amp;&amp; apt-<span class="builtin-name">get</span> install -y postgresql-contrib-9.6 postgresql-plpython-9.6</span><br></pre></td></tr></table></figure><p>如果 pgsql 是通过容器部署可以更新基础镜像：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:9.6</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> -y update &amp;&amp; apt-<span class="builtin-name">get</span> install -y --force-yes postgresql-contrib-9.6 postgresql-plpython-9.6</span><br></pre></td></tr></table></figure><h4 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shared_preload_libraries = <span class="string">'pg_stat_statements'</span>    # 加载 pg_stat_statements 模块</span><br></pre></td></tr></table></figure><p>以下可选参数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">track_io_timing = <span class="keyword">on</span>                      # 跟踪 IO 消耗的时间</span><br><span class="line">track_activity_query_size = <span class="number">2048</span>          # 单条 <span class="keyword">sql</span> 的最长长度，超过截断显示</span><br><span class="line"></span><br><span class="line">pg_stat_statements.save = <span class="keyword">on</span>              # 重启后是否保留统计信息 </span><br><span class="line">pg_stat_statements.max = <span class="number">10000</span>            # 最多保留统计信息条数，通过 LRU 算法来覆盖老的记录。  </span><br><span class="line">pg_stat_statements.track = <span class="keyword">all</span>            # <span class="keyword">all</span>：所有 <span class="keyword">sql</span> 包括函数内嵌套的 <span class="keyword">sql</span> 、 top：直接执行的 <span class="keyword">sql</span> 不包括函数内嵌套的、 <span class="keyword">none</span>：不跟踪  </span><br><span class="line">pg_stat_statements.track_utility = <span class="keyword">off</span>    # 是否跟踪非 DML 语句 (例如 DDL、DCL)， <span class="keyword">on</span> 表示跟踪, <span class="keyword">off</span> 表示不跟踪</span><br></pre></td></tr></table></figure><h4 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart pgsql</span></span><br></pre></td></tr></table></figure><h4 id="加载扩展"><a href="#加载扩展" class="headerlink" title="加载扩展"></a>加载扩展</h4><p>加载扩展模块</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">extension</span> pg_stat_statements;</span><br></pre></td></tr></table></figure><p>卸载扩展模块</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">extension</span> pg_stat_statements;</span><br></pre></td></tr></table></figure><h4 id="常用分析语句"><a href="#常用分析语句" class="headerlink" title="常用分析语句"></a>常用分析语句</h4><p>单次调用最耗时</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> mean_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗时</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> total_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>响应时间抖动最严重</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> stddev_time <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>单次调用最耗 IO</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) /calls <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>总最耗IO</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (blk_read_time + blk_write_time) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗共享内存</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> (shared_blks_hit + shared_blks_dirtied) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最耗临时空间</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query <span class="keyword">from</span> pg_stat_statements <span class="keyword">order</span> <span class="keyword">by</span> temp_blks_written <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="重置统计信息"><a href="#重置统计信息" class="headerlink" title="重置统计信息"></a>重置统计信息</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_stat_statements_reset();</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.postgresql.org/docs/9.6/pgstatstatements.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.6/pgstatstatements.html</a></li><li><a href="https://yq.aliyun.com/articles/74421" target="_blank" rel="noopener">https://yq.aliyun.com/articles/74421</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;pg_stat_statements 模块提供了一种跟踪执行的所有 SQL 语句的统计信息的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://blazehu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://blazehu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="PostgreSQL" scheme="https://blazehu.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL 学习笔记</title>
    <link href="https://blazehu.github.io/2019/11/21/pgsql/PostgreSQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blazehu.github.io/2019/11/21/pgsql/PostgreSQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-20T16:00:00.000Z</published>
    <updated>2021-11-29T13:56:30.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>PostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，在灵活的 BSD 许可证下发行。</p><a id="more"></a><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\d</span>           当前数据库的所有表</span><br><span class="line"><span class="string">\dt</span>          只显示匹配的表  </span><br><span class="line"><span class="string">\di</span>          只显示索引</span><br><span class="line"><span class="string">\ds</span>          只显示序列</span><br><span class="line"><span class="string">\dv</span>          只显示视图</span><br><span class="line"><span class="string">\df</span>          只显示函数</span><br><span class="line"><span class="string">\du</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\dg</span>          列出所有的数据库用户和角色</span><br><span class="line"><span class="string">\encoding</span>    指定客户端的字符编码，如 <span class="string">\encoding</span> UTF8</span><br><span class="line"><span class="string">\x</span>           把表中的每一行的每列数据都拆分为单行展示, 与 MySQL 中的 <span class="string">"\G"</span> 的功能类似</span><br></pre></td></tr></table></figure><h5 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psql -U postgres</span><br><span class="line">psql -h <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">5432</span> -U repuser -d postgres -W</span><br><span class="line">psql -U postgres -d test</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> env</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGDATABASE</span>=postgres</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGHOST</span>=192.168.0.1</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGPORT</span>=5432</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PGUSER</span>=postgres</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">psql</span><br></pre></td></tr></table></figure><h5 id="Logout"><a href="#Logout" class="headerlink" title="Logout"></a>Logout</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\q</span></span><br></pre></td></tr></table></figure><h5 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h5 id="Use-Database"><a href="#Use-Database" class="headerlink" title="Use Database"></a>Use Database</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\c</span> postgres</span><br><span class="line"></span><br><span class="line"><span class="string">\c</span> test</span><br></pre></td></tr></table></figure><h5 id="Show-Tables"><a href="#Show-Tables" class="headerlink" title="Show Tables"></a>Show Tables</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\d</span></span><br><span class="line"></span><br><span class="line"><span class="string">\d</span> <span class="string">"Table1"</span></span><br></pre></td></tr></table></figure><h5 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create<span class="built_in"> user </span>repuser REPLICATION LOGIN<span class="built_in"> CONNECTION </span>LIMIT 2 ENCRYPTED PASSWORD <span class="string">'postgres'</span>;</span><br></pre></td></tr></table></figure><h5 id="Drop-User"><a href="#Drop-User" class="headerlink" title="Drop User"></a>Drop User</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop<span class="built_in"> user </span>repuser;</span><br></pre></td></tr></table></figure><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -U postgres test &gt; test.<span class="keyword">sql</span> </span><br><span class="line"></span><br><span class="line">pg_dump -U postgres -d test -s &gt; test.<span class="keyword">sql</span>    # -s, <span class="comment">--schema-only  dump only the schema, no data</span></span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> "Name", "Age" <span class="keyword">from</span> "Person" <span class="keyword">where</span> "Sex" = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> "Age" <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"> <span class="type">Name</span>|  Age</span><br><span class="line"> <span class="comment">----+-------</span></span><br><span class="line"> 张三 | <span class="number">20</span></span><br><span class="line"> 李四 | <span class="number">18</span></span><br><span class="line"> 王五 | <span class="number">16</span></span><br><span class="line">(<span class="number">3</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><h4 id="查看数据库、表、索引大小"><a href="#查看数据库、表、索引大小" class="headerlink" title="查看数据库、表、索引大小"></a>查看数据库、表、索引大小</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_database_size(<span class="string">'test'</span>));</span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_table_size(<span class="string">'test_table'</span>));   </span><br><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_indexes_size(<span class="string">'test_index'</span>));</span><br></pre></td></tr></table></figure><h4 id="查询计划"><a href="#查询计划" class="headerlink" title="查询计划"></a>查询计划</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">analyze</span> <span class="keyword">select</span> <span class="string">"Name"</span>, <span class="string">"Age"</span> <span class="keyword">from</span> <span class="string">"Person"</span> <span class="keyword">where</span> <span class="string">"Sex"</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">"Age"</span>;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_age</span><br><span class="line">    <span class="keyword">ON</span> <span class="built_in">public</span>."Person" <span class="keyword">USING</span> btree</span><br><span class="line">    ("Age" <span class="keyword">COLLATE</span> pg_catalog."default")</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> person_name</span><br><span class="line">    <span class="keyword">ON</span> <span class="built_in">public</span>."Person" <span class="keyword">USING</span> btree</span><br><span class="line">    ("Name") <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><p>查看索引</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_indexes <span class="keyword">where</span> tablename=<span class="string">'Person'</span>;</span><br></pre></td></tr></table></figure><h4 id="vacuum"><a href="#vacuum" class="headerlink" title="vacuum"></a>vacuum</h4><p>vacuum 操作可以手动和自动。设置自动 vacuum 注意必须设置 <span style="color:red">track_counts = true </span>。具体的设置可以参照官方的文档。（8.3 版本以后）</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">vacuumdb</span> --<span class="comment">analyze</span> --<span class="comment">verbose</span> <span class="literal">-</span><span class="comment">f</span> --<span class="comment">dbname=test</span></span><br></pre></td></tr></table></figure><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ol><li>释放，再利用更新或者删除的行所占据的磁盘空间。</li><li>更新 PostgreSQL 查询计划中使用的统计数据。</li><li>防止因事务 ID 的重置而使非常老的数据丢失。</li></ol><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ol><li>PostgreSQL 数据的插入，更新，删除操作并不是真正放到数据库空间。如果不定期释放空间的话，由于数据太多，查询速度会巨降。</li><li>PostgreSQL 在做查询处理的时候，为了是查询速度提高，会根据统计数据来确定执行计划。如果不及时更新的话，查询的效果可能不如预期。</li><li>PostgreSQL 中每一个事务都会产生一个事务 ID，但这个数字是有上限的。当事务 ID 达到最大值后，会重新从最小值开始循环。这样如果不及时把以前的数据释放掉的话，原来的老数据会因为事务 ID 的丢失而丢失掉。</li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;PostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，在灵活的 BSD 许可证下发行。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://blazehu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://blazehu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="PostgreSQL" scheme="https://blazehu.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Golang 单例模式</title>
    <link href="https://blazehu.github.io/2019/10/23/golang/Golang%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blazehu.github.io/2019/10/23/golang/Golang%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:55.305Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>单例模式是最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p><strong>意图：</strong> 保证一个类型仅有一个实例，并提供一个访问它的全局访问点。<br><strong>主要解决：</strong> 一个全局使用的类型频繁地创建与销毁。<br><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。<br><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>Golang 目前常见的有以下四种方式（懒汉式、 饿汉式、 双重检查、 sync.Once）</p><a id="more"></a><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h5 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance *SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := GetSingletonInstance()</span><br><span class="line">b := GetSingletonInstance()</span><br><span class="line">c := <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">fmt.Println(unsafe.Pointer(s))</span><br><span class="line">fmt.Println(unsafe.Pointer(b))</span><br><span class="line">fmt.Println(unsafe.Pointer(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>利用 sync.Mutex 进行加锁，保证线程安全。<br><strong>缺点：</strong> 加锁有了额外开销。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lock              sync.Mutex</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>导入包的时候直接创建实例，这样无需判空且线程安全。<br><strong>优点：</strong> 简单方便<br><strong>缺点：</strong> 不管程序中是否使用都会生成该实例，该实例持续占有在内存中<br><strong>适用场景：</strong> 该实例使用频繁，功能简单占用内存少</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonInstance SingletonInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p>第一次判断不加锁，第二次加锁保证线程安全，实例创建完成后，获取实例就不用加锁了。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lock              sync.Mutex</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> singletonInstance == <span class="literal">nil</span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h4><p>sync.Once 确保创建实例子的函数只执行一次</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SingletonInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">one               sync.Once</span><br><span class="line">singletonInstance *SingletonInstance</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonInstance</span><span class="params">()</span> *<span class="title">SingletonInstance</span></span> &#123;</span><br><span class="line">one.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">singletonInstance = <span class="built_in">new</span>(SingletonInstance)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> singletonInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sync-Once-源码分析"><a href="#sync-Once-源码分析" class="headerlink" title="sync.Once 源码分析"></a>sync.Once 源码分析</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Once is an object that will perform exactly one action.</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">done <span class="keyword">uint32</span></span><br><span class="line">m    Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// o.done 初始化为0，双重检查</span></span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line">o.doSlow(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">o.m.Lock()</span><br><span class="line"><span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line"><span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// o.done 赋值为1，atomic 原子操作</span></span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 执行函数</span></span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/singleton-pattern.html</a></li><li><a href="https://www.cnblogs.com/wpnine/p/10426105.html" target="_blank" rel="noopener">https://www.cnblogs.com/wpnine/p/10426105.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;单例模式是最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;意图：&lt;/strong&gt; 保证一个类型仅有一个实例，并提供一个访问它的全局访问点。&lt;br&gt;&lt;strong&gt;主要解决：&lt;/strong&gt; 一个全局使用的类型频繁地创建与销毁。&lt;br&gt;&lt;strong&gt;何时使用：&lt;/strong&gt; 当您想控制实例数目，节省系统资源的时候。&lt;br&gt;&lt;strong&gt;如何解决：&lt;/strong&gt; 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。&lt;/p&gt;&lt;h4 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;p&gt;Golang 目前常见的有以下四种方式（懒汉式、 饿汉式、 双重检查、 sync.Once）&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://blazehu.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://blazehu.github.io/tags/Golang/"/>
    
    <category term="设计模式" scheme="https://blazehu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Golang 消息队列之 RabbitMQ</title>
    <link href="https://blazehu.github.io/2019/10/21/golang/Golang%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%20RabbitMQ/"/>
    <id>https://blazehu.github.io/2019/10/21/golang/Golang%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%20RabbitMQ/</id>
    <published>2019-10-20T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:59.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>消息队列（Message Queue）是一种应用间的通信方式，一种应用间的异步协作机制。消息的生产者只需将消息发布到 MQ 中，消息消费者只需要从 MQ 中获取消息消费，消息的可靠性由消息系统来保证。</p><h4 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h4><p>RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。</p><a id="more"></a><h5 id="RabbitMQ-特点"><a href="#RabbitMQ-特点" class="headerlink" title="RabbitMQ 特点"></a>RabbitMQ 特点</h5><ol><li>可靠性（Reliability）</li><li>灵活的路由（Flexible Routing）</li><li>消息集群（Clustering）</li><li>高可用（Highly Available Queues）</li><li>多种协议（Multi-protocol）</li><li>多语言客户端（Many Clients）</li><li>管理界面（Management UI）</li><li>跟踪机制（Tracing）</li><li>插件机制（Plugin System）</li></ol><h5 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h5><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>direct</td><td>路由键完全匹配，单播</td></tr><tr><td>topic</td><td>路由键模式匹配，路由键可以包含通配符：”#”、”*”</td></tr><tr><td>fanout</td><td>不处理路由键，广播，转发消息最快</td></tr><tr><td>headers</td><td>不处理路由键，根据发送的消息内容中的 headers 属性进行匹配，其他跟 direct 模式完全一致，性能较其他模式差很多</td></tr></tbody></table><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>容器化部署，简单方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname rabbit1 --name rabbitmq1 -p 9419:9419 -p 8080:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit2 --name rabbitmq2 -p 5673:5672 --link rabbitmq1:rabbit1 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit3 --name rabbitmq3 -p 5674:5672 --link rabbitmq1:rabbit1 --link rabbitmq2:rabbit2 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.7.14-management</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq2 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker exec -it rabbitmq3 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="RabbitMQ-Exporter"><a href="#RabbitMQ-Exporter" class="headerlink" title="RabbitMQ Exporter"></a>RabbitMQ Exporter</h4><p><strong>repo:</strong> <a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></p><p><strong>Start RabbitMQ Exporter:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RABBIT_EXPORTERS</span>=exchange,node,queue <span class="attribute">RABBIT_CAPABILITIES</span>=bert,no_sort <span class="attribute">RABBIT_USER</span>=guest <span class="attribute">RABBIT_PASSWORD</span>=guest <span class="attribute">OUTPUT_FORMAT</span>=JSON <span class="attribute">PUBLISH_PORT</span>=8082 <span class="attribute">RABBIT_URL</span>=http://127.0.0.1:8080 <span class="attribute">MAX_QUEUES</span>=5000 nohup rabbitmq_exporter &amp;</span><br></pre></td></tr></table></figure><p><strong>Start in container:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--net</span>=container:my-rabbit kbudde/rabbitmq-exporter</span><br></pre></td></tr></table></figure><h4 id="Golang-客户端-Demo"><a href="#Golang-客户端-Demo" class="headerlink" title="Golang 客户端 Demo"></a>Golang 客户端 Demo</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"URL"</span>: <span class="string">"amqp://guest:guest@10.5.124.213:5672/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">URL       <span class="keyword">string</span></span><br><span class="line">QueueList <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Config</span><br><span class="line">Connection *amqp.Connection</span><br><span class="line">Channel    *amqp.Channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">reconnectDelay      = <span class="number">3</span> * time.Second <span class="comment">// reconnectDelay</span></span><br><span class="line">retryNum            = <span class="number">5</span>               <span class="comment">// retryNum</span></span><br><span class="line">DefaultExchangeName = <span class="string">"default"</span></span><br><span class="line">DefaultQueueName    = <span class="string">"default"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">connect</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">err error</span><br><span class="line">)</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Info(<span class="string">"Attempting to connect."</span>)</span><br><span class="line">c.Connection, err = amqp.Dial(c.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to connect to RabbitMQ."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Channel, err = c.Connection.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to open a channel."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">isConnected</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.Connection.IsClosed() || c.Channel == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">handleConnect</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// retry connect</span></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; retryNum; index++ &#123;</span><br><span class="line">c.connect()</span><br><span class="line"><span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Warn(<span class="string">"Failed to connect. Retrying..."</span>)</span><br><span class="line">time.Sleep(reconnectDelay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.isConnected() &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Info(<span class="string">"Connect succeed."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line">&#125;).Fatal(<span class="string">"Connect failed."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Producer <span class="keyword">struct</span> &#123;</span><br><span class="line">Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducer</span><span class="params">()</span> *<span class="title">Producer</span></span> &#123;</span><br><span class="line">rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">producer := &amp;Producer&#123;&#125;</span><br><span class="line">producer.URL = rabbitConfig.URL</span><br><span class="line"></span><br><span class="line">producer.handleConnect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> producer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Producer)</span> <span class="title">UnsafePushExchange</span><span class="params">(data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, exchangeName <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// check connect</span></span><br><span class="line"><span class="keyword">if</span> !p.isConnected() &#123;</span><br><span class="line">p.handleConnect()</span><br><span class="line">p.initExchange()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// parse data</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">bytesData []<span class="keyword">byte</span></span><br><span class="line">err       error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishData := Msg&#123;</span><br><span class="line">Data:         data,</span><br><span class="line">Time:         util.DecodeTime(time.Now().UTC()),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bytesData, err = json.Marshal(publishData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"data"</span>:   data,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to marshal a message."</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = p.Channel.Publish(</span><br><span class="line">exchangeName, <span class="comment">// exchange</span></span><br><span class="line"><span class="string">""</span>,           <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">DeliveryMode: amqp.Persistent,</span><br><span class="line">ContentType:  <span class="string">"application/json"</span>,</span><br><span class="line">Body:         bytesData,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Error(<span class="string">"Failed to publish a message."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"data"</span>:   publishData,</span><br><span class="line">&#125;).Info(<span class="string">"Publish a message."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Consumer <span class="keyword">struct</span> &#123;</span><br><span class="line">Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConsumer</span><span class="params">(queueName <span class="keyword">string</span>)</span> *<span class="title">Consumer</span></span> &#123;</span><br><span class="line">rabbitConfig := <span class="built_in">new</span>(Config)</span><br><span class="line">err := util.ReadConfig(<span class="string">"RabbitMQ"</span>, rabbitConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Fatal(<span class="string">"Read config error."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> queueName == <span class="string">""</span> &#123;</span><br><span class="line">queueName = DefaultQueueName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer := &amp;Consumer&#123;</span><br><span class="line">queueName: queueName,</span><br><span class="line">&#125;</span><br><span class="line">consumer.URL = rabbitConfig.URL</span><br><span class="line">consumer.QueueList = rabbitConfig.QueueList</span><br><span class="line"></span><br><span class="line">consumer.handleConnect()</span><br><span class="line"></span><br><span class="line">consumer.initQueue()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> consumer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Consumer)</span> <span class="title">Receive</span><span class="params">(forever <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// check connect</span></span><br><span class="line"><span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">c.handleConnect()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgs, err := c.Channel.Consume(</span><br><span class="line">c.queueName, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,          <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// auto-ack</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,         <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"RabbitMQ"</span>,</span><br><span class="line"><span class="string">"err"</span>:    err,</span><br><span class="line">&#125;).Info(<span class="string">"Failed to register a consumer."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> msgs &#123;</span><br><span class="line"><span class="keyword">if</span> !c.isConnected() &#123;</span><br><span class="line">c.handleConnect()</span><br><span class="line">&#125;</span><br><span class="line">c.handle(msg.Body)</span><br><span class="line">msg.Ack(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-forever</span><br><span class="line">log.Info(<span class="string">"Consumer is Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="noopener">https://www.jianshu.com/p/79ca08116d57</a></li><li><a href="https://github.com/kbudde/rabbitmq_exporter" target="_blank" rel="noopener">https://github.com/kbudde/rabbitmq_exporter</a></li><li><a href="https://www.rabbitmq.com/tutorials/tutorial-four-go.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-four-go.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消息队列&quot; class=&quot;headerlink&quot; title=&quot;消息队列&quot;&gt;&lt;/a&gt;消息队列&lt;/h4&gt;&lt;p&gt;消息队列（Message Queue）是一种应用间的通信方式，一种应用间的异步协作机制。消息的生产者只需将消息发布到 MQ 中，消息消费者只需要从 MQ 中获取消息消费，消息的可靠性由消息系统来保证。&lt;/p&gt;&lt;h4 id=&quot;RabbitMQ-简介&quot;&gt;&lt;a href=&quot;#RabbitMQ-简介&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 简介&quot;&gt;&lt;/a&gt;RabbitMQ 简介&lt;/h4&gt;&lt;p&gt;RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://blazehu.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://blazehu.github.io/tags/Golang/"/>
    
    <category term="RabbitMQ" scheme="https://blazehu.github.io/tags/RabbitMQ/"/>
    
    <category term="消息队列" scheme="https://blazehu.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>API 网关 - Kong 简介</title>
    <link href="https://blazehu.github.io/2019/06/12/common/Kong%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://blazehu.github.io/2019/06/12/common/Kong%20%E7%AE%80%E4%BB%8B/</id>
    <published>2019-06-11T16:00:00.000Z</published>
    <updated>2021-11-29T13:26:13.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Kong 是由 Mashape 公司开源的，基于 Nginx 的 API Gateway （ Nginx 中运行的 Lua 应用程序 ）。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>功能：授权、日志、IP 限制、限流、API 统计分析、请求转化、跨域（CORS）等等。<br>可扩展： 支持分布式</p><a id="more"></a><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>Upstream</td><td>负载均衡策略</td></tr><tr><td>Target</td><td>处理请求的 Backend 服务</td></tr><tr><td>Service</td><td>多个 Upstream 的集合</td></tr><tr><td>Route</td><td>转发规则，将请求转发给 Service</td></tr><tr><td>Consumer</td><td>用户，里面记录用户的一些信息</td></tr><tr><td>Certificate</td><td>Https 证书</td></tr><tr><td>Sni</td><td>域名与 Certificate 的绑定</td></tr><tr><td>Plugin</td><td>插件</td></tr></tbody></table><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>测试服务器： 192.168.0.1</p><h5 id="Create-a-Docker-network"><a href="#Create-a-Docker-network" class="headerlink" title="Create a Docker network"></a>Create a Docker network</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create kong-net</span><br></pre></td></tr></table></figure><h5 id="Start-Database"><a href="#Start-Database" class="headerlink" title="Start Database"></a>Start Database</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p <span class="number">5432</span>:<span class="number">5432</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_USER=kong"</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_DB=kong"</span> \</span><br><span class="line">               postgres:<span class="number">9</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="Prepare-Database"><a href="#Prepare-Database" class="headerlink" title="Prepare Database"></a>Prepare Database</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm <span class="string">\</span></span><br><span class="line">     --network=kong-net <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> <span class="string">\</span></span><br><span class="line">     kong:latest kong migrations up</span><br></pre></td></tr></table></figure><h5 id="Start-Kong"><a href="#Start-Kong" class="headerlink" title="Start Kong"></a>Start Kong</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong <span class="string">\</span></span><br><span class="line">     --network=kong-net <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> <span class="string">\</span></span><br><span class="line">     -e <span class="string">"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8000</span>:<span class="number">8000</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8443</span>:<span class="number">8443</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8001</span>:<span class="number">8001</span> <span class="string">\</span></span><br><span class="line">     -p <span class="number">8444</span>:<span class="number">8444</span> <span class="string">\</span></span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure><h5 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">http:</span><span class="comment">//192.168.0.1:8001/</span></span><br></pre></td></tr></table></figure><h4 id="API-调用"><a href="#API-调用" class="headerlink" title="API 调用"></a>API 调用</h4><h5 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a>官网文档</h5><p><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/</a></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kong 部署在 <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> 机器上</span><br><span class="line">另有<span class="number">2</span>台机器部署了 web 服务： </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">web 服务地址测试接口： </span><br><span class="line">http:<span class="comment">//192.168.0.2:9100/api/v1/test/</span></span><br><span class="line">http:<span class="comment">//192.168.0.3:9100/api/v1/test/</span></span><br></pre></td></tr></table></figure><h5 id="创建-Upstream"><a href="#创建-Upstream" class="headerlink" title="创建 Upstream"></a>创建 Upstream</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line"><span class="params">--url</span> http:<span class="string">//192.168.0.1</span><span class="function">:8001</span>/upstreams/ \</span><br><span class="line"><span class="params">--data</span> <span class="string">"name=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="给-Upstream-添加-Targets"><a href="#给-Upstream-添加-Targets" class="headerlink" title="给 Upstream 添加 Targets"></a>给 Upstream 添加 Targets</h5><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/upstreams</span><span class="regexp">/backend1/targets</span> \</span></span><br><span class="line"><span class="ruby">--data <span class="string">"target=192.168.0.2:9100"</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">curl -i -X POST \</span></span><br><span class="line"><span class="ruby">--url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/upstreams</span><span class="regexp">/backend1/targets</span> \</span></span><br><span class="line"><span class="ruby">--data <span class="string">"target=192.168.0.3:9100"</span></span></span><br></pre></td></tr></table></figure><h5 id="查看-Upstream-的-Targets-是否添加成功"><a href="#查看-Upstream-的-Targets-是否添加成功" class="headerlink" title="查看 Upstream 的 Targets 是否添加成功"></a>查看 Upstream 的 Targets 是否添加成功</h5><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/10.25.98.128:8001/upstreams</span><span class="regexp">/backend1/targets</span></span></span><br></pre></td></tr></table></figure><h5 id="创建-Service"><a href="#创建-Service" class="headerlink" title="创建 Service"></a>创建 Service</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line"><span class="params">--url</span> http:<span class="string">//192.168.0.1</span><span class="function">:8001</span>/services/ \</span><br><span class="line"><span class="params">--data</span> <span class="string">"name=backend1"</span> \</span><br><span class="line"><span class="params">--data</span> <span class="string">"host=backend1"</span></span><br></pre></td></tr></table></figure><h5 id="查看-Service"><a href="#查看-Service" class="headerlink" title="查看 Service"></a>查看 Service</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">--url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8001</span><span class="regexp">/services/</span>backend1</span><br></pre></td></tr></table></figure><h5 id="给-Service-添加-Routes"><a href="#给-Service-添加-Routes" class="headerlink" title="给 Service 添加 Routes"></a>给 Service 添加 Routes</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST --url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8001</span><span class="regexp">/routes/</span> -d </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"service"</span>: &#123;</span><br><span class="line"><span class="string">"id"</span>: <span class="string">"2bc5f78b-02f8-4109-96c0-0888cbee7ccb"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"methods"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看-Service-下的-Routes"><a href="#查看-Service-下的-Routes" class="headerlink" title="查看 Service 下的 Routes"></a>查看 Service 下的 Routes</h5><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">-<span class="ruby">-url <span class="symbol">http:</span>/<span class="regexp">/192.168.0.1:8001/services</span><span class="regexp">/manageone-cmdb/routes</span></span></span><br></pre></td></tr></table></figure><h5 id="通过-Kong-API-访问-backend1-服务"><a href="#通过-Kong-API-访问-backend1-服务" class="headerlink" title="通过 Kong API 访问 backend1 服务"></a>通过 Kong API 访问 backend1 服务</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>v1<span class="regexp">/test/</span></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/" target="_blank" rel="noopener">https://docs.konghq.com/2.0.x/getting-started/configuring-a-service/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;Kong 是由 Mashape 公司开源的，基于 Nginx 的 API Gateway （ Nginx 中运行的 Lua 应用程序 ）。&lt;/p&gt;&lt;h4 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h4&gt;&lt;p&gt;功能：授权、日志、IP 限制、限流、API 统计分析、请求转化、跨域（CORS）等等。&lt;br&gt;可扩展： 支持分布式&lt;/p&gt;</summary>
    
    
    
    <category term="API 网关" scheme="https://blazehu.github.io/categories/API-%E7%BD%91%E5%85%B3/"/>
    
    
    <category term="Kong" scheme="https://blazehu.github.io/tags/Kong/"/>
    
    <category term="API 网关" scheme="https://blazehu.github.io/tags/API-%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Rundeck 简介</title>
    <link href="https://blazehu.github.io/2019/05/21/common/Rundeck%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://blazehu.github.io/2019/05/21/common/Rundeck%20%E7%AE%80%E4%BB%8B/</id>
    <published>2019-05-20T16:00:00.000Z</published>
    <updated>2021-11-29T13:26:19.621Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Rundeck 是一个基于 Java 和 Grails 的开源的运维自动化工具，提供了 Web 管理界面进行操作，同时提供命令行工具和 WebAPI 的访问控制方式。Rundeck 能够帮助开发和运维人员更好地管理各个节点。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装方式比较多，这里使用 war 包来简单介绍安装的步骤。<br>官方下载地址： <a href="https://docs.rundeck.com/downloads.html" target="_blank" rel="noopener">https://docs.rundeck.com/downloads.html</a><br>官方文档地址： <a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/</a></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>官方下载地址下载： rundeck-3.0.7-20181008.war</p><h5 id="检查依赖"><a href="#检查依赖" class="headerlink" title="检查依赖"></a>检查依赖</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择版本</span></span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>启动时会在当前路径初始化一些 rundeck 目录。如果报错可能是 java 版本的问题，可以重新选择 java 版本。</p><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:$HOME/bin:/root/rundeck/server/sbin</span><br><span class="line">export RDECK_BASE=/root/rundeck</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>修改 linux 服务器的环境变量，将 rundeckd 的路径添加到 PATH 里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundeckd status</span><br></pre></td></tr></table></figure><h5 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h5><p>修改登陆密码：<br>server/config/realm.properties</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># The format is</span></span><br><span class="line"><span class="meta">#  &lt;username&gt;: &lt;password&gt;[,&lt;rolename&gt; ...]</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># Passwords may be clear text, obfuscated or checksummed.  The class</span></span><br><span class="line"><span class="meta"># org.mortbay.util.Password should be used to generate obfuscated</span></span><br><span class="line"><span class="meta"># passwords or password checksums</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># This sets the temporary user accounts for the Rundeck app</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">admin:admin,user,admin</span><br></pre></td></tr></table></figure><p>修改默认端口和访问地址：<br>server/config/rundeck-config.properties</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.address=<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">grails.serverURL=http:<span class="comment">//192.168.1.2</span></span><br></pre></td></tr></table></figure><p>etc/framework.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Server connection information</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">framework.server.name</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.hostname</span>=<span class="number">192.168</span>.<span class="number">1.2</span></span><br><span class="line"><span class="attr">framework.server.port</span>=<span class="number">80</span></span><br><span class="line"><span class="attr">framework.server.url</span>=http://<span class="number">192.168</span>.<span class="number">1.2</span></span><br></pre></td></tr></table></figure><p>修改 dataSource 为 mysql：<br>server/config/rundeck-config.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSource.dbCreate</span>=update</span><br><span class="line"><span class="attr">dataSource.url</span>=jdbc:mysql://<span class="number">192.168</span>.<span class="number">1.2</span>/rundeck?autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">dataSource.username</span>=root</span><br><span class="line"><span class="attr">dataSource.password</span>=password</span><br><span class="line"><span class="attr">dataSource.driverClassName</span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>修改邮件配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">grails.mail.default.from</span>=viease@foxmail.com</span><br><span class="line"><span class="attr">grails.mail.host</span>=</span><br><span class="line"><span class="attr">grails.mail.port</span>=<span class="number">25</span></span><br><span class="line"><span class="attr">grails.mail.username</span>=</span><br><span class="line"><span class="attr">grails.mail.password</span>=</span><br></pre></td></tr></table></figure><p>修改 Project Nodes 配置：<br>projects/<project>/etc</project></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">project.name</span>=</span><br><span class="line"><span class="attr">project.description</span>=</span><br><span class="line"><span class="attr">project.jobs.gui.groupExpandLevel</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">project.ssh-authentication</span>=privateKey</span><br><span class="line"><span class="attr">project.ssh-keypath</span>=/root/.ssh/id_rsa</span><br><span class="line"><span class="attr">project.ssh-command-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.ssh-connect-timeout</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">project.nodeCache.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">project.nodeCache.delay</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">service.NodeExecutor.default.provider</span>=jsch-ssh</span><br><span class="line"><span class="attr">service.FileCopier.default.provider</span>=jsch-scp</span><br><span class="line"><span class="comment"># node 配置文件为本地文件</span></span><br><span class="line"><span class="attr">resources.source.1.type</span>=file</span><br><span class="line"><span class="attr">resources.source.1.config.includeServerNode</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.requireFileExists</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">resources.source.1.config.generateFileAutomatically</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">resources.source.1.config.format</span>=resourcexml</span><br><span class="line"><span class="attr">resources.source.1.config.file</span>=/root/rundeck/projects/&lt;project&gt;/etc/resources.xml</span><br><span class="line"><span class="comment"># node 配置文件为 url</span></span><br><span class="line"><span class="attr">resources.source.2.type</span>=url</span><br><span class="line"><span class="attr">resources.source.2.config.url</span>=http\://localhost\:<span class="number">9998</span>/rundeck_nodes</span><br></pre></td></tr></table></figure><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p>新建一个新的目录 rundeck，将 war 包放在目录内然后运行如下命令启动服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar rundeck<span class="number">-3.0</span><span class="number">.7</span><span class="number">-20181008.</span>war</span><br></pre></td></tr></table></figure><p>也可以使用提供的 rundeckd 来管理</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment"># rundeckd -h</span></span><br><span class="line">Usage: /root/rundeck/server/sbin/rundeckd &#123;start|<span class="string">stop</span>|<span class="string">restart</span>|<span class="string">condrestart</span>|<span class="string">status&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h4><p>Rundeck 可以很方便的备份项目的配置信息，在 Project Settings 里提供导入（Import Archive）导出（Export Archive）项目配置的能力。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方文档提供详细的文档：<a href="https://docs.rundeck.com/docs/manual/03-getting-started.html" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/03-getting-started.html</a></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.rundeck.com/docs/manual/" target="_blank" rel="noopener">https://docs.rundeck.com/docs/manual/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;Rundeck 是一个基于 Java 和 Grails 的开源的运维自动化工具，提供了 Web 管理界面进行操作，同时提供命令行工具和 WebAPI 的访问控制方式。Rundeck 能够帮助开发和运维人员更好地管理各个节点。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://blazehu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Rundeck" scheme="https://blazehu.github.io/tags/Rundeck/"/>
    
    <category term="定时任务" scheme="https://blazehu.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>29. 两数相除</title>
    <link href="https://blazehu.github.io/2018/03/29/leetcode-cn/29.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/"/>
    <id>https://blazehu.github.io/2018/03/29/leetcode-cn/29.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</id>
    <published>2018-03-28T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:50.002Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend 除以除数 divisor 得到的商。<br>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>被除数和除数均为 32 位有符号整数。 除数不为 0。<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = <span class="number">10</span>, divisor = <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: <span class="number">10</span>/<span class="number">3</span> = truncate(<span class="number">3.33333</span>..) = truncate(<span class="number">3</span>) = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">7</span>, divisor = <span class="number">-3</span></span><br><span class="line">输出: <span class="number">-2</span></span><br><span class="line">解释: <span class="number">7</span>/<span class="number">-3</span> = truncate(<span class="number">-2.33333</span>..) = <span class="number">-2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>使用递归和位运算。除数以指数形式增长，计算速度快。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 每次找到最大的n保证 x &gt;= y * pow(<span class="number">2</span>, n)</span><br><span class="line"><span class="number">2.</span> divide(x, y) = pow(<span class="number">2</span>, n) + divide(x - y * pow(<span class="number">2</span>, n), y) </span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> x &lt; y: divide(x, y) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">比如 ：</span><br><span class="line">divide(<span class="number">14</span>, <span class="number">3</span>) = divide(<span class="number">14</span> - <span class="number">12</span>, <span class="number">3</span>) + pow(<span class="number">2</span>, <span class="number">2</span>) </span><br><span class="line">              = divide(<span class="number">2</span>, <span class="number">3</span>) + <span class="number">4</span></span><br><span class="line">              = <span class="number">0</span> + <span class="number">4</span> </span><br><span class="line">              = <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="keyword">int</span>, divisor <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">abs := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">pow := <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">s := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">s *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line">min := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">i, a, b := <span class="number">0</span>, abs(dividend), abs(divisor)</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span> || a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> b &lt;= a &#123;</span><br><span class="line">b = b &lt;&lt; <span class="number">1</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">res := pow(i<span class="number">-1</span>) + divide(a-(b&gt;&gt;<span class="number">1</span>), abs(divisor))</span><br><span class="line"><span class="keyword">if</span> (dividend ^ divisor) &lt; <span class="number">0</span> &#123;</span><br><span class="line">res = -res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(res, (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(divide(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">12</span>, <span class="number">-3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">14</span>, <span class="number">3</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">fmt.Println(divide(<span class="number">-2147483648</span>, <span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/divide-two-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/divide-two-integers</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend 除以除数 divisor 得到的商。&lt;br&gt;整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;被除数和除数均为 32 位有符号整数。 除数不为 0。&lt;br&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: dividend = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, divisor = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = truncate(&lt;span class=&quot;number&quot;&gt;3.33333&lt;/span&gt;..) = truncate(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: dividend = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, divisor = &lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt; = truncate(&lt;span class=&quot;number&quot;&gt;-2.33333&lt;/span&gt;..) = &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="https://blazehu.github.io/2018/03/28/leetcode-cn/28.%20%E5%AE%9E%E7%8E%B0%20strStr()/"/>
    <id>https://blazehu.github.io/2018/03/28/leetcode-cn/28.%20%E5%AE%9E%E7%8E%B0%20strStr()/</id>
    <published>2018-03-27T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:46.506Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现 strStr() 函数。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。<br>如果不存在，则返回 -1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"hello"</span>, <span class="attr">needle</span> = <span class="string">"ll"</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"aaaaa"</span>, <span class="attr">needle</span> = <span class="string">"bba"</span></span><br><span class="line">输出: -<span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l1, l2 := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line"><span class="keyword">if</span> l2 &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1 &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1 &lt; l2 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">x := i</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt;= l1 || j &gt;= l2 &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> haystack[i] == needle[j] &#123;</span><br><span class="line"><span class="keyword">if</span> j == l2<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i - l2 + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i = x + <span class="number">1</span></span><br><span class="line">x++</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="string">"hello"</span>, <span class="string">"ll"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"aaaaa"</span>, <span class="string">"bba"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"helllllo"</span>, <span class="string">"ll"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">a, b = <span class="string">"mississippi"</span>, <span class="string">"issip"</span></span><br><span class="line">fmt.Println(strStr(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/implement-strstr" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-strstr</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;实现 strStr() 函数。&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。&lt;br&gt;如果不存在，则返回 -1。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;attr&quot;&gt;haystack&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;needle&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;ll&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;attr&quot;&gt;haystack&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;aaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;needle&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;bba&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>27. 移除元素</title>
    <link href="https://blazehu.github.io/2018/03/27/leetcode-cn/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>https://blazehu.github.io/2018/03/27/leetcode-cn/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2018-03-26T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:43.052Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。<br>你不需要考虑数组中超出新长度后面的元素。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span>,</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。</span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> val != nums[i] &#123;</span><br><span class="line">nums[index] = nums[i]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums = nums[:index]</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n, k := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, <span class="number">3</span></span><br><span class="line">fmt.Println(removeElement(n, k))</span><br><span class="line">n, k = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, <span class="number">2</span></span><br><span class="line">fmt.Println(removeElement(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。&lt;br&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定 nums = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], val = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数应该返回新的长度 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, 并且 nums 中的前两个元素均为 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定 nums = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], val = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数应该返回新的长度 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, 并且 nums 中的前五个元素为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意这五个元素可为任意顺序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>26. 删除排序数组中的重复项</title>
    <link href="https://blazehu.github.io/2018/03/26/leetcode-cn/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://blazehu.github.io/2018/03/26/leetcode-cn/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:39.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span>。 </span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> length == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">pre, index := nums[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> pre != nums[i] &#123;</span><br><span class="line">pre = nums[i]</span><br><span class="line">index++</span><br><span class="line">nums[index] = nums[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums = nums[:index+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">n = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(removeDuplicates(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定数组 nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数应该返回新的长度 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, 并且原数组 nums 的前两个元素被修改为 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定 nums = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数应该返回新的长度 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, 并且原数组 nums 的前五个元素被修改为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>25. K 个一组翻转链表</title>
    <link href="https://blazehu.github.io/2018/03/25/leetcode-cn/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://blazehu.github.io/2018/03/25/leetcode-cn/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2018-03-24T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:36.799Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。<br>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给你这个链表：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">2</span> 时，应当返回: <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span></span><br><span class="line">当 k = <span class="number">3</span> 时，应当返回: <span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lists    []ListNode</span><br><span class="line">newLists []ListNode</span><br><span class="line">)</span><br><span class="line">p := head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">length := <span class="built_in">len</span>(lists)</span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">1</span> || length &lt; k &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">newLists = <span class="built_in">make</span>([]ListNode, length)</span><br><span class="line">reverse := <span class="function"><span class="keyword">func</span><span class="params">(s []ListNode, x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt;= j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">newLists[x+i], newLists[x+j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length/k; i ++ &#123;</span><br><span class="line">x := i * k</span><br><span class="line">reverse(lists[x:k+x], x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := (length / k) * k; i &lt; length; i++ &#123;</span><br><span class="line">newLists[i] = lists[i]</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;newLists[<span class="number">0</span>]</span><br><span class="line">point := head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(newLists); i++ &#123;</span><br><span class="line">point.Next = &amp;newLists[i]</span><br><span class="line">point = point.Next</span><br><span class="line">&#125;</span><br><span class="line">point.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n, k := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">3</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), <span class="number">3</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;), <span class="number">2</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">n, k = createListNode([]<span class="keyword">int</span>&#123;&#125;), <span class="number">2</span></span><br><span class="line">printListNode(reverseKGroup(n, k))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。&lt;br&gt;如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给你这个链表：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当 k = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 时，应当返回: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当 k = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 时，应当返回: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;你的算法只能使用常数的额外空间。&lt;br&gt;你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>24. 两两交换链表中的节点</title>
    <link href="https://blazehu.github.io/2018/03/24/leetcode-cn/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>https://blazehu.github.io/2018/03/24/leetcode-cn/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2018-03-23T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:33.570Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, 你应该返回 <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>空间换时间， 暴力解法</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lists []ListNode</span><br><span class="line">p := head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">lists = <span class="built_in">append</span>(lists, *p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(lists)<span class="number">-1</span>; i += <span class="number">2</span> &#123;</span><br><span class="line">lists[i], lists[i+<span class="number">1</span>] = lists[i+<span class="number">1</span>], lists[i]</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;lists[<span class="number">0</span>]</span><br><span class="line">point := head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(lists); i++ &#123;</span><br><span class="line">point.Next = &amp;lists[i]</span><br><span class="line">point = point.Next</span><br><span class="line">&#125;</span><br><span class="line">point.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span><br><span class="line">printListNode(swapPairs(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, 你应该返回 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>23. 合并K个排序链表</title>
    <link href="https://blazehu.github.io/2018/03/23/leetcode-cn/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://blazehu.github.io/2018/03/23/leetcode-cn/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:30.470Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lists) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">mix    <span class="keyword">int</span></span><br><span class="line">nilNum <span class="keyword">int</span></span><br><span class="line">length <span class="keyword">int</span></span><br><span class="line">l      *ListNode</span><br><span class="line">p      *ListNode</span><br><span class="line">pre    *ListNode</span><br><span class="line">)</span><br><span class="line">length = <span class="built_in">len</span>(lists)</span><br><span class="line">l = &amp;ListNode&#123;&#125;</span><br><span class="line">p = l</span><br><span class="line">pre = p</span><br><span class="line"><span class="keyword">const</span> MaxNum = <span class="number">999999999</span></span><br><span class="line"><span class="keyword">for</span> nilNum &lt; length &#123;</span><br><span class="line">mix = MaxNum</span><br><span class="line">nilNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> lists[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">nilNum++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix &gt; lists[i].Val &#123;</span><br><span class="line">mix = lists[i].Val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> lists[i] != <span class="literal">nil</span> &amp;&amp; mix == lists[i].Val &#123;</span><br><span class="line">p.Val = mix</span><br><span class="line">lists[i] = lists[i].Next</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nilNum &lt; length &amp;&amp; mix != MaxNum &#123;</span><br><span class="line">p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">pre = p</span><br><span class="line">p = p.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> mix == MaxNum &#123;</span><br><span class="line">pre.Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nilNum == length &amp;&amp; mix == MaxNum &amp;&amp; p == pre &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">6</span>&#125;)&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line">n = []*ListNode&#123;createListNode([]<span class="keyword">int</span>&#123;&#125;), createListNode([]<span class="keyword">int</span>&#123;&#125;),&#125;</span><br><span class="line">printListNode(mergeKLists(n))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>22. 括号生成</title>
    <link href="https://blazehu.github.io/2018/03/22/leetcode-cn/22.%20%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>https://blazehu.github.io/2018/03/22/leetcode-cn/22.%20%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:27.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">3</span></span><br><span class="line">输出：[</span><br><span class="line">       <span class="string">"((()))"</span>,</span><br><span class="line">       <span class="string">"(()())"</span>,</span><br><span class="line">       <span class="string">"(())()"</span>,</span><br><span class="line">       <span class="string">"()(())"</span>,</span><br><span class="line">       <span class="string">"()()()"</span></span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-递归"><a href="#解法：-递归" class="headerlink" title="解法： 递归"></a>解法： 递归</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(l, r, n <span class="keyword">int</span>, str <span class="keyword">string</span>, strList *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> l &lt; r &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">2</span>*n &#123;</span><br><span class="line">*strList = <span class="built_in">append</span>(*strList, str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l &lt; n &#123;</span><br><span class="line">backtrack(l+<span class="number">1</span>, r, n, str+<span class="string">"("</span>, strList)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r &lt; n &#123;</span><br><span class="line">backtrack(l, r+<span class="number">1</span>, n, str+<span class="string">")"</span>, strList)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">strList := &amp;[]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">backtrack(<span class="number">0</span>, <span class="number">0</span>, n, <span class="string">""</span>, strList)</span><br><span class="line"><span class="keyword">return</span> *strList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">1</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">2</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">3</span>))</span><br><span class="line">fmt.Println(generateParenthesis(<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight excel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;built_in&quot;&gt;n&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;((()))&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;(()())&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;(())()&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;()(())&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;()()()&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>21. 合并两个有序链表</title>
    <link href="https://blazehu.github.io/2018/03/21/leetcode-cn/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://blazehu.github.io/2018/03/21/leetcode-cn/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:24.044Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">l *ListNode</span><br><span class="line">p *ListNode</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">l = &amp;ListNode&#123;&#125;</span><br><span class="line">p = l</span><br><span class="line"><span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Val = l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Val = l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> l1.Val &gt; l2.Val &#123;</span><br><span class="line">p.Val = l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Val = l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">p.Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;), createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</span><br><span class="line">printListNode(a)</span><br><span class="line">printListNode(b)</span><br><span class="line">printListNode(mergeTwoLists(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>20. 有效的括号</title>
    <link href="https://blazehu.github.io/2018/03/20/leetcode-cn/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://blazehu.github.io/2018/03/20/leetcode-cn/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:19.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"()"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"(]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"([)]"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法：-栈"><a href="#解法：-栈" class="headerlink" title="解法： 栈"></a>解法： 栈</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">stack *list.List</span><br><span class="line">)</span><br><span class="line">stack = list.New()</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> item == <span class="number">40</span> || item == <span class="number">91</span> || item == <span class="number">123</span> &#123;</span><br><span class="line">stack.PushBack(item)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">x := stack.Back()</span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">r := x.Value.(<span class="keyword">int32</span>)</span><br><span class="line"><span class="keyword">if</span> item == <span class="number">41</span> &amp;&amp; r == <span class="number">40</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">93</span> &amp;&amp; r == <span class="number">91</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> item == <span class="number">125</span> &amp;&amp; r == <span class="number">123</span> &#123;</span><br><span class="line">stack.Remove(x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"container/list"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"()"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"[()]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"(&#123;)&#125;"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"()[]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"([&#123;&#125;])"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"]"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">s = <span class="string">"(])"</span></span><br><span class="line">fmt.Println(isValid(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;有效字符串需满足：&lt;br&gt;左括号必须用相同类型的右括号闭合。&lt;br&gt;左括号必须以正确的顺序闭合。&lt;br&gt;注意空字符串可被认为是有效字符串。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;string&quot;&gt;&quot;()&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;string&quot;&gt;&quot;()[]&amp;#123;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;string&quot;&gt;&quot;(]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;string&quot;&gt;&quot;([)]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;[]&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>19. 删除链表的倒数第N个节点</title>
    <link href="https://blazehu.github.io/2018/03/19/leetcode-cn/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>https://blazehu.github.io/2018/03/19/leetcode-cn/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2018-03-18T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:15.087Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。给定的 n 保证是有效的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, 和 n = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><p>扫描一遍，使用数组存储所有节点</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">p     *ListNode</span><br><span class="line">pList []*ListNode</span><br><span class="line">)</span><br><span class="line">p = head</span><br><span class="line"><span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">pList = <span class="built_in">append</span>(pList, p)</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">l := <span class="built_in">len</span>(pList)</span><br><span class="line"><span class="keyword">if</span> l == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">pre := l - n - <span class="number">1</span></span><br><span class="line">next := l - n + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> next &gt;= l &#123;</span><br><span class="line">pList[pre].Next = <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> pre &lt; <span class="number">0</span> &#123;</span><br><span class="line">head = head.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pList[pre].Next = pList[next]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h5><p>i, j 双指针初始化为表头和表头后 n 个节点。i 和 j 双指针保持窗口大小为 n （间距）同时向后移动，当 j 移动到表尾， i 指向的就是我们要找的倒数第 n 个节点。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createListNode</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> head *ListNode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = &amp;ListNode&#123;Val: a[<span class="number">0</span>]&#125;</span><br><span class="line">p := head</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">n := ListNode&#123;Val: item&#125;</span><br><span class="line">p.Next = &amp;n</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">" -&gt; "</span>)</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(head.Val, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := createListNode([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;)</span><br><span class="line">printListNode(a)</span><br><span class="line">printListNode(removeNthFromEnd(a, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。给定的 n 保证是有效的。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个链表: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, 和 n = &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当删除了倒数第二个节点后，链表变为 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>18. 四数之和</title>
    <link href="https://blazehu.github.io/2018/03/18/leetcode-cn/18.%20%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://blazehu.github.io/2018/03/18/leetcode-cn/18.%20%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2018-03-17T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:12.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>答案中不可以包含重复的四元组。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>]，和 target = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">-2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">retNum := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">retMiddleNums := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">retNumStr := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">numLength := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; numLength<span class="number">-3</span>; x++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := x + <span class="number">1</span>; i &lt; numLength<span class="number">-2</span>; i++ &#123;</span><br><span class="line">k := i + <span class="number">1</span></span><br><span class="line">j := numLength - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k &lt; j &#123;</span><br><span class="line">a, b, c, d := nums[i], nums[k], nums[j], nums[x]</span><br><span class="line"><span class="keyword">if</span> a+b+c+d &lt; target &#123;</span><br><span class="line">k++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a+b+c+d &gt; target &#123;</span><br><span class="line">j--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">subRet := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, a, b, c, d)</span><br><span class="line">sort.Ints(subRet)</span><br><span class="line"><span class="keyword">var</span> numStrList []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> numStr <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(subRet); i++ &#123;</span><br><span class="line">numStrList = <span class="built_in">append</span>(numStrList, strconv.Itoa(subRet[i]))</span><br><span class="line">&#125;</span><br><span class="line">numStr = strings.Join(numStrList, <span class="string">","</span>)</span><br><span class="line">retMiddleNums[numStr] = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (b == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k &lt; j) &amp;&amp; (c == nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">k++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> numStr := <span class="keyword">range</span> retMiddleNums &#123;</span><br><span class="line">retNumStr = <span class="built_in">append</span>(retNumStr, numStr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(retNumStr); index++ &#123;</span><br><span class="line">strNumList := strings.Split(retNumStr[index], <span class="string">","</span>)</span><br><span class="line"><span class="keyword">var</span> retNumItem []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strNumList); i++ &#123;</span><br><span class="line">numItem, _ := strconv.Atoi(strNumList[i])</span><br><span class="line">retNumItem = <span class="built_in">append</span>(retNumItem, numItem)</span><br><span class="line">&#125;</span><br><span class="line">retNum = <span class="built_in">append</span>(retNum, retNumItem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums, target := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">0</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">nums, target = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="number">4</span></span><br><span class="line">fmt.Println(fourSum(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/4sum</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;p&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。&lt;/p&gt;&lt;h4 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h4&gt;&lt;p&gt;答案中不可以包含重复的四元组。&lt;/p&gt;&lt;h4 id=&quot;示例：&quot;&gt;&lt;a href=&quot;#示例：&quot; class=&quot;headerlink&quot; title=&quot;示例：&quot;&gt;&lt;/a&gt;示例：&lt;/h4&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定数组 nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]，和 target = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;满足要求的四元组集合为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>17. 电话号码的字母组合</title>
    <link href="https://blazehu.github.io/2018/03/17/leetcode-cn/17.%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>https://blazehu.github.io/2018/03/17/leetcode-cn/17.%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2018-03-16T16:00:00.000Z</published>
    <updated>2021-11-29T13:25:07.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>给出数字到字母的映射如下（与电话按键相同）。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1 不对应任何字母。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">"23"</span></span><br><span class="line">输出：[<span class="string">"ad"</span>, <span class="string">"ae"</span>, <span class="string">"af"</span>, <span class="string">"bd"</span>, <span class="string">"be"</span>, <span class="string">"bf"</span>, <span class="string">"cd"</span>, <span class="string">"ce"</span>, <span class="string">"cf"</span>].</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解法（递归求解）"><a href="#解法（递归求解）" class="headerlink" title="解法（递归求解）"></a>解法（递归求解）</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">all []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(digits) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">numMap := <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"2"</span>: &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;,</span><br><span class="line"><span class="string">"3"</span>: &#123;<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;,</span><br><span class="line"><span class="string">"4"</span>: &#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;,</span><br><span class="line"><span class="string">"5"</span>: &#123;<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>&#125;,</span><br><span class="line"><span class="string">"6"</span>: &#123;<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>&#125;,</span><br><span class="line"><span class="string">"7"</span>: &#123;<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>&#125;,</span><br><span class="line"><span class="string">"8"</span>: &#123;<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>&#125;,</span><br><span class="line"><span class="string">"9"</span>: &#123;<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">getTwoLetterCombinations := <span class="function"><span class="keyword">func</span><span class="params">(num1, num2 []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">strList []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">l1, l2 := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; l1 &#123;</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j &lt; l2 &#123;</span><br><span class="line">strList = <span class="built_in">append</span>(strList, num1[i])</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; l2*l1 &#123;</span><br><span class="line">strList[i] += num2[i%l2]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strList</span><br><span class="line">&#125;</span><br><span class="line">numStr := <span class="keyword">string</span>(digits[<span class="number">0</span>])</span><br><span class="line">all = numMap[numStr]</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">1</span>; index &lt; <span class="built_in">len</span>(digits); index++ &#123;</span><br><span class="line">numStr := <span class="keyword">string</span>(digits[index])</span><br><span class="line">numStrList := numMap[numStr]</span><br><span class="line">all = getTwoLetterCombinations(all, numStrList)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"23"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"2"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"27"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"234"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">s = <span class="string">"34"</span></span><br><span class="line">fmt.Println(letterCombinations(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;br&gt;给出数字到字母的映射如下（与电话按键相同）。&lt;/p&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;1 不对应任何字母。&lt;/p&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;string&quot;&gt;&quot;ad&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ae&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;af&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bd&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;be&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bf&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ce&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cf&quot;&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blazehu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://blazehu.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
